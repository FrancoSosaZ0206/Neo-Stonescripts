// *******************************************************
//                       Combat.txt                       
// *******************************************************


/* FILE INFO
  Combat functions library
  Made by MetalEagle26 (Tom Crow)

This library provides some game-related
functions to make the task of doing a
farming script easier.

- How to use:
  var c = new Combat

- Tip: If you want to use the variables here,
       put c.Main() at the top of your script.

- Use the functions that you need like this:
  ?c.useBFG() // example */


// IMPORTS

var u = import MyScripts/Lib/Utility_Data




// VARIABLES

// Status

var midhp
var lowhp
var hihp



// FUNCTIONS

func Init()
  midhp = maxhp / 2
  lowhp = maxhp / 3
  hihp = (4 * maxhp) / 5

  ?loc.loop
    apsTimer = 0

  return


// Lost items

func canUseBFG()
  return item.GetCooldown("blade") <= 0
  ^& item.CanActivate()
// cannot be interrupted, doesn't need a cooldown check
func useBFG()
  equip blade
  activate R

  return

/* Checks if Blade of the Fallen God
can be used in 2 screens of distance,
according to a certain screen index. */
func canUseBFG_DS(nScreen)
  return canUseBFG()
  ^& screen.i = nScreen
/* counter to give
screen.Next()
time to slide */
var slideCount = 0
func useBFG_DS()
  ?slideCount = 0
    screen.Next()
    slideCount = 20
  
  :?slideCount > 0
    slideCount--
  
    ?slideCount = 0
      useBFG()
      screen.ResetOffset()
      return


func canUseSkeletonArm()
  return item.GetCooldown("skeleton_arm") <= 0
  ^& item.CanActivate()
  ^& 3 < foe.distance & foe.distance < 9
func useSkeletonArm()
  equip arm
  activate R

  return


func canUseCultistMask()
  return item.GetCooldown("mask") <= 0
  ^& item.CanActivate()
func useCultistMask()
  equipL triskelion
  equipR mask
  activate R

  return

func canUseCultistMask_DS(nScreen)
  return canUseCultistMask()
  ^& screen.i = nScreen
func useCultistMask_DS()
  ?slideCount = 0
    screen.Next()
    slideCount = 20
  
  :?slideCount > 0
    slideCount--
  
    ?slideCount = 0
      useCultistMask()
      screen.ResetOffset()
      return


func canUseFireTalisman()
  return
  ^item.GetCooldown("fire_talisman") <= 0 & // if it's not on cooldown
  ^item.CanActivate() & // if you can use the ability
  ^summon.GetId() ! "cinderwisp" | // if it's not summoned already
  ^(item.left = "fire_talisman" & item.left.state = 2) | // if it's equipped in the left hand
  ^(item.right = "fire_talisman" & item.right.state = 2) // or in the right hand
func useFireTalisman(hand)
  ?hand = "l" | hand = "left"
    equipL fire_talisman
    activate L
  :?hand = "r" | hand = "right"
    equipR fire_talisman
    activate R

  return

/* Same as canUseFireTalisman,
But now we check if it
is summoned.*/
func canHideFireTalisman()
  return
  ^item.GetCooldown("fire_talisman") &
  ^item.CanActivate() &
  ^summon.GetId() = "cinderwisp" |
  ^(item.left = "fire_talisman" & item.left.state = 2) |
  ^(item.right = "fire_talisman" & item.right.state = 2)

/* Checks if the
cinderwisp's "devour"
ability can be used. */
func canUseCinderwisp()
  return
  ^item.GetCooldown("cinderwisp") <= 0 &
  ^item.CanActivate() &
  ^summon.GetId() = "cinderwisp"
func useCinderwisp()
  activate cinderwisp
  return

/* Checks if the cinderwisp's
"devour" ability damage will
kill the foe.
  - foeTotalHP: sum of the foe's current hp and armor
  - nIgnitions: amount of ignition debuffs currently
                applied to the foe.
  - cindDmg: damage dealt by cinderwisp for each ignition.
  - margin: number representing a health margin to add
            to the remaining foe's health. This is
            necessary because the ability has a cast time
            that will alter the estimations done here.
            Send 0 if you don't want to use a margin. */
func canKillCinderwisp(foeTotalHP, nIgnitions, cindDmg, margin)
  return foeTotalHP <= (nIgnitions * cindDmg) + margin


func canUseAetherTalisman()
  return
  ^item.GetCooldown("aether_talisman") <= 0 &
  ^item.CanActivate() &
  ^summon.GetId() ! "voidweaver" |
  ^(item.left = "aether_talisman" & item.left.state = 2) |
  ^(item.right = "aether_talisman" & item.right.state = 2)
func useAetherTalisman(hand)
  ?hand = "l" | hand = "left"
    equipL aether_talisman
    activate L
  :?hand = "r" | hand = "right"
    equipR aether_talisman
    activate R

  return

/* Same as canUseAetherTalisman,
But now we check if it
is summoned.*/
func canHideAetherTalisman()
  return
  ^item.GetCooldown("aether_talisman") &
  ^item.CanActivate() &
  ^summon.GetId() = "voidweaver" |
  ^(item.left = "aether_talisman" & item.left.state = 2) |
  ^(item.right = "aether_talisman" & item.right.state = 2)


/* Checks if the
voidweaver's "devour"
ability can be used. */
func canUseVoidweaver()
  return
  ^item.GetCooldown("voidweaver") <= 0 &
  ^item.CanActivate() &
  ^summon.GetId() = "voidweaver"
func useVoidweaver()
  activate voidweaver
  return

func canUseVoidweaver_DS(nScreen)
  return canUseVoidweaver()
  ^& screen.i = nScreen
func useVoidweaver_DS()
  ?slideCount = 0
    screen.Next()
    slideCount = 20

  :?slideCount > 0
    slideCount--
  
    ?slideCount = 0
      useVoidweaver()
      screen.ResetOffset()

      return


/* Checks if the
bashing shield's
ability can be used. */
func canUseBashingShield()
  return
  ^item.GetCooldown("bash") <= 0 &
  ^item.CanActivate() &
  ^11 <= foe.distance & foe.distance <= 15 &
  ^!ai.idle
func useBashingShield(lItem)
  equipL @lItem@
  equipR bashing shield

  return


// Special Weapons

func canUseHeavyHammer()
  return item.GetCooldown("heavy_hammer") <= 0 &
  ^item.CanActivate() &
  ^foe.distance <= u.heavyHammer_ability_range |
  ^(item.right = "heavy hammer" &
  ^item.right.state = 2)
func useHeavyHammer(weaponName)
  equip @weaponName@
  activate R

  return

func canUseBardiche()
  return item.GetCooldown("bardiche") <= 0 &
  ^item.CanActivate() &
  ^foe.distance <= u.bardiche_ability_range |
  ^(item.right = "bardiche" &
  ^item.right.state = 2)
func useBardiche(weaponName)
  equip @weaponName@
  activate R

  return


/* Checks if the
dashing shield's
ability can be used. */
func canUseDashingShield()
  return
  ^item.GetCooldown("dash") <= 0 &
  ^item.CanActivate() &
  ^11 <= foe.distance & foe.distance <= 15 &
  ^!ai.idle
func useDashingShield(lItem, weaponName)
  equipL @lItem@
  equipR @weaponName@

  return


func canUseQuarterstaff()
  return
  ^item.GetCooldown("quarterstaff") <= 0 &
  ^item.CanActivate() |
  ^(item.right = "quarterstaff"
  ^& item.right.state = 2)
func useQuarterstaff(weaponName)
  equip @weaponName@
  activate R

  return


func canUseMindstone()
  return item.GetCooldown("mind") <= 0 &
  ^item.CanActivate()


func canUseWandGravity()
  return
  ^item.GetCooldown("wand_stone") <= 0 &
  ^item.CanActivate()
func useWandGravity(weaponName, hand)
  ?hand = "l" | hand = "left"
    equipL @weaponName@
  :?hand = "r" | hand = "right"
    equipR @weaponName@

  activate wand_stone

  return

func canUseWandPlague()
  return
  ^item.GetCooldown("wand_poison") <= 0 &
  ^item.CanActivate() &
  ^armor >= 6
func useWandPlague(weaponName, hand)
  ?hand = "l" | hand = "left"
    equipL @weaponName@
  :?hand = "r" | hand = "right"
    equipR @weaponName@

  activate wand_poison

  return

func canUseWandReset()
  return
  ^item.GetCooldown("wand_vigor") <= 0 &
  ^item.CanActivate() &
  ^armor >= 1
func useWandReset(weaponName, hand)
  ?hand = "l" | hand = "left"
    equipL @weaponName@
  :?hand = "r" | hand = "right"
    equipR @weaponName@

  activate wand_vigor

  return

func canUseWandCalamity()
  return
  ^item.GetCooldown("wand_aether") <= 0 &
  ^item.CanActivate() &
  ^armor >= 14
func useWandCalamity(weaponName, hand)
  ?hand = "l" | hand = "left"
    equipL @weaponName@
  :?hand = "r" | hand = "right"
    equipR @weaponName@

  activate wand_aether

  return

func canUseWandExplosive()
  return
  ^item.GetCooldown("wand_fire") <= 0 &
  ^item.CanActivate() &
  ^armor >= 4
func useWandExplosive(weaponName, hand)
  ?hand = "l" | hand = "left"
    equipL @weaponName@
  :?hand = "r" | hand = "right"
    equipR @weaponName@

  activate wand_fire

  return

func canUseWandFrost()
  return
  ^item.GetCooldown("wand_ice") <= 0 &
  ^item.CanActivate() &
  ^armor >= 3
func useWandFrost(weaponName, hand)
  ?hand = "l" | hand = "left"
    equipL @weaponName@
  :?hand = "r" | hand = "right"
    equipR @weaponName@

  activate wand_ice

  return


func canUseStaffAcrobatic()
  return
  ^item.GetCooldown("staff_stone") <= 0 &
  ^item.CanActivate() &
  ^armor >= 3
func canUseStaffBerserker()
  return
  ^item.GetCooldown("staff_poison") <= 0 &
  ^item.CanActivate() &
  ^armor >= 8
func canUseStaffPrevention()
  return
  ^item.GetCooldown("staff_vigor") <= 0 &
  ^item.CanActivate() &
  ^armor >= 4
func canUseStaffGrasping()
  return
  ^item.GetCooldown("staff_aether") <= 0 &
  ^item.CanActivate() &
  ^armor >= 2
func canUseStaffInfernal()
  return
  ^item.GetCooldown("staff_fire") <= 0 & // not on cooldown
  ^item.CanActivate() &
  ^armor >= 6 // enough armor to activate ability
func canUseStaffEternity()
  return
  ^item.GetCooldown("staff_ice") <= 0 &
  ^item.CanActivate() &
  ^armor >= 1

func useStaffHidden(weaponName)
  equip @weaponName@
  activate R
  return


// Tools

func canUseHatchet()
  return item.GetCooldown("hatchet") <= 0
  ^& item.CanActivate()
  ^& harvest.distance < 5
  ^& item.right = "hatchet"
func useHatchet()
  activate R
  return


// Potions

func canUsePotion()
  return
  ^item.CanActivate() &
  ^item.potion ! "empty"

/* Checks if a healing type potion
can be used.
These potions are considered as healing:
  - healing
  - defensive
  - vampiric */
func canUsePotionHeal()
  ?canUsePotion()
    ?item.potion = "healing"
      return hp + armor <= foe.damage

    :?item.potion = "vampiric"
      return hp < lowhp

    :?item.potion = "defensive"
      return hp <= midhp
    
    :
      return false
  :
    return false
/* Determines if a damage buff potion
is brewed. Generally used for bosses.
These potions are considered as damaging:
  - berserk
  - lucky */
func canUsePotionDmg()
  ?canUsePotion()
    return
    ^item.potion = "berserk" |
    ^item.potion = "lucky"
  :
    return false
/* Determines if a special potion
can be activated, given a special
condition that's different for each potion type.
Valid potion types and conditions:
  - cleansing | min. no. of debuffs to cleanse
  - strength | min. amount of foe's armor
  - lightning, | ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
  - experience | min. no. of foes to activate
  - invisibility | NONE (will activate if foe = boss)
    + (send true as condition for this type) */
func canUsePotionSpecial(type,cond)
  ?canUsePotion()

    ?item.potion = type
      ?item.potion = "cleansing"
        return hp < midhp &
        ^debuffs.count >= cond
        // ^^^ = no. of debuffs to cleanse
    
      :?item.potion = "strength"
        return foe.armor & foe.armor > cond

      :?item.potion = "lightning"
      ^|item.potion = "experience"
        return foe.count >= cond

      :?item.potion = "invisibility"
        return foe = boss

      :
        >c-10,0,#red,
        ^func canUsePotionSpecial() - Potion recieved\n
        ^does not belong to this function: "@type@"
        return false

    :
      >c-10,0,#red,
      ^func canUsePotionSpecial() - Potion recieved\n
      ^is not valid or equipped: "@type@"
      return false

  : // potion hasn't been brewed, it's been used,
    return false //or just can't be activated atm


// Status effects

/* Returns true if the foe is
vulnerable to Chill and if the
debuff isn't applied yet. */
func canDebuffChill()
  return
  ^foe.debuffs.string ! "chill:6" &
  ^foe ! "immune_to_debuff_chill"
/* Returns true if the foe is
vulnerable to Weaken and if the
debuff isn't applied yet. */
func canDebuffWeaken()
  return
  ^foe.debuffs.string ! "damage" &
  ^foe ! "immune_to_debuff_damage"
/* Returns true if the foe is
vulnerable to Burn and if the
debuff isn't applied yet. */
func canDebuffBurn()
  return
  ^foe.debuffs.string ! "dot" &
  ^foe ! "immune_to_debuff_dot"

/* checks if the foe is vulnerable
to at least one of the following
typical debuffs:
- Chill (attack and movement speed reduction)
- Weaken (damage reduction)
- Burn (damage over time) */
func canDebuffAny()
  return
  ^canDebuffChill() |
  ^canDebuffWeaken() |
  ^canDebuffBurn()
/* checks if the foe is vulnerable
to ALL of the following
typical debuffs:
- Chill (attack and movement speed reduction)
- Weaken (damage reduction)
- Burn (damage over time) */
func canDebuffAll()
  return
  ^foe ! "immune_to_debuff_chill" &
  ^foe ! "immune_to_debuff_damage" &
  ^foe ! "immune_to_debuff_dot"



// Others

var moonTimer = 0
var moonFrame
func doMoondial(weapon1, weapon2, mode)

  ?mode = 0 // Normal moondialing
    moonTimer++
    moonFrame = moonTimer % 3

    ?moonFrame = 1
      equipL moon
      equipR @weapon1@
    :?moonFrame = 2
      equipL moon
      equipR @weapon2@
    :
      equipL @weapon1@
      equipR @weapon2@

  :?mode = 1
    /* Berserk Moondialing (For non-speed enchanted *max
    swords) */
    moonTimer++
    moonFrame = moonTimer % 4

    ?moonFrame = 1
      equipL @weapon2@ // on cooldown
      equipR @weapon1@
    :?moonFrame = 2
      equipL moon
      equipR @weapon1@
    :?moonFrame = 3
      equipL @weapon1@ // on cooldown
      equipR @weapon2@
    :?moonFrame = 4
      equipL moon
      equipR @weapon2@
  
  :?mode = 2
    /* Not moondialing, but useful to have here (speed
    enchant *max swords) */
    equipL @weapon2@
    equipR @weapon1@

  :?mode = 3
    /* For when you have just 1 +21 sword (weapon2 can be
    anything, it will not be used) */
    ?foe.distance <= 5
      equipL moon
    :
      equipL @weapon2@
    equipR @weapon1@

  return

var apsTimer = 0
/* Fastest moondialing variant with all dual D rune swords.
Requires them all to be *21 speed enchanted. */
func doAps(s1, s2, s3, s4, s5, s6, s7, s8, s9, s10)
  apsTimer++

  equipL moon
  ?apsTimer = 0
    equipR @s1@

  :?apsTimer = 1
    equipR @s2@

  :?apsTimer = 2
    equipR @s3@

  :?apsTimer = 3
    equipR @s4@

  :?apsTimer = 4
    equipR @s5@

  :?apsTimer = 5
    equipR @s6@

  :?apsTimer = 6
    equipR @s7@

  :?apsTimer = 7
    equipR @s8@

  :?apsTimer = 8
    equipR @s9@

  :?apsTimer = 9
    equipR @s10@
  :
    return

/* AAC = Attack Animation Cancelling
Widely used trick to enable a
massive attack speed boost*/
func doAAC(itemLeft, itemRight)
  ?item.left.state = 3
    equipL @itemLeft@
    equipL @item.left@
  ?item.right.state = 3
    equipR @itemRight@
    equip @item.right@ // equip works for two-handed items as well

  // return



// *******************************************************
//                  END OF "Combat.txt"                   
// *******************************************************
