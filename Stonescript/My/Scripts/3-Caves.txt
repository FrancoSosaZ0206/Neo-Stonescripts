// ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓ //
// ┃ ▄▀▄▀▄▀▄▀▄▀ START OF "3-Caves" ▄▀▄▀▄▀▄▀▄ ┃ //
// ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛ //

// ///////////////// IMPORTS ///////////////// //

var log = import My/Lib/Error_Logging/public

var c = import My/Lib/Combat
var s = import My/Lib/Stats
var a = import My/Lib/Arsenal

var es = import My/Lib/Effect_Stats/public
var tracker = import My/Lib/Ranged_Debuffing/public

// //////////////// VARIABLES //////////////// //

// file
var _FILE = "Scripts/3-Caves"

// flags
var canDash  = true
var hardElite = false

// values
var stunTime = null
var hand     = null

var itemSplash = 17 // bardiche hitbox + splash area

// screens
var minibossScr = null
var isMinibossScr = (loc.stars > 10)
var lastFoeScr = null
var isLastFoeScr = false
var bossScr = null
var isBossScr = false

var bfgInitScr = 2

// TODO: implement
var boss_cutscenes = []

// counters
// number of runs in this session
var nRuns = 1
/* time when permapot was activated,
   -1 means not activated. */
var permapotActTime = -1
// permapot time bandwidth
var permapotTbw = loc.averageTime -
^                 (loc.averageTime / 10)

var old_t = item.GetTreasureCount()
var end_t = 0

var minibossAtkTime = 0

// //////////////// FUNCTIONS //////////////// //

func fight(mode)
  ?mode = "escape"
    canDash = false

    ?c.canUseAbility("mind")
      a.ldtF("mind")
    : // c.canUseAbility("staff_stone")
      c.useAbility_TH("staff_stone", a.stSh)

  :?mode = "evade"
    canDash = false

    ?c.canUseAbility("staff_stone") &
    ^ (foe ! "ranged" |
    ^  (foe = "phase" & s.inRange("dash_min")))
      c.useAbility_TH("staff_stone", a.stSh)
    :?c.canUseAbility("mind") &
    ^ (foe ! "ranged" |
    ^  (foe = "phase" & s.inRange("dash_min")))
      a.ldtF("mind")

    :?c.canUseAbility("staff_ice") &
    ^ s.inRange("dash_min")
      c.useAbility_TH("staff_ice", a.stIh)

    :?!s.inRange("sword")
      ?foe.count > 1
        fight("normal")
      :
        fight("normal")

    // Unmake
    :?es.canUnmake()
      a.ldtF("defense unmake")
    :
      a.ldtF("defense")

  :?mode = "normal"
    // ........... DEBUFFING LOGIC ........... //

    ?(tracker.canTrack("Weaken") |
    ^ tracker.canTrack("Burn")    ) &
    // AOE debuffing
    ^((!canDash |
    ^  (foe = "elite" &
    ^   foe.GetCount(itemSplash) > 1)))
      ?tracker.canTrack("Weaken")
        a.ldtF("magic debuff weaken")
      : // tracker.canTrack("Burn")
        a.ldtF("magic debuff burn")

    // 1v1 strong foe weakening
    :?es.canDebuff("Weaken") & canDash &
    ^ (foe = "monarch" | foe = "boss") &
    ^ s.inRange("sword")
      a.ldtF("sword debuff weaken")

    :?es.canMultiDebuff(["Chill"/*,"Burn"*/],"any") &
    ^ canDash & s.inRange("sword") &
    // Permapot 1v1 debuffing
    ^ ((c.permapotSetup & foe = "elite" &
    ^   foe.GetCount(itemSplash) = 1) |
    // 1v1 strong foe debuffing
    ^  (((loc.stars > 15 &
    ^     (foe = "monarch" | foe = "boss") &
    ^     s.getFoeDmg() > 0) |
    ^    nRuns = 1)))
      a.ldtF("sword debuff auto")

    // ............ HEALING LOGIC ............ //
    :?hp ! maxhp &
    ^ ((canDash &
    ^   foe.GetCount(itemSplash) = 1) |
    ^  foe = "monarch")
      a.ldtF("sword heal")

    // ........... UNMAKING LOGIC ............ //
    :?es.canUnmake()
      ?canDash &
      ^foe.GetCount(itemSplash) = 1
        a.ldtF("sword unmake")
      : // foe.GetCount(itemSplash) > 1
        itemSplash = 10
        a.ldtF("big sword unmake")

    // ............ DAMAGE LOGIC ............. //
    :?foe = "phase" & canDash
      ?c.canUseAbility("staff_poison") &
      ^!s.inRange("dash")
        c.useAbility_TH("staff_poison", a.stPh)
      :?c.canUsePotion()
        activate potion
      // reduce damage with Cultist Mask
      :?c.canUseAbility("mask") & foe = "phase"
        c.useAbility_OH("mask", "mask", "r")
      :
        a.ldtF("sword dmg")

    :?canDash &
    ^ (foe.GetCount(itemSplash) = 1 |
    ^  foe = "monarch" | foe = "boss")
      a.ldtF("sword dmg")
    :
      itemSplash = foe.distance + 7
      a.ldtF("magic dmg")

  : // invalid mode
    log.logError(_FILE,"fight",
    ^   "unknown <mode>: "+mode)

// /////////////// PROCEDURE //////////////// //

// .............. SETUP LOGIC ............... //

?loc.loop
  nRuns++

// set up post-treasure metrics
?old_t ! item.GetTreasureCount()
  // reset metrics
  ?loc.loop | !isBossScr
    old_t = item.GetTreasureCount()
    end_t = 0
  : // track time
    end_t++

// set up bossScr
?!bossScr
  ?loc.stars <= 4
    bossScr = 5
  :?loc.stars = 5 // white
    bossScr = 4
  :?loc.stars <= 10 // cyan
    bossScr = 9
  :?loc.stars <= 15 // yellow
    bossScr = 8
  :?loc.stars <= 20 // green
    bossScr = 5 + loc.stars - 16
: // set up isBossScr
  isBossScr = (screen.i = bossScr)

// set up isMinibossScr
?!minibossScr & loc.stars > 10
  ?loc.stars <= 15
    minibossScr = 6
  :?loc.stars <= 20
    minibossScr = 2
:?minibossScr // set up isMinibossScr
  isMinibossScr = (screen.i = minibossScr)

// set up lastFoeScr and bossScr
?!lastFoeScr
  ?loc.stars <= 4 // white
    lastFoeScr = 3
  ?loc.stars = 5
    lastFoeScr = 2
  :?loc.stars <= 10 // cyan
    lastFoeScr = 6
  :?loc.stars <= 15 // yellow
    lastFoeScr = 5
  :?loc.stars <= 20 // green
    lastFoeScr = 2 + loc.stars - 16
: // set up isLastFoeScr and isBossScr
  isLastFoeScr = (screen.i = lastFoeScr)

/* set up permapotSetup:
- from yellow onwards,
- in first run, or
- in green, when in boss screen. */
c.permapotSetup = (nRuns = 1 & loc.stars > 10 &
^(loc.stars <= 15 | screen.i >= bossScr - 1))

// Record time when permapot was activated
?c.permapotSetup & permapotActTime = -1
  permapotActTime = totaltime

// BFG logic
?loc.stars = math.Clamp(loc.stars,4,5)
  bfgInitScr = 1
c.screenMngr_DS("blade", bfgInitScr, lastFoeScr - 1)

// set up itemSplash default value
itemSplash = 17 // bardiche's hitbox + itemSplash area

// set up canDash
?isMinibossScr & foe ! "boss"
  canDash = false
:
  canDash = true

// set variables for getFoeDmg
s._berserkerLvl = a.berserkerLvl
s._plagueLvl    = a.plagueLvl
s._maskLvl      = a.maskLvl

// init Combat
c.Init()
// start up Ranged_Debuffing tracker
tracker.track()

// set up stunTime
stunTime = foe.debuffs.GetTime("stun")

// Decide hand for one-handed items
?c.permapotSetup |
^(s.inRange("dash") & canDash & ai.walking)
  hand = "left"
:
  hand = "right"

// Auto brewing
?loc.stars <= 10
  c.potionType = "berserk"
:
  c.potionType = "lucky"
?c.canBrewPotion()
  c.brewPotion()

// track post-treasure time
?old_t ! item.GetTreasureCount()
  end_t++

// set up minibossAtkTime
?foe = "cool_bat"
  ?foe.state = 33 & foe.time = 0
    minibossAtkTime = 0
  ?foe.state ! 32
    minibossAtkTime ++

// ............. MONITOR LOGIC .............. //

// permapot time bandwidth monitor:
?permapotActTime ! -1 & nRuns = 1
  var delay = totaltime + (5 * 30)
  ?totaltime <= delay
    >o-7,6,#magenta,wait until 
    ^@time.FormatDigital(permapotTbw)@

/* // foe distance monitor
?foe.distance ! 9999
  >f0,10,#magenta,dist=@foe.distance@
*/

// bfg ds screens monitor
var bfgDsTargetScr = null
bfgDsTargetScr = c.getScreen_DS("blade",
^                               "TARGET")

?bfgDsTargetScr
  var bfgCol = #00ff00

  ?screen.i > bfgDsTargetScr
    bfgCol = #888888
  :?screen.i < bfgDsTargetScr
    bfgCol = #ffff00
  : // screen.i = bfgDsTargetScr
    bfgCol = #00ff00

  >`1,10,@bfgCol@,bfg: @screen.i@/
  ^@bfgDsTargetScr@

// item states monitor:
>`1,12,#magenta,ils: @item.left.state@ | 
^irs: @item.right.state@

var permapotCol
?c.permapotSetup
  permapotCol = #00ff00
:
  permapotCol = #ff0000
>`1,13,@permapotCol@,permapotSetup

// show effect durations
?buffs.string = "ʘ" | buffs.string = "lucky"
  var potTime
  ?buffs.string = "ʘ"
    potTime = buffs.GetTime("ʘ")
  : // buffs.string = "lucky"
    potTime = buffs.GetTime("lucky")

  >`1,15,#0066ff,@c.potionType@: @potTime@f 
  ^(@time.FormatDigital(potTime, true)@)

?debuffs.string = "damage"
  var weakenTime
  weakenTime = debuffs.GetTime("damage")

  >`1,16,#008800,∞: @weakenTime@f 
  ^(@time.FormatDigital(weakenTime, true)@)

// show any logged errors
?log.hasErrors()
  >`1,@screen.h - 2 - 5@,#ff0000,errorCount: 
  ^@log.getErrorCount()@\n
  >@log.getError()@

?foe = "cool_bat"
  >f0,6,#magenta,@minibossAtkTime@f

// ............ WITHDRAWAL LOGIC ............ //

?(foe ! "boss" &
^ s.getTotalHP("player") <= s.getFoeDmg()) |
^old_t = item.GetTreasureLimit()
  loc.Leave()

// ............... INIT LOGIC ............... //

// Permapot equipment
?c.permapotSetup
  a.ldtF("permapot")

c.AAC("sword *0", "hatchet")

// Initial equipments
?loc.begin
  a.ldtF("default")

// activate potion when in permapot
:?c.canUsePotion() & c.permapotSetup
  activate potion

// ........... POST-TREASURE LOGIC .......... //

:?loc.stars > 10 & end_t > 1 & isBossScr
  // pickup treasure
  ?pickup.distance < 15
    a.ldtF("magnet")

  // activate potion
  :?c.canUsePotion() & end_t > 27
    activate potion

  // speed up
  :?c.canUseAbility("staff_fire") &
  ^ end_t > 27 & item.potion = "empty"
    c.useAbility_TH("staff_fire", a.stFh)

  : // regen armor
    a.ldtF("defense armor regen")

// .............. SUMMON LOGIC .............. //

:?c.canSummon("voidweaver") &
^ screen.i <= lastFoeScr
  c.useAbility_OH("aether_talisman",
  ^   "aether_talisman", hand       )
:?c.canSummon("cinderwisp") &
^ screen.i > lastFoeScr
  c.useAbility_OH("fire_talisman",
  ^   "fire_talisman", hand       )

// ............. DEFENSIVE LOGIC ............. //

/* TODO: change Ceiling Decorator logic so that
we farm knockbacks with it until we kill it or
we are in the Bolesh's screen. */
// Ceiling Decorator and Bolesh defensive logic
:?(foe = "cool_bat" & minibossAtkTime > 25) |
^ (foe = "phase" & foe.state = 142 &
^  (foe.debuffs.string = "chill:6" & foe.time > 55))
  >c0,0,#ff0000,*** ABOUT TO ATTACK! ***

  // prevent Weaken
  ?c.canUseAbility("staff_vigor")
    c.useAbility_TH("staff_vigor", a.stVh)

  // avoid damage with Eternity Staff
  :?c.canUseAbility("staff_ice") &
  ^ foe = "phase" & s.inRange("hatchet")
    c.useAbility_TH("staff_ice", a.stIh)
  
  : // dodge hit
    fight("evade")
    >c0,1,#yellow,EVADING ATTACK!

// ............. CUTSCENES LOGIC ............ //



// ......... ENGAGING/WALKING LOGIC ......... //

/* speed up (normal) when:
  - speed effect not already present
  - last foe in screen just defeated
  - too far to attack
  - save armor if it's setup run
  - not facing the miniboss */
:?c.canUseAbility("staff_fire") &
^ buffs.string ! "buff_inf_speed" &
^ (loc.stars <= 15 | nRuns > 1) &
^ screen.i < bossScr &
^ !(isBossScr | isMinibossScr |
^   encounter.isElite)
  c.useAbility_TH("staff_fire", a.stFh)

// mini-dash
:?c.canUseAbility("quarterstaff") &
^ ai.walking & ai.enabled & !ai.paused &
// Cannot dash and in dashing range
^!(canDash & a.canSmartDash()) &
^ (c.permapotSetup | screen.i > 0)
  c.useAbility_TH("quarterstaff", a.myQ)

// pickup logic
:?pickup.distance < 15 &
// foe is farther than pickup
^ (foe.distance > 15 | foe.distance = 9999)
  a.ldtF("magnet")

// armor regen logic
:?(ai.walking & !s.inRange("socketed_shield")) |
^ (ai.paused | !ai.enabled |
^  player.direction = -1)
  a.ldtF("defense armor regen")

// engaging logic (out of fighting range)
:?ai.walking & player.direction = 1 &
^ s.inRange("socketed_shield") &
^ ((canDash & !s.inRange("dash_max")) |
^  !s.inRange("crossbow"))
  ?armor > a.CmaE |
  ^(c.canEngage() & foe ! "phase")
    a.ldtF("engage")
  :
    a.ldtF("defense armor regen")

// ............... RANGED LOGIC .............. //



// .............. DASHING LOGIC .............. //

:?a.canSmartDash() & canDash
  a.smartDash()

// Knockback farming
:?c.canKbFarm()
  c.smoothCast(a.bS)

/* if in range, get closer while trying to
unmake with repeating crossbow. */
:?c.canSmoothCast(true) &
^ canDash // & foe ! "boss"
  c.smoothCast(a.bR)

// engaging logic (within fighting range)
:?ai.walking & player.direction = 1 &
^foe ! "phase" & canDash & !a.canSmartDash() &
^s.betweenRange("triskelion", "dash_max")
  a.ldtF("engage")

// get in melee range faster
:?c.canStutterStep()
  c.stutterStep()

// ................ BOSS LOGIC ............... //

:?foe = "phase" // Bolesh
  ?c.canKillCinderwisp(a.cwpMiN, 0) |
  // reached ignition cap
  ^c.isCinderwispCap(a.cwpMiN)
    c.devour("cinderwisp")

  fight("normal")

// ............ SPECIAL FOE LOGIC ........... //

:?foe = "boss" | foe = "monarch"
  ?c.canUseAbility("staff_poison")
    c.useAbility_TH("staff_poison", a.stPh)
  :?c.canUseAbility("bardiche")
    c.useAbility_TH("bardiche", Kubikiribocho)
  :
    fight("normal")

// ................ AOE LOGIC ................ //

:?foe.GetCount(itemSplash) > 1
  // ........... SPECIAL ITEMS LOGIC ........... //
  hardElite = (
  ^(encounter.eliteMod = "berserk"    |
  ^ encounter.eliteMod = "monarch"    |
  ^ foe = "monarch"                   |
  ^ encounter.eliteMod = "blessed"    |
  ^ foe.buffs.string = "buff_tenacious"))

  // Voidweaver - use it if possible
  ?c.canUseAbility("voidweaver") &
  ^c.canUnmakeVoidweaver() &
  ^!isMinibossScr
    c.devour("voidweaver")

  // Calamity - reduce hp
  :?c.canUseAbility("wand_aether") & hardElite
    c.useAbility_OH("wand_aether", a.wAh, hand)

  // Reset buff
  :?c.canUseAbility("wand_vigor") &
  ^ foe.buffs.string = "stoic"
    c.useAbility_OH("wand_vigor", a.wVh, hand)

  // Reduce damage
  :?c.canUseAbility("wand_poison") &
  ^(hardElite | encounter.eliteMod = "hydra")
    c.useAbility_OH("wand_poison", a.wPh, hand)

  // Stun enemies
  :?c.canUseAbility("wand_ice") &
  ^ es.canDebuff("Stun") &
  ^ encounter.eliteMod = "venom"
    c.useAbility_OH("wand_ice", a.wIh, hand)

  /* // FIXME: extend range
  :?c.canUseAbility("staff_aether") &
  ^ s.inRange("dash_min")
    c.useAbility_TH("staff_aether", a.stAh) */

  // Align foes
  :?c.canUseAbility("wand_stone")
    c.useAbility_OH("wand_stone", a.wSh, hand)

  // ........................................ //

  // Heavy hammer logic
  :?c.canUseAbility("heavy_hammer") &
  ^ encounter.eliteMod = "plated"
    c.useAbility_TH("heavy_hammer", Mjölnir)

  // Stun/Perma-stun logic
  :?s.inRange("grappling_hook") &
  ^ foe.buffs.string = "stability" &
  // don't interrupt bardiche
  ^ !c.isCasting("bardiche") &
  ^ (es.canDebuff("Stun") |
    // stun time (frames) running out
  ^  (stunTime = math.Clamp(stunTime, 1, 11) &
     // not stunned with heavy hammer or Frost Wand
  ^   foe.debuffs.string ! "debuff_armor_fatigue" &
  ^   foe.debuffs.string ! "debuff_frost_stun"))
    itemSplash = foe.distance + 5
    a.ldtF("grappling")

  // permapot run
  :?encounter.eliteMod = "blessed" &
  ^ !c.isCasting("bardiche")
    itemSplash = foe.distance + 7

    // Debuff and unmake
    ?tracker.canTrack("Weaken")
      a.ldtF("magic debuff weaken")
    :?tracker.canTrack("Chill")
      a.ldtF("magic debuff chill")
    :?tracker.canTrack("Burn")
      a.ldtF("magic debuff burn")
    :
      itemSplash = 10
      a.ldtF("big sword unmake")

  // berserk potion
  :
    /* ?buffs.string = "ʘ" |
    // split hydras lose the Stable buff
    ^(encounter.eliteMod = "hydra" &
    ^ foe.buffs.string ! "stability") |
    // yellow and below
    ^loc.stars <= 15 |
    // more foes outside range
    ^(foe ! "elite" & screen.i > 1 &
    ^ (foe.count -
    ^ foe.GetCount(itemSplash))
    ^ > 0) */
    itemSplash = 10
    a.ldtF("big sword unmake")
  /*:
    equip Kubikiribocho*/

// ................ 1V1 LOGIC ................ //

:
  fight("normal")

//  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓  //
//  ┃ ▄▀▄▀▄▀▄▀▄▀ END OF "3-Caves" ▄▀▄▀▄▀▄▀▄ ┃  //
//  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  //
