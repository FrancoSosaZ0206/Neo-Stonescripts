//  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓  //
//  ┃ ▄▀▄▀▄▀▄▀ START OF "7-Ridge" ▄▀▄▀▄▀▄▀ ┃  //
//  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  //

// ///////////////// IMPORTS //////////////// //

var log = import My/Lib/Error_Logging/public

var c = import My/Lib/Combat
var s = import My/Lib/Stats
var a = import My/Lib/Arsenal

var es = import My/Lib/Effect_Stats/public
var tracker = import My/Lib/Ranged_Debuffing/public

// //////////////// VARIABLES /////////////// //

// file
var _FILE = "Scripts/7-Ridge"

// flags
var canDash  = true
var hardElite = false
var blowing = (
^foe.state = 133 |  // normal blowing
^foe.state = 143  ) // blowing and putting ice wall

// values
var stunTime = null
var hand     = null

var itemSplash = 17 // bardiche hitbox + splash area

// screens
var minibossScr = null
var isMinibossScr = (loc.stars > 10)
var lastFoeScr = null
var isLastFoeScr = false
var bossScr = null
var isBossScr = false

var bfgInitScr = 1

// TODO: implement
var boss_cutscenes = []

// counters
// number of runs in this session
var nRuns = 1
/* time when permapot was activated,
   -1 means not activated. */
var permapotActTime = -1
// permapot time bandwidth
var permapotTbw = loc.averageTime -
^                 (loc.averageTime / 10)

var old_t = item.GetTreasureCount()
var end_t = 0

// //////////////// FUNCTIONS //////////////// //

func fight(mode)
  ?mode = "escape"
    canDash = false

    ?c.canUseAbility("mind")
      a.ldtF("mind")
    : // c.canUseAbility("staff_stone")
      c.useAbility_TH("staff_stone", a.stSh)

  :?mode = "evade"
    canDash = false

    ?c.canUseAbility("staff_stone") &
    ^ (foe ! "ranged" |
    ^  (foe = "phase" & s.inRange("bardiche")))
      c.useAbility_TH("staff_stone", a.stSh)
    :?c.canUseAbility("mind") &
    ^ (foe ! "ranged" |
    ^  (foe = "phase" & s.inRange("bardiche")))
      a.ldtF("mind")

    :?c.canUseAbility("staff_ice") &
    ^ s.inRange("bardiche")
      c.useAbility_TH("staff_ice", a.stIh)

    :?!s.inRange("sword")
      fight("normal")

    // Unmake
    :?c.canUnmake()
      a.ldtF("defense unmake")
    :
      a.ldtF("defense")

  :?mode = "normal"
    // ........... DEBUFFING LOGIC .......... //

    ?(tracker.canTrack("Weaken") |
    ^ tracker.canTrack("Burn")    ) &
    // AOE / Hrímnir blowing debuffing
    ^((!canDash | blowing |
    ^  (foe = "elite" &
    ^   foe.GetCount(itemSplash) > 1)))
      ?tracker.canTrack("Weaken")
        a.ldtF("magic debuff weaken")
      : // tracker.canTrack("Burn")
        a.ldtF("magic debuff burn")
 
    // 1v1 strong foe weakening
    :?es.canDebuff("Weaken") & canDash &
    ^ (foe = "monarch" | foe = "boss") &
    ^ s.inRange("sword")
      a.ldtF("sword debuff weaken")

    :?es.canMultiDebuff(["Chill"/*,"Burn"*/],"any") &
    ^ canDash & s.inRange("sword") &
    // Permapot 1v1 debuffing
    ^ ((c.permapotSetup & foe = "elite" &
    ^   foe.GetCount(itemSplash) = 1) |
    // 1v1 strong foe debuffing
    ^  (((loc.stars > 15 &
    ^     (foe = "monarch" | foe = "boss") &
    ^     s.getFoeDmg() > 0) |
    ^    nRuns = 1)))
      a.ldtF("sword debuff auto")

    // ............ HEALING LOGIC ........... //
    :?hp ! maxhp & ((canDash &
    ^foe.GetCount(itemSplash) = 1) |
    ^foe = "boss" | foe = "monarch")
      a.ldtF("sword heal")

    // ........... UNMAKING LOGIC ........... //
    :?es.canUnmake()
      ?canDash &
      ^foe.GetCount(itemSplash) = 1
        a.ldtF("sword unmake")
      : // foe.GetCount(itemSplash) > 1
        itemSplash = 10
        a.ldtF("big sword unmake")

    // ........... DAMAGE LOGIC ........... //
    :?foe = "phase" | isBossScr
      ?canDash & !blowing
        ?c.canUseAbility("staff_poison") &
        ^!s.inRange("dash")
          c.useAbility_TH("staff_poison", a.stPh)
        :?c.canUsePotion()
          activate potion
        :
          a.ldtF("sword dmg")
      :
        a.ldtF("magic dmg")

    :?canDash &
    ^ (foe.GetCount(itemSplash) = 1 |
    ^  foe = "monarch" | foe = "boss")
      a.ldtF("sword dmg")
    :
      itemSplash = foe.distance + 7
      a.ldtF("magic dmg")

  : // invalid mode
    log.logError(_FILE,"fight",
    ^   "unknown <mode>: "+mode)

// //////////////// PROCEDURE //////////////// //

// ............... SETUP LOGIC ............... //

?loc.loop
  nRuns++

// set up post-treasure metrics
?old_t ! item.GetTreasureCount()
  // reset metrics
  ?loc.loop | !isBossScr
    old_t = item.GetTreasureCount()
    end_t = 0
  : // track time
    end_t++

// Set up bossScr
?!bossScr
  ?loc.stars <= 5 // white
    bossScr = 6
  :?loc.stars = 6 // cyan 1 star
    bossScr = 5
  :?loc.stars <= 10 // cyan
    bossScr = 4
  :?loc.stars = 11 // yellow 1 star
    bossScr = 8
  :?loc.stars <= 15 // yellow
    bossScr = 7
  :?loc.stars <= 20 // green
    bossScr = 3 + loc.stars - 16
: // set up isBossScr
  isBossScr = (screen.i = bossScr)

// set up isMinibossScr
?!minibossScr & loc.stars > 10
  ?loc.stars = 11
    minibossScr = 6
  :?loc.stars <= 15
    minibossScr = 5
  :?loc.stars <= 20
    minibossScr = 1
:?minibossScr // set up isMinibossScr
  isMinibossScr = (screen.i = minibossScr)

// set up lastFoeScr and bossScr
?!lastFoeScr
  ?loc.stars <= 6 // white and cyan 1*
    lastFoeScr = 4
  :?loc.stars <= 10 // cyan
    lastFoeScr = 3
  :?loc.stars = 11 // yellow 1*
    lastFoeScr = 4
  :?loc.stars <= 15 // yellow
    lastFoeScr = 3
  :?loc.stars <= 20 // green
    lastFoeScr = 1 + loc.stars - 16
: // set up isLastFoeScr and isBossScr
  isLastFoeScr = (screen.i = lastFoeScr)

// Set up blowing
blowing = (isBossScr & (
^foe.state = 133 | // normal blowing
^foe.state = 143)) // blow & summon ice wall

/* set up permapotSetup:
- from yellow onwards,
- in first run, or
- in green, when in boss screen. */
c.permapotSetup = (nRuns = 1 & loc.stars > 10 &
^(loc.stars <= 15 | screen.i > lastFoeScr))

// Record time when permapot was activated
?c.permapotSetup & permapotActTime = -1
  permapotActTime = totaltime

// BFG logic
?loc.stars <= 10 | nRuns > 1
  c.screenMngr_DS("blade",
  ^               bfgInitScr,
  ^               lastFoeScr - 1)

/* // FIXME: DS Mask logic (early miniboss wake up)
?foe = boss & loc.stars > 10 &
^screen.i = minibossScr - 1 & nRuns > 1
  c.screenMngr_DS("mask", 1, 1) */

// set up itemSplash default value
itemSplash = 17 // bardiche's hitbox + splash area

// Set up canDash
?blowing
  canDash = false
:
  canDash = true

// set variables for getFoeDmg
s._berserkerLvl = a.berserkerLvl
s._plagueLvl    = a.plagueLvl
s._maskLvl      = a.maskLvl

// init Combat
c.Init()
// start up Ranged_Debuffing tracker
tracker.track()

// set up stunTime
stunTime = foe.debuffs.GetTime("stun")

// Decide hand for one-handed items
?c.permapotSetup |
^(s.inRange("dash") & canDash & ai.walking)
  hand = "left"
:
  hand = "right"

// Auto brewing
?loc.stars <= 10
  c.potionType = "berserk"
:
  c.potionType = "lucky"
?c.canBrewPotion()
  c.brewPotion()

// track post-treasure time
?old_t ! item.GetTreasureCount()
  end_t++

// ............. MONITOR LOGIC .............. //

// permapot time bandwidth monitor:
?permapotActTime ! -1 & nRuns = 1
  var delay = totaltime + (5 * 30)
  ?totaltime <= delay
    >o-7,6,#magenta,wait until 
    ^@time.FormatDigital(permapotTbw)@

/* // foe distance monitor
?foe.distance ! 9999
  >f0,10,#magenta,dist=@foe.distance@
*/

// monitor post-treasure metrics
var treasureCol = #888888
?end_t > 0 | old_t ! item.GetTreasureCount()
  treasureCol = #aaff00
:
  treasureCol = #888888
>`1,14,@treasureCol@,
^treasure:\n
^  old | @old_t@ (t = @end_t@)
>`1,16,
^  cur | @item.GetTreasureCount()@\n
^  cap | @item.GetTreasureLimit()@

// bfg ds screens monitor
var bfgDsTargetScr = null
bfgDsTargetScr = c.getScreen_DS("blade",
^                               "TARGET")

?bfgDsTargetScr
  var bfgCol = #00ff00

  ?screen.i > bfgDsTargetScr
    bfgCol = #888888
  :?screen.i < bfgDsTargetScr
    bfgCol = #ffff00
  : // screen.i = bfgDsTargetScr
    bfgCol = #00ff00

  >`1,9,@bfgCol@,bfg: @screen.i@/
  ^@bfgDsTargetScr@

// item states monitor:
>`1,10,#magenta,ils: @item.left.state@ | 
^irs: @item.right.state@

var permapotCol
?c.permapotSetup
  permapotCol = #00ff00
:
  permapotCol = #ff0000
>`1,11,@permapotCol@,permapotSetup

// show effect durations
?buffs.string = "ʘ" | buffs.string = "lucky"
  var potTime
  ?buffs.string = "ʘ"
    potTime = buffs.GetTime("ʘ")
  : // buffs.string = "lucky"
    potTime = buffs.GetTime("lucky")

  >`1,12,#0066ff,@c.potionType@: @potTime@f 
  ^(@time.FormatDigital(potTime, true)@)

// monitor player debuffs
?debuffs.string = "chill"
  var chillTime
  chillTime = debuffs.GetTime("chill")

  >`1,13,#008800,❄: @chillTime@f 
  ^(@time.FormatDigital(chillTime, true)@)

// show any logged errors
?log.hasErrors()
  >`1,@screen.h - 2 - 5@,#ff0000,errorCount: 
  ^@log.getErrorCount()@\n
  >@log.getError()@

// ............ WITHDRAWAL LOGIC ............ //

?(foe ! "boss" &
^ s.getTotalHP("player") <= s.getFoeDmg()) |
^old_t = item.GetTreasureLimit()
  loc.Leave()

// ............... INIT LOGIC ............... //

// Permapot equipment
?c.permapotSetup
  a.ldtF("permapot")

c.AAC("sword *0", "hatchet")

// Initial equipments
?loc.begin
  a.ldtF("default")

// activate potion when in permapot
:?c.canUsePotion() & c.permapotSetup
  activate potion

// ........... POST-TREASURE LOGIC .......... //

:?loc.stars > 10 & end_t > 1 & isBossScr
  // pickup treasure
  ?pickup.distance < 15
    a.ldtF("magnet")

  // activate potion
  :?c.canUsePotion() & end_t > 27
    activate potion

  // speed up
  :?c.canUseAbility("staff_fire") &
  ^ item.potion = "empty" & end_t > 27
    c.useAbility_TH("staff_fire", a.stFh)

  : // regen armor
    a.ldtF("defense armor regen")

// .............. SUMMON LOGIC .............. //

// Summons
:?c.canSummon("voidweaver") &
^ screen.i <= lastFoeScr
  c.useAbility_OH("aether_talisman",
  ^   "aether_talisman", hand       )
:?c.canSummon("cinderwisp") &
^ screen.i > lastFoeScr
  c.useAbility_OH("fire_talisman",
  ^   "fire_talisman", hand       )

// ............. DEFENSIVE LOGIC ............ //

// about to blow air and apply chill
:?foe = "phase" & foe.state = 132 &
^((foe.debuffs.string = "chill:6" & foe.time > 65) |
^ (foe.debuffs.string ! "chill" & foe.time > 27))
  ?c.canUseAbility("staff_vigor") // try to prevent the debuff
    c.useAbility_TH("staff_vigor", a.stVh)
  :?c.canUseAbility("wand_ice")
    c.useAbility_OH("wand_ice", a.wIh, hand)
  :
    fight("normal")

:?(isBossScr & foe = "phase" & blowing) |
^ foe.name = "Ice Wall"
  ?canDash
    canDash = false

  fight("normal")

// ............ CUTSCENES LOGIC ............. //

/* boss special -- get extra damage while idle
with bardiche */
:?foe = "phase" & foe.state = 1
  ?c.canUseAbility("bardiche") & !c.permapotSetup
    c.useAbility_TH("bardiche", Kubikiribocho)
  :?c.canUseAbility("mask")
    c.useAbility_OH("mask", "mask", "r")
  :
    a.ldtF("defense armor regen")

// ........... ENGAGE/WALKING LOGIC .......... //

/* speed up (normal) when:
  - speed effect not already present
  - screen past last one with foes.
  - not facing the boss, miniboss or
    an elite encounter. */
:?c.canUseAbility("staff_fire") &
^ buffs.string ! "buff_inf_speed" & ((
^!(c.permapotSetup | nRuns = 1) &
^ screen.i = lastFoeScr + 1) | screen.i = 0)
  c.useAbility_TH("staff_fire", a.stFh)

// mini-dash
:?c.canUseAbility("quarterstaff") &
^ ai.walking & ai.enabled & !ai.paused &
// Cannot dash and in dashing range
^!(canDash & a.canSmartDash()) &
^!blowing &
^ (c.permapotSetup | screen.i > 0)
  c.useAbility_TH("quarterstaff", a.myQ)

// pickup logic
:?pickup.distance < 15 &
// foe is farther than pickup
^ (foe.distance > 15 | foe.distance = 9999)
  a.ldtF("magnet")

// armor regen logic
:?(ai.walking & !s.inRange("socketed_shield")) |
^ (ai.paused | !ai.enabled |
^  player.direction = -1)
  a.ldtF("defense armor regen")

// engaging logic (out of fighting range)
:?ai.walking & player.direction = 1 &
^ s.inRange("socketed_shield") &
^ ((canDash & !s.inRange("dash_max")) |
^  !s.inRange("crossbow"))
  ?armor > a.CmaE |
  ^(c.canEngage() & foe ! "phase")
    a.ldtF("engage")
  :
    a.ldtF("defense armor regen")

// ............... RANGED LOGIC ............. //



// .............. DASHING LOGIC ............. //

// Calamity - reduce hp
:?c.canUseAbility("wand_aether") &
^(encounter.eliteMod = "berserk" |
^ foe = "monarch" | encounter.eliteMod = "monarch" |
^ encounter.eliteMod = "blessed" |
^ foe.buffs.string = "buff_tenacious")
  c.useAbility_OH("wand_aether", a.wAh, hand)

// Reset buff
:?c.canUseAbility("wand_vigor") &
^foe.buffs.string = "stoic"
  c.useAbility_OH("wand_vigor", a.wVh, hand)

// Reduce damage
:?c.canUseAbility("wand_poison") &
^(encounter.eliteMod = "berserk" |
^ foe = "monarch" | encounter.eliteMod = "monarch" |
^ encounter.eliteMod = "blessed" |
^ encounter.eliteMod = "hydra" |
^ foe.buffs.string = "buff_tenacious") &
^s.inRange("dash_min")
  c.useAbility_OH("wand_poison", a.wPh, hand)

// Stun enemies
:?c.canUseAbility("wand_ice") &
^c.canApplyStun() & foe = "elite" &
^foe.count > 1 &
^s.getTotalHP("player") < c.hihp
  c.useAbility_OH("wand_ice", a.wIh, hand)

:?a.canSmartDash() & canDash
  a.smartDash()

// Knockback farming
:?c.canKbFarm()
  c.smoothCast(a.bS)

/* if in range, get closer while trying to
unmake with repeating crossbow. */
:?canDash & s.betweenRange("dash_min","crossbow") &
^!c.canSmoothCast(true)
  c.smoothCast(a.bR)

// get in melee range faster
:?c.canStutterStep()
  c.stutterStep()

// ........... SPECIAL ITEMS LOGIC .......... //

// Voidweaver - use it if possible
:?c.canUseAbility("voidweaver") &
^c.canUnmakeVoidweaver() &
^foe.count > 1 & screen.i > 1
  c.devour("voidweaver")

// ............... AOE LOGIC ................ //

:?foe.GetCount(foe.distance + margin) > 1 &
^foe ! "boss"
  // Align foes
  ?c.canUseAbility("wand_stone")
    c.useAbility_OH("wand_stone", a.wSh, hand)

  /* Activate Berserk Staff early (in case there's
  barely enough armor, to not lose it to the
  Infernal Staff's Burn debuff). */
  :?screen.i = 1 & c.canUseAbility("staff_poison")
    c.useAbility_TH("staff_poison", a.stPh)

  :?c.canUseAbility("heavy_hammer") & foe = "elite"
    ?encounter.eliteMod = "plated"
      c.useAbility_TH("heavy_hammer", "Guardian's Bane")
    :
      c.useAbility_TH("heavy_hammer", Mjölnir)

  // Stun/Perma-stun logic
  :?s.inRange("grappling_hook") &
  // don't interrupt bardiche
  ^!c.isCasting("bardiche") &
  ^(c.canApplyStun() |
    // stun time (frames) running out
  ^ (stunTime = math.Clamp(stunTime, 1, 11) &
     // not stunned with heavy hammer or Frost Wand
  ^  foe.debuffs.string ! "debuff_armor_fatigue" &
  ^  foe.debuffs.string ! "debuff_frost_stun"))
    a.ldtF("grappling")

  // permapot run
  :?nRuns = 1 |
  // split hydra foes
  ^(encounter.eliteMod = "hydra" &
  ^ foe.buffs.string ! "stability")
    // change margin as needed
    margin = 8 // big sword left hitbox + splash range

    a.ldtF("big sword unmake")
  // Debuff and unmake
  :?encounter.eliteMod = "blessed" & !c.isCasting("bardiche")
    ?a.canSmartDebuff("magic")
      a.smartDebuff("magic")
    :
      // change margin as needed
      margin = 8 // big sword left hitbox + splash range

      a.ldtF("big sword unmake")

  :?buffs.string = "ʘ" // berserk potion
    a.ldtF("big sword unmake")
  :
    equip Kubikiribocho

// ............... BOSS LOGIC ............... //

:?foe = "phase" // Boss fight (Hrímnir)
  ?c.canKillCinderwisp(a.cinderwispDmg_Default, 0) |
  ^c.isCinderwispCap(a.maxIgnitions_Boosted) // reached ignition cap
    c.devour("cinderwisp")

  // states 0 and 1 are when he has the ice shield
  ?foe.state > 1
    ?c.canUsePotion()
      activate potion
    :?c.canUseAbility("staff_poison") & !s.inRange("dash")
      c.useAbility_TH("staff_poison", a.stPh)
    :
      fight("normal")
  : // normal melee combat logic
    fight("normal")

// ................ 1V1 LOGIC ............... //

// Tanky foe, use bardiche ability to lower its hitpoints
:?(foe = "boss" | foe = "monarch") &
^(c.canUseAbility("staff_poison") |
^c.canUseAbility("bardiche"))
  ?c.canUseAbility("staff_poison")
    c.useAbility_TH("staff_poison", a.stPh)
  : // c.canuseAbility("bardiche")
    c.useAbility_TH("bardiche", Kubikiribocho)
:
  fight("normal")

//  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓  //
//  ┃ ▄▀▄▀▄▀▄▀▄▀ END OF "7-Ridge" ▀▄▀▄▀▄▀▄▀ ┃  //
//  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  //