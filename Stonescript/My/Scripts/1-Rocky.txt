//  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓  //
//  ┃ ▄▀▄▀▄▀▄▀ START OF "1-Rocky" ▄▀▄▀▄▀▄▀ ┃  //
//  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  //

// //////////////// IMPORTS ///////////////// //

var log = import My/Lib/Error_Logging/public

var uimkr = import My/Lib/UI_Maker
var u     = import My/Lib/Utilities
var c     = import My/Lib/Combat
var s     = import My/Lib/Stats
var a     = import My/Lib/Arsenal

var es = import My/Lib/Effect_Stats/public
var tracker = import My/Lib/Ranged_Debuffing/public

// /////////////// VARIABLES //////////////// //

// file
var _FILE = "Scripts/1-Rocky"

// ui-related logic for harvesting
var yesButton     = null
var noButton      = null
var choice        = false
var buttonPressed = false
var dontShowAgain = false

// flags
var canDash  = true

// values
var stunTime = null
var hand     = null

var itemSplash = 17 // bardiche hitbox + splash area

var boss_screen = null
var boss_cutscenes = [
^ 100, 101, 102, // getting soul stones pre-phase1
^ 117, 118, // finishing phase1 cutscene
^ 124, 125, // phase1 to 2
^ 107, 108, // phase2 to 3
^ 116] // phase3 death cutscene state

var phase3dmg = foe.damage

// counters
var nRuns = 1 // number of runs in this session
var permapotActTime = -1 // time when permapot was activated, -1 means not activated
var permapotTbw = loc.averageTime - (loc.averageTime / 10) // permapot time bandwidth

var old_t = item.GetTreasureCount()
var end_t = 0

// /////////////// FUNCTIONS //////////////// //

func harvestFunc(button)
  buttonPressed = true
  ?button = yesButton
    choice = true
  : // button = noButton
    choice = false

func fight(mode)
  ?mode = "escape"
    canDash = false

    ?c.canUseAbility("mind")
      a.ldtF("mind")
    : // c.canUseAbility("staff_stone")
      c.useAbility_TH("staff_stone", a.stSh)

  :?mode = "evade"
    canDash = false

    ?c.canUseAbility("staff_stone") &
    ^(foe ! "ranged" |
    ^(foe = "phase" & foe.distance < s.getRange("dash_min")))
      c.useAbility_TH("staff_stone", a.stSh)
    :?c.canUseAbility("mind") &
    ^(foe ! "ranged" |
    ^(foe = "phase" & foe.distance < s.getRange("dash_min")))
      a.ldtF("mind")

    :?c.canUseAbility("staff_ice") & foe.distance < s.getRange("dash_min")
      c.useAbility_TH("staff_ice", a.stIh)

    :?foe.distance > s.getRange("sword") + 1
      ?foe.count > 1
        fight("normal")
      :
        fight("normal")

    // Unmake
    :?c.canUnmake()
      a.ldtF("defense unmake")
    :
      a.ldtF("defense")
  :?mode = "normal"
    // ........... DEBUFFING LOGIC .......... //

    // AOE debuffing
    ?a.canSmartDebuff("magic") &
    ^(!canDash |
    ^(foe = "elite" &
    ^foe.GetCount(itemSplash) > 1))
      itemSplash = foe.distance + 7
      a.smartDebuff("magic")

    // Permapot 1v1 debuffing
    :?c.canApplyAny() & canDash &
    ^c.permapotSetup & foe = "elite" &
    ^foe.GetCount(itemSplash) = 1
      a.ldtF("sword debuff auto")

    // 1v1 strong foe weakening
    :?c.canApplyWeaken() & canDash &
    ^(foe = "monarch" | foe = "boss")
      a.ldtF("sword debuff weaken")

    // 1v1 strong foe debuffing
    :?(c.canApplyChill(6) | c.canApplyBurn()) &
    ^canDash &
    ^((loc.stars > 15 &
    ^(foe = "monarch" | foe = "boss") &
    ^s.getFoeDmg(a.berserkerLvl, a.plagueLvl, a.maskLvl) > 0) |
    ^nRuns = 1)
      a.ldtF("sword debuff auto")

    // ............ HEALING LOGIC ........... //
    :?hp ! maxhp &
    ^((canDash &
    ^  foe.GetCount(itemSplash) = 1) |
    ^ foe = "monarch")
      a.ldtF("sword heal")

    // ........... UNMAKING LOGIC ........... //
    :?c.canUnmake()
      ?canDash &
      ^foe.GetCount(itemSplash) = 1
        a.ldtF("sword unmake")
      : // foe.GetCount(itemSplash) > 1
        itemSplash = 10
        a.ldtF("big sword unmake")

    // ........... DAMAGE LOGIC ........... //
    :?canDash &
    ^(foe.GetCount(itemSplash) = 1 |
    ^foe = "monarch" | foe = "boss")
      ?c.canUseAbility("staff_poison") &
      ^!s.inRange("dash") & foe = "phase3"
        c.useAbility_TH("staff_poison", a.stPh)
      :?c.canUsePotion() & foe = "phase3"
        activate potion
      /*:?c.canBurst() & !c.permapotSetup & foe = "phase3"
        c.burst(a.burstSwords)*/
      :
        a.ldtF("sword dmg")
    :
      itemSplash = foe.distance + 7
      a.ldtF("magic dmg")
  : // invalid mode
    u.showStrCtr(0,30,#red,"ERROR\nFILE: 1-Rocky\nFUNCTION: fight\nCAUSE: unknown <mode>:\n\n" + mode, false)

// /////////////// PROCEDURE //////////////// //

// ............. MONITOR LOGIC .............. //

?permapotActTime ! -1 & nRuns = 1
  var delay = totaltime + (5 * 30)
  ?totaltime <= delay
    >o-7,6,#magenta,wait until @time.FormatDigital(permapotTbw)@

/* itemSplash display test

var playerX = screen.FromWorldX(pos.x)
playerX = screen.FromWorldX(pos.x)

var playerY = screen.FromWorldZ(pos.z - pos.y)
playerY = screen.FromWorldZ(pos.z - pos.y)

>`@playerX@,@playerY + 2@,itemSplash
draw.Bg(playerX, playerY + 2, #aa4400, itemSplash, 1)

?foe.distance ! 9999
  >`@playerX@,@playerY + 3@,dist\n
  ^dist + itemSplash
  draw.Bg(playerX, playerY + 3, #0000ff, foe.distance, 1)
  draw.Bg(playerX, playerY + 4, #aa00aa, foe.distance + itemSplash, 1)

?foe.count
  >`@playerX@,@playerY + 5@,count range
  draw.Bg(playerX, playerY + 5, #00aaaa, 46, 1)

  >`@playerX + itemSplash@,@playerY + 2@,out of range
  draw.Bg(playerX + itemSplash, playerY + 2, #008800, 46 - itemSplash, 1) */

// ............ WITHDRAWAL LOGIC ............ //

?s.getTotalHP("player")
^ <=
^s.getFoeDmg(a.berserkerLvl,
^            a.plagueLvl,
^            a.maskLvl      ) |
^nRuns >= 25
  loc.Leave()

// .............. SETUP LOGIC ............... //

// Auto-harvesting logic
?!buttonPressed
  u.showStrCtr(6,30,#yellow,"Dig boulders?",false)

  ?!yesButton
    yesButton = uimkr.mkButton(
    ^-5,9,null,2,null,null, // x, y, w, h, anchor, dock,
    ^"Yes","#green", // txt, col,
    ^null,null,null, // tcol, bcol, hcol,
    ^-5,harvestFunc, // style, pressed,
    ^null,null,null) // down, up, sound

  ?!noButton
    noButton = uimkr.mkButton(
    ^5,9,8,2,null,null, // x, y, w, h, anchor, dock,
    ^"No","red", // txt, col,
    ^null,null,null, // tcol, bcol, hcol,
    ^-5,harvestFunc, // style, pressed,
    ^null,null,null) // down, up, sound
:
  ?yesButton
    yesButton.Recycle()
    yesButton = null
  ?noButton
    noButton.Recycle()
    noButton = null

  ?!dontShowAgain
    var aux = totaltime + 3*u.sec
    ?totaltime < aux
      ?choice
        u.showStrCtr(6, 30,#green,
        ^"Dig boulders: enabled",false)
      :
        u.showStrCtr(6, 30,#red,
        ^"Dig boulders: disabled",false)
    :
      ?!dontShowAgain
        dontShowAgain = true

?loc.loop
  nRuns++

  old_t = item.GetTreasureCount()
  end_t = 0

// Set up boss_screen
?!boss_screen
  ?loc.stars <= 10 // cyan and white
    boss_screen = 2
  :?loc.stars <= 15 // yellow
    boss_screen = 4
  :?loc.stars <= 20 // green
    boss_screen = 3 + (loc.stars - 16)

?nRuns = 1 & loc.stars > 15 & boss_screen
  c.permapotSetup = c.permapotSetup & (screen.i >= boss_screen - 1)

// Record time when permapot was activated
?c.permapotSetup & permapotActTime = -1
  permapotActTime = totaltime

// increase permapot bandwidth if player chooses to dig boulders
?choice
  permapotTbw = loc.averageTime + (30 * 75)

/* // BFG logic
?nRuns > 1 & loc.stars > 15
  c.screenMngr_DS("blade", 2, boss_screen - 3)
*/

/* // DS Mask logic (early scout wake up)
?loc.stars = math.Clamp(loc.stars, 11, 15) & !c.permapotSetup
  c.screenMngr_DS("mask", 1, 1)
*/

// set up itemSplash default value
itemSplash = 17 // bardiche's hitbox + itemSplash area
// Set canDash default value
canDash = true
// Set phase3dmg
?foe = "phase3" // only update when needed
  phase3dmg = s.getFoeDmg(a.berserkerLvl, a.plagueLvl, a.maskLvl)

c.potionType = "lucky"
c.Init()
a.smartDebuff_Mgr()

stunTime = s.getEffectStat("foe","debuff","stun","time") // frames
?!stunTime
  stunTime = -1

// Decide hand for one-handed items
?c.permapotSetup | s.inRange("dash")
  hand = "left"
:
  hand = "right"

// Auto brewing
?c.canBrewPotion()
  c.brewPotion()

// track time after picking treasure up
?old_t ! item.GetTreasureCount()
  end_t++

// ................................... //

// Permapot equipment
?c.permapotSetup
  a.ldtF("permapot")

c.AAC("sword *0", "hatchet")

// Initial equipments
?loc.begin
  a.ldtF("default")

/* activate potion after picking up treasure
or while setting up permapot. */
:?c.canUsePotion() & loc.stars > 10 &
^(c.permapotSetup |
^ (end_t > 10 & screen.i = boss_screen &
^  !c.canUseAbility("staff_fire")))
  activate potion

// Summons
:?c.canSummon("voidweaver") &
^loc.stars > 15 &
^(screen.i = 0 |
^screen.i = math.Clamp(screen.i, 2, boss_screen - 2)) // not a cutscene
  c.useAbility_OH("aether_talisman", "aether_talisman", hand)
:?c.canSummon("cinderwisp") &
^(loc.stars <= 15 | screen.i >= boss_screen - 1)
  c.useAbility_OH("fire_talisman", "fire_talisman", hand)

// ............. DEFENSIVE LOGIC ............ //

/* // interrupt attacks with shovel
:?foe = "boss" & foe.state = 32 &
^c.canUseAbility("shovel")
  equip shovel
  ?s.inRange("shovel")
    c.useAbility_TH("shovel", "shovel")
  >h0,0,#red,SHOVEL ABILITY*/

// phase2 about to attack
:?foe = "phase2" & foe.state = 32 &
^  ((foe.debuffs.string = "chill:6" & foe.time > 97) |
^   (foe.debuffs.string ! "chill" & foe.time > 55))
  // gain Empower to deal extra damage
  ?foe = "vigor"
    a.ldtF("defense buff empower")
  // heal if needed
  :?foe = "aether" & hp ! maxhp
    a.ldtF("defense heal")
  // unmake Dysangelos's fire arm
  :?foe = "fire"
    a.ldtF("defense unmake")
  // apply burn with af shield
  :?foe = "ice" & c.canApplyBurn()
    a.ldtF("defense debuff burn")
  :
    fight("normal")

// Dysangelos's massive beam or putting shield up
:?foe = "phase3" &
^((foe.state = 115 & foe.time > 70) |
^ (foe.damage = 1 &
^  ((foe.state = 32 & foe.time > 60) |
^   (foe.state = 33 & foe.time < 5))))
  // prevent the stun
  ?foe.damage = 1 & c.canUseAbility("staff_vigor")
    c.useAbility_TH("staff_vigor", a.stVh)
  : // evade attack
    fight("evade")

// Acronian Scout's wind and critical attack
:?foe = "scout" & foe.damage >= 8 & foe.state = 32
  canDash = false
  fight("normal") // fight ranged to avoid hit
  >f0,0,#red,WIND CRIT, FIGHT RANGED

// Normal attacks
:?foe.state = 32 & (
^(foe = "scout" &
^!(foe.debuffs.string = "stun" | c.isCasting("bardiche")) &
^  ((foe.debuffs.string = "chill:6" & foe.time > 50) |
^   (foe.debuffs.string ! "chill" & foe.time > 10))) |
^((foe = "phase1" &
^  ((foe.debuffs.string = "chill:6" & foe.time > 60) |
^   (foe.debuffs.string ! "chill" & foe.time > 20))) |
^ (foe = "phase3" & foe.damage > 1 &
^   ((foe.debuffs.string = "chill:6" & foe.time > 85) |
^    (foe.debuffs.string ! "chill" & foe.time > 45  )))) |
^(foe = "soldier" &
^ foe.debuffs.string ! "stun" &
^ s.inRange("dash_min") &
^   ((foe.debuffs.string = "chill:6" & foe.time > 50) |
^    (foe.debuffs.string ! "chill" & foe.time > 10))
^))
  // heal faster
  ?foe = "phase1" & hp ! maxhp
    a.ldtF("defense heal")
  // reduce damage amap
  :?foe = "phase3" & phase3dmg > 0 &
  ^c.canUseAbility("mask")
    c.useAbility_OH("mask", "mask", "r")

  :?c.permapotSetup
    ?hp ! maxhp |
    ^s.getFoeDmg(a.berserkerLvl,
    ^            a.plagueLvl,
    ^            a.maskLvl      ) > armor
      a.ldtF("defense heal")
    :
      a.ldtF("defense")

  // get additional damage
  :?buffs.string ! "buff_damage"
    a.ldtF("defense buff empower")
  :?c.canUnmake()
    a.ldtF("defense unmake")
  // af deals more DoT than dF
  :?c.canApplyBurn()
    a.ldtF("defense debuff burn")
  : // all effects applied
    a.ldtF("defense")

// ............ CUTSCENES LOGIC ............. //

// Dysangelos pre-phase1 cutscene damage strat
:?!c.permapotSetup & screen.i = boss_screen &
^(([100, 101, 102].Contains(foe.state) &
^  item.GetCooldown("heavy_hammer") <= 0) &
^  s.inRange("heavy_hammer ability") |
^ c.isCasting("heavy_hammer"))
  ?item.GetCooldown("quarterstaff") <= 0 &
  ^!c.isCasting("heavy_hammer")
    c.useAbility_TH("quarterstaff", a.myQ)
  : // ?c.canUseAbility("heavy_hammer")
    c.useAbility_TH("heavy_hammer", Mjölnir)

// Dysangelos post-phase1 cutscene damage strat
:?!c.permapotSetup & screen.i = boss_screen & 
^(([118, 108].Contains(foe.state) &
^  item.GetCooldown("bardiche") <= 0) |
^ c.isCasting("bardiche"))
  // mini-dash to get closer
  ?item.GetCooldown("quarterstaff") <= 0 &
  ^!c.isCasting("bardiche")
    c.useAbility_TH("quarterstaff", a.myQ)
  // dash
  :?a.canSmartDash() & !c.isCasting("bardiche")
    a.smartDash()
  /* Use Berserk Staff to increment Bardiche ability and sword damage
  (only pre-phase1, in phase3 it's activated under different conditions) */
  :?item.GetCooldown("staff_poison") <= 0 &
  ^foe = "phase1" & loc.stars > 15
    c.useAbility_TH("staff_poison", a.stPh)
  : // c.canUseAbility("bardiche")
    c.useAbility_TH("bardiche", Kubikiribocho)

// ......... ENGAGING/WALKING LOGIC ......... //

// speed up (post-treasure)
:?c.canUseAbility("staff_fire") &
^ end_t > 10 & screen.i = boss_screen &
^ loc.stars > 10
  c.useAbility_TH("staff_fire", a.stFh)

// speed up (normal)
:?c.canUseAbility("staff_fire") &
^screen.i < boss_screen &
// already has the speed effect
^buffs.string ! "buff_inf_speed" &
// 1 foe just defeated
^((foe.count = 1 & foe.state = 4) |
// too far to attack
^ (!s.inRange("crossbow"))) &
// save armor if it's setup run
^!(loc.stars > 15 &
^  (nRuns = 1 |
// Don't use it when facing the scout
^   (nRuns > 1 & screen.i = 1)))
  c.useAbility_TH("staff_fire", a.stFh)

// Harvesting logic
:?harvest.distance < 15 &
^choice & nRuns > 1
  ?c.canUseAbility("shovel")
    c.useAbility_TH("shovel", "shovel")
  :
    a.ldtF("harvest")

// mini-dash
:?c.canUseAbility("quarterstaff") &
^ai.walking & ai.enabled & !ai.paused &
// Cannot dash and in dashing range
^!(canDash & a.canSmartDash()) &
^(c.permapotSetup |
^ (!c.permapotSetup & screen.i > 0))
  c.useAbility_TH("quarterstaff", a.myQ)

// Pickup logic
:?pickup.distance < 15 &
// foe is farther than pickup
^(foe.distance > 15 |
^ foe.distance = 9999 |
// pickup is a treasure
^ pickup = "treasure")
  a.ldtF("magnet")

// regen armor (after picking chest up)
:?(loc.stars <= 10 & old_t ! item.GetTreasureCount()) |
^(end_t > 1 &
^!(c.canUsePotion() | c.canUseAbility("staff_fire")))
  a.ldtF("defense armor regen")

// engaging logic
:?ai.walking & player.direction = 1 &
^!s.inRange("crossbow")
  ?armor > a.compoundMaxArmor_boosted |
  ^c.canEngage() & foe ! "phase"
    a.ldtF("engage")
  :
    a.ldtF("defense armor regen")

// armor regen logic
:?ai.paused | !ai.enabled | player.direction = -1
  /*?!c.canBurst() & !c.permapotSetup
    c.burst(a.burstSwords)
  :*/
  a.ldtF("defense armor regen")

// .............. DASHING LOGIC ............. //

// Calamity - reduce hp
:?c.canUseAbility("wand_aether") & s.inRange("wand") &
^(encounter.eliteMod = "berserk" |
^ foe = "monarch" | encounter.eliteMod = "monarch" |
^ encounter.eliteMod = "blessed" |
^ foe.buffs.string = "buff_tenacious")
  c.useAbility_OH("wand_aether", a.wAh, hand)

// Reset buff
:?c.canUseAbility("wand_vigor") & s.inRange("wand") &
^foe.buffs.string = "stoic"
  c.useAbility_OH("wand_vigor", a.wVh, hand)

// Reduce damage
:?c.canUseAbility("wand_poison") & s.inRange("wand") &
^(encounter.eliteMod = "berserk" |
^ foe = "monarch" | encounter.eliteMod = "monarch" |
^ encounter.eliteMod = "blessed" |
^ encounter.eliteMod = "hydra" |
^ foe.buffs.string = "buff_tenacious") &
^s.inRange("dash_min")
  c.useAbility_OH("wand_poison", a.wPh, hand)

// Stun enemies
:?c.canUseAbility("wand_ice") & s.inRange("wand") &
^c.canApplyStun() & foe = "elite" &
^foe.count > 1 &
^s.getTotalHP("player") < c.hihp
  c.useAbility_OH("wand_ice", a.wIh, hand)

:?a.canSmartDash() & canDash
  a.smartDash()

// Knockback farming
:?c.canKbFarm()
  c.smoothCast(a.bS)

/* if in range, get closer while trying to
unmake with repeating crossbow. */
:?canDash & s.betweenRange("triskelion","crossbow") &
^c.canSmoothCast(true)
  c.smoothCast(a.bR)

// get in melee range faster
:?c.canStutterStep()
  c.stutterStep()

// ........... SPECIAL ITEMS LOGIC .......... //

// Voidweaver - use it if possible
:?c.canUseAbility("voidweaver") &
^c.canUnmakeVoidweaver() &
^foe.count > 1 & screen.i > 1 &
^s.inRange("dash_min")
  c.devour("voidweaver")

// ............... AOE LOGIC ................ //

:?foe.GetCount(itemSplash) > 1 &
^!(foe = "boss" | foe = "monarch")
  // Align foes
  ?c.canUseAbility("wand_stone") & s.inRange("wand")
    c.useAbility_OH("wand_stone", a.wSh, hand)

  /* Activate Berserk Staff early (in case there's
  barely enough armor, to not lose it to the
  Infernal Staff's Burn debuff) for the Scout. */
  :?screen.i = 1 & c.canUseAbility("staff_poison")
    c.useAbility_TH("staff_poison", a.stPh)

  // Heavy hammer logic
  :?c.canUseAbility("heavy_hammer") &
  ^encounter.eliteMod = "plated"
    c.useAbility_TH("heavy_hammer", "Guardian's Bane")
  /* :?c.canUseAbility("heavy_hammer") & foe = "elite"
    c.useAbility_TH("heavy_hammer", Mjölnir) */

  // Stun/Perma-stun logic
  :?s.inRange("grappling_hook") &
  // don't interrupt bardiche
  ^!c.isCasting("bardiche") &
  ^foe ! "warcaster" &
  ^(c.canApplyStun() |
    // stun time (frames) running out
  ^ (stunTime = math.Clamp(stunTime, 1, 11) &
     // not stunned with heavy hammer or Frost Wand
  ^  foe.debuffs.string ! "debuff_armor_fatigue" &
  ^  foe.debuffs.string ! "debuff_frost_stun"))
    itemSplash = foe.distance + 5
    a.ldtF("grappling")

  // permapot run
  :?nRuns = 1 |
  ^ (encounter.eliteMod = "blessed" &
  ^  !c.isCasting("bardiche"))
    // Debuff and unmake
    ?a.canSmartDebuff("magic")
      itemSplash = foe.distance + 7
      a.smartDebuff("magic")
    :
      itemSplash = 10
      a.ldtF("big sword unmake")

  // berserk potion
  :?buffs.string = "ʘ" |
  // split hydras lose the Stable buff
  ^(encounter.eliteMod = "hydra" &
  ^ foe.buffs.string ! "stability") /* |
  // more foes outside range
  ^(foe ! "elite" & screen.i > 1 &
  ^ (foe.count -
  ^ foe.GetCount(itemSplash))
  ^ > 0) */
    itemSplash = 10
    a.ldtF("big sword unmake")
  :
    equip Kubikiribocho

// ............... BOSS LOGIC ............... //

:?foe = "phase" // Dysangelos fight logic
  ?c.canKillCinderwisp(a.cinderwispDmg_Default, 0) |
  ^c.isCinderwispCap(a.maxIgnitions_Default) // reached ignition cap
    c.devour("cinderwisp")

  ?foe ! "phase3"
    ?foe.buffs.string = "buff_protection" & // against debuffs
    ^c.canUseAbility("wand_vigor")
      c.useAbility_OH("wand_vigor", a.wVh, hand)
    :
      fight("normal")

  // foe = phase3
  :?c.canUseAbility("heavy_hammer") & foe.armor > 0 & // reduce armor
  ^!c.permapotSetup & s.inRange("dash_min")
    c.useAbility_TH("heavy_hammer", "Guardian's Bane")

  // Buy time
  :?c.permapotSetup &
  ^(totaltime - permapotActTime < permapotTbw)
    // Debuff
    ?c.canApplyWeaken()
      a.ldtF("sword debuff weaken")
    :?c.canApplyChill(6)
      a.ldtF("sword debuff chill")
    :?c.canApplyBurn()
      a.ldtF("sword debuff burn")

    // Heal
    :?hp ! maxhp
      a.ldtF("sword heal")

    : // wait
      equipL Unbroken Faith
  :
    fight("normal")

// ................ 1V1 LOGIC ............... //

// Tanky foe, use bardiche ability to lower its hitpoints
:?loc.stars > 15 &
^(foe = "boss" | foe = "monarch") &
^(c.canUseAbility("staff_poison") |
^c.canUseAbility("bardiche"))
  ?c.canUseAbility("staff_poison")
    c.useAbility_TH("staff_poison", a.stPh)
  : // c.canUseAbility("bardiche")
    c.useAbility_TH("bardiche", Kubikiribocho)
:
  fight("normal")

//  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓  //
//  ┃ ▄▀▄▀▄▀▄▀▄ END OF "1-Rocky" ▀▄▀▄▀▄▀▄▀ ┃  //
//  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  //