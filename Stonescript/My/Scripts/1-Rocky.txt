// ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓ //
// ┃ ▀▄▀▄▀▄▀▄▀ START OF "1-Rocky" ▄▀▄▀▄▀▄▀▄ ┃ //
// ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛ //

// //////////////// IMPORTS ///////////////// //

var log = import My/Lib/Error_Logging/public

var uimkr = import My/Lib/UI_Maker
var u     = import My/Lib/Utilities
var c     = import My/Lib/Combat
var s     = import My/Lib/Stats
var a     = import My/Lib/Arsenal

var es = import My/Lib/Effect_Stats/public
var tracker = import My/Lib/Ranged_Debuffing/public

// /////////////// VARIABLES //////////////// //

// file
var _FILE = "Scripts/1-Rocky"

// ui-related logic for harvesting
var yesButton     = null
var noButton      = null
var choice        = false
var buttonPressed = false
var dontShowAgain = false

// flags
var canDash   = true
var hardElite = false

// values
var stunTime = null
var hand     = null

var itemSplash = 17 // bardiche hitbox + splash area

var boss_cutscenes = [
^ 100, 101, 102, // getting soul stones pre-phase1
^ 117, 118, // finishing phase1 cutscene
^ 124, 125, // phase1 to 2
^ 107, 108, // phase2 to 3
^ 116] // phase3 death cutscene state

var phase3dmg = foe.damage

// screens
var minibossScr = null
var isMinibossScr = (loc.stars > 10)
var lastFoeScr = null
var isLastFoeScr = (loc.stars > 15)
var bossScr = null
var isBossScr = false

// counters
// number of runs in this session
var nRuns = 1
/* time when permapot was activated,
   -1 means not activated. */
var permapotActTime = -1
// permapot time bandwidth
var permapotTbw = loc.averageTime -
^                 (loc.averageTime / 10)

var old_t = item.GetTreasureCount()
var end_t = 0

// /////////////// FUNCTIONS //////////////// //

func harvestFunc(button)
  buttonPressed = true
  ?button = yesButton
    choice = true
  : // button = noButton
    choice = false

func fight(mode)
  ?mode = "escape"
    canDash = false

    ?c.canUseAbility("mind")
      a.ldtF("mind")
    : // c.canUseAbility("staff_stone")
      c.useAbility_TH("staff_stone", a.stSh)

  :?mode = "evade"
    canDash = false

    ?c.canUseAbility("staff_stone") &
    ^ (foe ! "ranged" |
    ^  (foe = "phase" & s.inRange("dash_min")))
      c.useAbility_TH("staff_stone", a.stSh)
    :?c.canUseAbility("mind") &
    ^ (foe ! "ranged" |
    ^  (foe = "phase" & s.inRange("dash_min")))
      a.ldtF("mind")

    :?c.canUseAbility("staff_ice") &
    ^ s.inRange("dash_min")
      c.useAbility_TH("staff_ice", a.stIh)

    :?!s.inRange("sword")
      fight("normal")

    // Unmake
    :?es.canUnmake()
      a.ldtF("defense unmake")
    :
      a.ldtF("defense")

  :?mode = "normal"
    // ........... DEBUFFING LOGIC .......... //

    // AOE debuffing
    ?(tracker.canTrack("Weaken") |
    ^ tracker.canTrack("Burn")    ) &
    ^(!canDash |
    ^ (foe = "elite" &
    ^  foe.GetCount(itemSplash) > 1))
      itemSplash = foe.distance + 7
      ?tracker.canTrack("Weaken")
        a.ldtF("magic debuff weaken")
      : // tracker.canTrack("Burn")
        a.ldtF("magic debuff burn")

    // 1v1 strong foe weakening
    :?es.canDebuff("Weaken") & canDash &
    ^(foe = "monarch" | foe = "boss") &
    ^ s.inRange("sword") & !(
    ^ foe = "phase3" & !c.permapotSetup &
    ^ foe.hp <= foe.maxhp / 2)
      a.ldtF("sword debuff weaken")

    // 1v1 debuffing (permapot/strong foes)
    :?es.canMultiDebuff(["Chill"/*,"Burn"*/],
    ^                   "any") &
    ^ canDash & s.inRange("sword") & (
    ^ buffs.string = "smite" | ((
    ^ c.permapotSetup & foe = "elite" &
    ^ foe.GetCount(itemSplash) = 1) | (((
    ^ loc.stars > 15 & (
    ^ foe = "monarch" | foe = "boss") &
    ^ s.getFoeDmg() > a.thickArmorRed) |
    ^ nRuns = 1)))) & !(
    ^ foe = "phase3" & !c.permapotSetup &
    ^ foe.hp > foe.maxhp / 2)
      a.ldtF("sword debuff auto")

    // ............ HEALING LOGIC ............ //
    :?hp ! maxhp & foe = "phase" &
    ^ canDash & s.inRange("sword")
      a.ldtF("sword heal")

    // ........... UNMAKING LOGIC ............ //
    :?es.canUnmake()
      ?canDash &
      ^foe.GetCount(itemSplash) = 1
        a.ldtF("sword unmake")
      : // foe.GetCount(itemSplash) > 1
        itemSplash = 10
        a.ldtF("big sword unmake")

    // ............ DAMAGE LOGIC ............. //
    :?foe = "phase" & canDash
      /* ?foe = "phase1" & !c.permapotSetup
        equip Kubikiribocho */
      ?foe = "phase3"
        ?c.canUseAbility("staff_poison") &
        ^!s.inRange("dash")
          c.useAbility_TH("staff_poison", a.stPh)
        :?c.canUsePotion()
          activate potion
        /* :?c.canBurst() & !c.permapotSetup
          c.burst(a.burstSwords) */
        :
          a.ldtF("sword dmg")
      :
        a.ldtF("sword dmg")

    :?canDash & (
    ^ foe.GetCount(itemSplash) = 1 |
    ^ foe = "monarch" | foe = "boss")
      // equip Kubikiribocho
      a.ldtF("sword dmg")
    :
      itemSplash = foe.distance + 7
      a.ldtF("magic dmg")

  : // invalid mode
    log.logError(_FILE,"fight",
    ^   "unknown <mode>: "+mode)

// /////////////// PROCEDURE //////////////// //

// .............. SETUP LOGIC ............... //

// Auto-harvesting logic
?!buttonPressed
  u.showStrCtr(6,30,#yellow,"Dig boulders?",false)

  ?!yesButton
    yesButton = uimkr.mkButton(
    ^-5,9,null,2,null,null, // x, y, w, h, anchor, dock,
    ^"Yes","#green", // txt, col,
    ^null,null,null, // tcol, bcol, hcol,
    ^-5,harvestFunc, // style, pressed,
    ^null,null,null) // down, up, sound

  ?!noButton
    noButton = uimkr.mkButton(
    ^5,9,8,2,null,null, // x, y, w, h, anchor, dock,
    ^"No","red", // txt, col,
    ^null,null,null, // tcol, bcol, hcol,
    ^-5,harvestFunc, // style, pressed,
    ^null,null,null) // down, up, sound
:
  ?yesButton
    yesButton.Recycle()
    yesButton = null
  ?noButton
    noButton.Recycle()
    noButton = null

  ?!dontShowAgain
    var aux = totaltime + 3*u.sec
    ?totaltime < aux
      ?choice
        u.showStrCtr(6,30,#green,
        ^"Dig boulders: enabled",false)
      :
        u.showStrCtr(6,30,#red,
        ^"Dig boulders: disabled",false)
    :
      dontShowAgain = true

?loc.loop
  nRuns++

// set up post-treasure metrics
?old_t ! item.GetTreasureCount()
  // reset metrics
  ?loc.loop | !isBossScr
    old_t = item.GetTreasureCount()
    end_t = 0
  : // track time
    end_t++

// set up bossScr
?!bossScr
  ?loc.stars <= 10 // cyan and white
    bossScr = 2
  :?loc.stars <= 15 // yellow
    bossScr = 4
  :?loc.stars <= 20 // green
    bossScr = 3 + loc.stars - 16
: // set up isBossScr
  isBossScr = (screen.i = bossScr)

// set up minibossScr
?!minibossScr & loc.stars > 10
  ?loc.stars <= 15 // yellow
    minibossScr = 2
  :?loc.stars <= 20 // green
    minibossScr = 1
:?minibossScr // set up isMinibossScr
  isMinibossScr = (screen.i = minibossScr)

// set up lastFoeScr
?!lastFoeScr & loc.stars > 15
  // green
  ?loc.stars <= 20
    lastFoeScr = 1 + loc.stars - 16
:?lastFoeScr // set up isLastFoeScr
  isLastFoeScr = (screen.i = lastFoeScr)

/* set up permapotSetup:
- from yellow onwards,
- in first run, or
- in green, when in boss screen. */
c.permapotSetup = (nRuns = 1 & loc.stars > 10 &
^(loc.stars <= 15 | screen.i >= bossScr - 1))

// Record time when permapot was activated
?c.permapotSetup & permapotActTime = -1
  permapotActTime = totaltime

/* increase permapotTbw if player chooses to dig
boulders. */
?choice
  permapotTbw = loc.averageTime + (30 * 75)

/* // BFG logic
?nRuns > 1 & loc.stars > 16
  c.screenMngr_DS("blade", 1, lastFoeScr - 1) */

/* // DS Mask logic (early scout wake up)
?loc.stars = math.Clamp(loc.stars, 11, 15) &
^!c.permapotSetup
  c.screenMngr_DS("mask", 1, 1) */

// set up itemSplash default value
// bardiche's hitbox + itemSplash area
itemSplash = 17 // s.getHbxSplash("bardiche", null)

// set canDash default value
canDash = true

// set variables for getFoeDmg
s._berserkerLvl = a.berserkerLvl
s._plagueLvl    = a.plagueLvl
s._maskLvl      = a.maskLvl

// set phase3dmg
?foe = "phase3" // only update when needed
  phase3dmg = s.getFoeDmg()

// init Combat
c.Init()
// start up Ranged_Debuffing tracker
tracker.track()

stunTime = foe.debuffs.GetTime("stun")

// Decide hand for one-handed items
?c.permapotSetup |
^(s.inRange("dash") & canDash & ai.walking)
  hand = "left"
:
  hand = "right"

// Auto brewing
c.potionType = "lucky"
?c.canBrewPotion()
  c.brewPotion()

hardElite = (
^(encounter.eliteMod = "berserk"    |
^ encounter.eliteMod = "monarch"    |
^ foe = "monarch"                   |
^ encounter.eliteMod = "blessed"    |
^ foe.buffs.string = "buff_tenacious"))

// ............. MONITOR LOGIC .............. //

/* // abilities monitor:
var canUseAblt = c.canUseAbility("staff_poison")
canUseAblt = c.canUseAbility("staff_poison")

var abltCol = "#ff0000"
abltCol = "#ff0000"
?canUseAblt
  abltCol = "#00ff00"

>`1,10,#magenta,staff_poison cd:
^ @item.GetCooldown("staff_poison")@
>`1,11,@abltCol@,canAct: @canUseAblt@ */

/* // itemSplash display test

var playerX = screen.FromWorldX(pos.x)
playerX = screen.FromWorldX(pos.x)

var playerY = screen.FromWorldZ(pos.z - pos.y)
playerY = screen.FromWorldZ(pos.z - pos.y)

>`@playerX@,@playerY + 2@,itemSplash
draw.Bg(playerX, playerY + 2, #aa4400,
^   itemSplash, 1)

?foe.distance ! 9999
  >`@playerX@,@playerY + 3@,dist\n
  ^dist + itemSplash
  draw.Bg(playerX, playerY + 3, #0000ff,
  ^   foe.distance, 1)
  draw.Bg(playerX, playerY + 4, #aa00aa,
  ^   foe.distance + itemSplash, 1)

?foe.count
  >`@playerX@,@playerY + 5@,count range
  draw.Bg(playerX, playerY + 5, #00aaaa, 46, 1)

  >`@playerX + itemSplash@,@playerY + 2@,
  ^out of range
  draw.Bg(playerX + itemSplash, playerY + 2,
  ^ #008800, 46 - itemSplash, 1) */

/* // monitor post-treasure metrics
var treasureCol = #888888
?end_t > 0 | old_t ! item.GetTreasureCount()
  treasureCol = #aaff00
:
  treasureCol = #888888
>`1,14,@treasureCol@,
^treasure:\n
^  old | @old_t@ (t = @end_t@)
>`1,16,
^  cur | @item.GetTreasureCount()@\n
^  cap | @item.GetTreasureLimit()@ */

// monitor effect durations
?nRuns = 1 & (
^buffs.string = "ʘ" | buffs.string = "lucky")
  var potTime
  ?buffs.string = "ʘ"
    potTime = buffs.GetTime("ʘ")
  : // buffs.string = "lucky"
    potTime = buffs.GetTime("lucky")

  >`1,12,#0066ff,@c.potionType@: @potTime@f 
  ^(@time.FormatDigital(potTime, true)@)

/* // monitor effects
?buffs.string
  u.showBigStr(1,9,30, #0088ff,buffs.string,false)

var fxTable = null
// fxTable = s.getEffectsTable("player","buff",true)
?fxTable
  >`1,9,#0088ff,@fxTable@ */

// monitor any logged errors
?log.hasErrors()
  >`1,@screen.h - 2 - 5@,#ff0000,errorCount: 
  ^@log.getErrorCount()@\n
  >@log.getError()@

// ............ WITHDRAWAL LOGIC ............ //

?s.getTotalHP("player") <= s.getFoeDmg() |
^old_t = item.GetTreasureLimit()
  loc.Leave()

// ............... INIT LOGIC ............... //

// Permapot equipment
?c.permapotSetup
  a.ldtF("permapot")

c.AAC("sword *0 +0", "hatchet")

// Initial equipments
?loc.begin
  a.ldtF("default")

// activate potion when in permapot
:?c.canUsePotion() & c.permapotSetup
  activate potion

// ........... POST-TREASURE LOGIC .......... //

:?loc.stars > 10 & end_t > 1 & isBossScr
  // pickup treasure
  ?pickup.distance < 15
    a.ldtF("magnet")

  // activate potion
  :?c.canUsePotion() & end_t > 27
    activate potion

  // speed up
  :?c.canUseAbility("staff_fire") &
  ^ item.potion = "empty" & end_t > 27
    c.useAbility_TH("staff_fire", a.stFh)

  : // regen armor
    a.ldtF("defense armor regen")

// .............. SUMMON LOGIC .............. //

:?c.canSummon("voidweaver") &
^ loc.stars > 15 &
^ screen.i < bossScr - 1 & !isMinibossScr
  c.useAbility_OH("aether_talisman",
  ^   "aether_talisman", hand       )
:?c.canSummon("cinderwisp") &
^(loc.stars <= 15 | screen.i >= bossScr - 1)
  c.useAbility_OH("fire_talisman",
  ^   "fire_talisman", hand       )

// ............. DEFENSIVE LOGIC ............ //

// phase2 about to attack
:?foe = "phase2" & foe.state = 32 & ((
^ foe.debuffs.string = "chill:6" &
^ foe.time > 97) | (
^ foe.debuffs.string ! "chill" &
^ foe.time > 55))
  // gain Empower to deal extra damage
  ?foe = "vigor"
    a.ldtF("defense buff empower")
  // unmake Dysangelos's fire arm
  :?foe = "fire"
    a.ldtF("defense unmake")
  // apply burn with af shield
  :?foe = "ice" & es.canDebuff("Burn")
    a.ldtF("defense debuff burn")
  :
    fight("normal")

// Dysan's massive beam or putting shield up
:?foe = "phase3" & ((
^ foe.state = 115 & foe.time > 70) | (
^ foe.damage = 1 & ((
^ foe.state = 32 & foe.time > 60) | (
^ foe.state = 33 & foe.time < 5))))
  // prevent the stun
  ?c.canUseAbility("staff_vigor") &
  ^foe.damage = 1
    c.useAbility_TH("staff_vigor", a.stVh)
  : // evade attack
    fight("evade")

// Acronian Scout's wind and critical attack
:?foe = "scout" & foe.state = 32 &
^ foe.damage >= 8
  fight("evade") // fight ranged to avoid hit
  >f0,0,#red,WIND CRIT, FIGHT RANGED

// Normal attacks
:?foe.state = 32 & ((
^ foe = "scout" & !(
^ foe.debuffs.string = "stun" |
^ c.isCasting("bardiche")) & ((
^ foe.debuffs.string = "chill:6" &
^ foe.time > 50) | (
^ foe.debuffs.string ! "chill" &
^ foe.time > 10))) | ((
^ foe = "phase1" & ((
^ foe.debuffs.string = "chill:6" &
^ foe.time > 60) | (
^ foe.debuffs.string ! "chill" &
^ foe.time > 20))) | (
^ foe = "phase3" & foe.damage > 1 & ((
^ foe.debuffs.string = "chill:6" &
^ foe.time > 85) | (
^ foe.debuffs.string ! "chill" &
^ foe.time > 45)))) /* | (
^ foe = "soldier" &
^ foe.debuffs.string ! "stun" &
^ s.inRange("dash_min") & ((
^ foe.debuffs.string = "chill:6" &
^ foe.time > 50) | (
^ foe.debuffs.string ! "chill" &
^ foe.time > 10))) */
^)
  // heal faster
  ?foe = "phase1" & hp ! maxhp
    a.ldtF("defense heal")
    >c0,0,#red,D HEAL

  // reduce damage amap
  :?c.canUseAbility("mask") &
  ^ foe = "phase3" & phase3dmg > 0
    c.useAbility_OH("mask", "mask", "r")

  :?c.permapotSetup
    /* // reduce Dysan damage with Towering shield
    ?foe = "phase1" & hp = maxhp &
    ^ s.getFoeDmg() <= a.thickArmorRed
      a.ldtF("defense tank")
      >c0,0,#888888,D TANK */

    ?hp ! maxhp |
    ^s.getFoeDmg() > armor
      a.ldtF("defense heal")
      >c0,0,#red,D HEAL
    :
      a.ldtF("defense")
      >c0,0,D NORMAL

  // get additional damage
  :?buffs.string ! "buff_damage"
    a.ldtF("defense buff empower")
    >c0,0,#008800,D EMPOWER

  // reduce Dysan damage with Towering shield
  :?foe = "phase1" &
  ^ s.getFoeDmg() <= a.thickArmorRed &
  ^ armor <= a.thickArmorRed
    a.ldtF("defense tank")
    >c0,0,#888888,D TANK

  // unmake attacking foes
  :?es.canUnmake()
    >c0,0,#ffcc00,D UNMAKE
    a.ldtF("defense unmake")
  // af deals more DoT than dF
  :?es.canDebuff("Burn")
    a.ldtF("defense debuff burn")

  : // all effects applied
    fight("normal")

// ............ CUTSCENES LOGIC ............. //

// Dysangelos pre-phase1 cutscene damage strat
:?isBossScr & !c.permapotSetup &
^ s.inRange("heavy_hammer ability") & (((
^ [100,101,102, 108].Contains(foe.state) | (
^ foe.state = 107 & foe.time > 145) | (
^ foe = "phase3" & foe.state = -1)) &
^ item.GetCooldown("bardiche") <= 0) |
^ c.isCasting("heavy_hammer") |
^ c.isCasting("bardiche"))

  >c0,0,#red,CUTSCENE LOGIC

  ?c.canUseAbility("heavy_hammer") &
  ^![107,108].Contains(foe.state)
    c.useAbility_TH("heavy_hammer", Mjölnir)

  :?c.canUseAbility("staff_aether")
    c.useAbility_TH("staff_aether", a.stAh)

  :?c.canUseAbility("staff_poison") &
  ^![107,108].Contains(foe.state)
    c.useAbility_TH("staff_poison", a.stPh)

  :?c.canUseAbility("dash")
    a.ldtF("dash")

  // mini-dash
  :?c.canUseAbility("quarterstaff") &
  ^!s.inRange("bardiche") &
  ^![107,108,-1].Contains(foe.state)
    c.useAbility_TH("quarterstaff", a.myQ)

  :?c.canUseAbility("bardiche") &
  ^ foe.state ! 107
    c.useAbility_TH("bardiche", Kubikiribocho)
  
  :
    a.ldtF("defense armor regen")

// ......... ENGAGING/WALKING LOGIC ......... //

/* speed up when:
  - speed effect not already present
  - not boss, miniboss nor elite screens. */
:?c.canUseAbility("staff_fire") &
^ buffs.string ! "buff_inf_speed" &
^ (loc.stars <= 15 | nRuns > 1) &
^ !(isBossScr | isMinibossScr |
^   encounter.isElite)
  c.useAbility_TH("staff_fire", a.stFh)

// Harvesting logic
:?harvest.distance < 15 &
^choice & nRuns > 1
  ?c.canUseAbility("shovel")
    c.useAbility_TH("shovel", "shovel")
  :
    a.ldtF("harvest")

// pickup logic
:?pickup.distance < 15 &
// foe is farther than pickup
^ (foe.distance > 15 | foe.distance = 9999)
  a.ldtF("magnet")

// mini-dash
:?c.canUseAbility("quarterstaff") & (
^ buffs.string = "buff_range" | ai.walking) &
^ ai.enabled & !ai.paused &
// Cannot dash and in dashing range, or
^!((canDash & a.canSmartDash()) |
// in melee range or permapot setup run
^ s.inRange("sword") | c.permapotSetup)
  c.useAbility_TH("quarterstaff", a.myQ)

// armor regen logic
:?(ai.walking & !s.inRange("socketed_shield")) |
^ (ai.paused | !ai.enabled |
^  player.direction = -1)
  /*?!c.canBurst() & !c.permapotSetup
    c.burst(a.burstSwords)
  :*/
  a.ldtF("defense armor regen")

// engaging logic (out of fighting range)
:?ai.walking & player.direction = 1 &
^ s.inRange("socketed_shield") & ((
^ canDash & !s.inRange("dash_max")) |
^!s.inRange("crossbow") |
^ pos.z ! math.Clamp(pos.z, foe.z -3, foe.z +3))
  ?armor > a.CmaE |
  ^(c.canEngage() & foe ! "phase")
    a.ldtF("engage")
  :
    a.ldtF("defense armor regen")

// ............... RANGED LOGIC .............. //



// .............. DASHING LOGIC ............. //

:?a.canSmartDash() & canDash
  a.smartDash()

// Knockback farming
:?c.canKbFarm()
  c.smoothCast(a.bS)

/* if in range, get closer while trying to
unmake with repeating crossbow. */
:?canDash & c.canSmoothCast(true)
  c.smoothCast(a.bR)

// engaging logic (within fighting range)
:?ai.walking & player.direction = 1 &
^foe ! "phase" & canDash & !a.canSmartDash() &
^s.betweenRange("triskelion", "dash_max")
  a.ldtF("engage")

// get in melee range faster
:?c.canStutterStep()
  c.stutterStep()

// ............... BOSS LOGIC ............... //

:?foe = "phase" // Dysangelos
  ?c.canKillCinderwisp(a.cwpMiN, 0) |
  ^c.isCinderwispCap(a.cwpMiN)
    c.devour("cinderwisp")

  ?foe ! "phase3"
    ?c.canUseAbility("wand_vigor") &
    ^foe.buffs.string = "buff_protection"
      c.useAbility_OH("wand_vigor", a.wVh, hand)
    :
      fight("normal")

  // foe = phase3
  :?c.canUseAbility("heavy_hammer") &
  ^ foe.armor > 0 & // reduce armor
  ^ !c.permapotSetup & s.inRange("dash_min")
    c.useAbility_TH("heavy_hammer", Mjölnir)

  // Buy time
  :?c.permapotSetup &
  ^(totaltime - permapotActTime < permapotTbw)
    // monitor permapot time bandwidth:
    ?permapotActTime ! -1 & nRuns = 1
      var delay = totaltime + (5 * 30)
      ?totaltime <= delay
        >o-7,4,#magenta,wait until 
        ^@time.FormatDigital(permapotTbw)@

    // Debuff
    ?es.canDebuff("Weaken")
      a.ldtF("sword debuff weaken")
    :?es.canDebuff("Chill") & s.getFoeDmg() > a.thickArmorRed
      a.ldtF("sword debuff chill")
    /*:?es.canDebuff("Burn")
      a.ldtF("sword debuff burn")*/

    // Heal
    :?hp ! maxhp
      a.ldtF("sword heal")

    : // wait
      equipL Unbroken Faith
  :
    fight("normal")

// ............ SPECIAL FOE LOGIC ........... //

:?isMinibossScr &
^ c.canUseAbility("staff_poison")
  c.useAbility_TH("staff_poison", a.stPh)

:?c.canUseAbility("bardiche") &
^loc.stars > 15 & nRuns = 1 & (
^foe = "boss" | foe = "monarch")
  c.useAbility_TH("bardiche", Kubikiribocho)

:?loc.stars > 15 & foe = "boss"
  fight("normal")

// ............... AOE LOGIC ................ //

:?foe.GetCount(itemSplash) > 1 & !(
^ c.isCasting("hidden")) |
^ c.isCasting("heavy_hammer")
  // Heavy hammer logic
  ?c.canUseAbility("heavy_hammer") &
  ^ encounter.eliteMod = "plated"
    c.useAbility_TH("heavy_hammer", Mjölnir)

  // ........................................ //

  // Stun/Perma-stun logic
  :?s.inRange("grappling_hook") &
  ^foe ! "warcaster" & !(
  ^c.isCasting("bardiche") |
  ^c.isCasting("wand")) & (
  ^es.canDebuff("Stun") | (
   // stun time (frames) running out
  ^stunTime = math.Clamp(stunTime, 1, 11) &
   // not stunned with heavy hammer or Frost Wand
  ^foe.debuffs.string ! "debuff_armor_fatigue"/* &
  ^foe.debuffs.string ! "debuff_frost_stun"*/))
    itemSplash = foe.distance + 5
    a.ldtF("grappling")

  // Debuff and unmake
  :?nRuns = 1 | encounter.eliteMod = "blessed"
    itemSplash = foe.distance + 7

    ?tracker.canTrack("Weaken")
      a.ldtF("magic debuff weaken")
    :?tracker.canTrack("Chill") &
    ^ s.getFoeDmg() > a.thickArmorRed
      a.ldtF("magic debuff chill")
    :?tracker.canTrack("Burn")
      a.ldtF("magic debuff burn")
    :
      itemSplash = 10
      a.ldtF("big sword unmake")

  // unmake
  :?buffs.string = "ʘ" | !( // berserk pot
  ^ foe.buffs.string = "stability" |
  ^ buffs.string = "buff_infernal")
    itemSplash = 10
    a.ldtF("big sword unmake")

  // Align foes
  :?c.canUseAbility("wand_stone") &
  ^ foe = "elite" &
  ^ s.inRange("sword")
    >c-10,0,#red,USING GRAVITY WAND
    c.useAbility_OH("wand_stone", a.wSh, hand)
  :
    equip Kubikiribocho

// ................ 1V1 LOGIC ............... //

:
  fight("normal")

// .......... SPECIAL ITEMS LOGIC ......... //

// extend range
?c.canUseAbility("staff_aether") & !(
^ c.permapotSetup | (
^ loc.stars > 15 & nRuns = 1)) & ((
^ isLastFoeScr & s.inRange("sword")) |
^ screen.i = lastFoeScr + 1)
  c.useAbility_TH("staff_aether", a.stAh)

:?foe.count > 1 & s.inRange("sword")
  // Voidweaver - use it if possible
  ?c.canUseAbility("voidweaver") &
  ^ c.canUnmakeVoidweaver() & !(
  ^ isMinibossScr | encounter.isElite)
    c.devour("voidweaver")

  // Calamity - reduce hp
  :?c.canUseAbility("wand_aether") & hardElite
    c.useAbility_OH("wand_aether", a.wAh, hand)

  // Reset buff
  :?c.canUseAbility("wand_vigor") &
  ^ foe.buffs.string = "stoic"
    c.useAbility_OH("wand_vigor", a.wVh, hand)

  // Reduce damage
  :?c.canUseAbility("wand_poison") &
  ^(hardElite | encounter.eliteMod = "hydra")
    c.useAbility_OH("wand_poison", a.wPh, hand)

  // Stun enemies
  :?c.canUseAbility("wand_ice") &
  ^(foe.buffs.string = "buff_tenacious" |
  ^ encounter.eliteMod = "blessed")
    c.useAbility_OH("wand_ice", a.wIh, hand)

// .......................................... //

?buffs.string = "buff_range"
  itemSplash += 10

// ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓ //
// ┃ ▄▀▄▀▄▀▄▀▄▀ END OF "1-Rocky" ▄▀▄▀▄▀▄▀▄▀ ┃ //
// ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛ //
