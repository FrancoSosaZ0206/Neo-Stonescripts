//  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓  //
//  ┃ ▄▀▄▀▄▀▄ START OF "2-Deadwood" ▀▄▀▄▀▄ ┃  //
//  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  //

// //////////////// IMPORTS ///////////////// //

var log = import My/Lib/Error_Logging/public

var uimkr = import My/Lib/UI_Maker
var u     = import My/Lib/Utilities
var c     = import My/Lib/Combat
var s     = import My/Lib/Stats
var a     = import My/Lib/Arsenal

var es = import My/Lib/Effect_Stats/public
var tracker = import My/Lib/Ranged_Debuffing/public

// /////////////// VARIABLES //////////////// //

// file
var _FILE = "Scripts/1-Rocky"

// ui-related logic for harvesting
var yesButton     = null
var noButton      = null
var choice        = false
var buttonPressed = false
var dontShowAgain = false

// flags
var canDash  = true

// values
var stunTime = null
var hand     = null

var itemSplash = 17 // bardiche hitbox + splash area

// TODO: implement
var boss_cutscenes = []

// screens
var minibossScr = null
var isMinibossScr = false
var lastFoeScr = null
var isLastFoeScr = false
var bossScr = null
var isBossScr = false

// counters
// number of runs in this session
var nRuns = 1
/* time when permapot was activated,
   -1 means not activated. */
var permapotActTime = -1
// permapot time bandwidth
var permapotTbw = loc.averageTime -
^                 (loc.averageTime / 10)

var old_t = item.GetTreasureCount()
var end_t = 0

// /////////////// FUNCTIONS //////////////// //

func harvestFunc(button)
  buttonPressed = true
  ?button = yesButton
    choice = true
  : // button = noButton
    choice = false

func fight(mode)
  ?mode = "escape"
    canDash = false

    ?c.canUseAbility("mind")
      a.ldtF("mind")
    : // c.canUseAbility("staff_stone")
      c.useAbility_TH("staff_stone", a.stSh)

  :?mode = "evade"
    canDash = false

    ?c.canUseAbility("staff_stone") &
    ^ (foe ! "ranged" |
    ^  (foe = "phase" & s.inRange("dash_min")))
      c.useAbility_TH("staff_stone", a.stSh)
    :?c.canUseAbility("mind") &
    ^ (foe ! "ranged" |
    ^  (foe = "phase" & s.inRange("dash_min")))
      a.ldtF("mind")

    :?c.canUseAbility("staff_ice") &
    ^ s.inRange("dash_min")
      c.useAbility_TH("staff_ice", a.stIh)

    :?!s.inRange("sword")
      ?foe.count > 1
        fight("normal")
      :
        fight("normal")

    // Unmake
    :?es.canUnmake()
      a.ldtF("defense unmake")
    :
      a.ldtF("defense")

  :?mode = "normal"
    // ........... DEBUFFING LOGIC .......... //

    // AOE debuffing
    ?(tracker.canTrack("Weaken") |
    ^ tracker.canTrack("Burn")    ) & (
    ^ !(canDash | foe = "immune_to_ranged") |
    ^ (foe = "elite" &
    ^  foe.GetCount(itemSplash) > 1))
      itemSplash = foe.distance + 7
      ?tracker.canTrack("Weaken")
        a.ldtF("magic debuff weaken")
      : // tracker.canTrack("Burn")
        a.ldtF("magic debuff burn")

    // 1v1 strong foe weakening
    :?es.canDebuff("Weaken") & canDash &
    ^ (foe = "monarch" | foe = "boss") &
    ^ s.inRange("sword")
      a.ldtF("sword debuff weaken")

    :?es.canMultiDebuff(["Chill"/*,"Burn"*/],"any") &
    ^ canDash & s.inRange("sword") &
    // Permapot 1v1 debuffing
    ^ ((c.permapotSetup & foe = "elite" &
    ^   foe.GetCount(itemSplash) = 1) |
    // 1v1 strong foe debuffing
    ^  (((loc.stars > 15 &
    ^     (foe = "monarch" | foe = "boss") &
    ^     s.getFoeDmg(a.berserkerLvl,
    ^                 a.plagueLvl   ,
    ^                 a.maskLvl      ) > 0) |
    ^    nRuns = 1)))
      a.ldtF("sword debuff auto")

    // ............ HEALING LOGIC ............ //
    :?hp ! maxhp & ((canDash &
    ^ foe.GetCount(itemSplash) = 1) |
    ^ foe = "monarch")
      a.ldtF("sword heal")

    // ........... UNMAKING LOGIC ............ //
    :?es.canUnmake()
      ?canDash &
      ^foe.GetCount(itemSplash) = 1
        a.ldtF("sword unmake")
      : // foe.GetCount(itemSplash) > 1
        itemSplash = 10
        a.ldtF("big sword unmake")

    // ............ DAMAGE LOGIC ............. //
    :?canDash &
    ^ (foe.GetCount(itemSplash) = 1 |
    ^  foe = "monarch" | foe = "boss")
      ?c.canUseAbility("staff_poison") &
      ^!s.inRange("dash") & foe = "poena"
        c.useAbility_TH("staff_poison", a.stPh)
      :?c.canUsePotion() & foe = "poena"
        activate potion
      /* :?c.canBurst() & !c.permapotSetup &
      ^ foe = "poena"
        c.burst(a.burstSwords) */
      :
        a.ldtF("sword dmg")

    :?foe = "immune_to_ranged"
      a.ldtF("sword dmg")
    :
      itemSplash = foe.distance + 7
      a.ldtF("magic dmg")

  : // invalid mode
    log.logError(_FILE,"fight",
    ^   "unknown <mode>: "+mode)

// ............. MONITOR LOGIC .............. //

// permapot time bandwidth monitor:
?permapotActTime ! -1 & nRuns = 1
  var delay = totaltime + (5 * 30)
  ?totaltime <= delay
    >o-7,6,#magenta,wait until 
    ^@time.FormatDigital(permapotTbw)@

/* // itemSplash display test

var playerX = screen.FromWorldX(pos.x)
playerX = screen.FromWorldX(pos.x)

var playerY = screen.FromWorldZ(pos.z - pos.y)
playerY = screen.FromWorldZ(pos.z - pos.y)

>`@playerX@,@playerY + 2@,itemSplash
draw.Bg(playerX, playerY + 2, #aa4400,
^   itemSplash, 1)

?foe.distance ! 9999
  >`@playerX@,@playerY + 3@,dist\n
  ^dist + itemSplash
  draw.Bg(playerX, playerY + 3, #0000ff,
  ^   foe.distance, 1)
  draw.Bg(playerX, playerY + 4, #aa00aa,
  ^   foe.distance + itemSplash, 1)

?foe.count
  >`@playerX@,@playerY + 5@,count range
  draw.Bg(playerX, playerY + 5, #00aaaa, 46, 1)

  >`@playerX + itemSplash@,@playerY + 2@,
  ^out of range
  draw.Bg(playerX + itemSplash, playerY + 2,
  ^ #008800, 46 - itemSplash, 1) */

// monitor post-treasure metrics
var treasureCol = #888888
?end_t > 0 | old_t ! item.GetTreasureCount()
  treasureCol = #aaff00
:
  treasureCol = #888888
>`1,14,@treasureCol@,
^treasure:\n
^  old | @old_t@ (t = @end_t@)
>`1,16,
^  cur | @item.GetTreasureCount()@\n
^  cap | @item.GetTreasureLimit()@\n

// show any logged errors
?log.hasErrors()
  >`1,@screen.h - 2 - 5@,#ff0000,errorCount: 
  ^@log.getErrorCount()@\n
  >@log.getError()@

// ............ WITHDRAWAL LOGIC ............ //

?s.getTotalHP("player")
^ <=
^s.getFoeDmg(a.berserkerLvl,
^            a.plagueLvl,
^            a.maskLvl      ) |
^old_t = item.GetTreasureLimit()
  loc.Leave()

// .............. SETUP LOGIC ............... //

// Auto-harvesting logic
?!buttonPressed
  u.showStrCtr(6,30,#yellow,"Chop trees?",false)

  ?!yesButton
    yesButton = uimkr.mkButton(
    ^-5,9,null,2,null,null, // x, y, w, h, anchor, dock,
    ^"Yes","#green", // txt, col,
    ^null,null,null, // tcol, bcol, hcol,
    ^-5,harvestFunc, // style, pressed,
    ^null,null,null) // down, up, sound

  ?!noButton
    noButton = uimkr.mkButton(
    ^5,9,8,2,null,null, // x, y, w, h, anchor, dock,
    ^"No","red", // txt, col,
    ^null,null,null, // tcol, bcol, hcol,
    ^-5,harvestFunc, // style, pressed,
    ^null,null,null) // down, up, sound
:
  ?yesButton
    yesButton.Recycle()
    yesButton = null
  ?noButton
    noButton.Recycle()
    noButton = null

  ?!dontShowAgain
    var aux = totaltime + 3*u.sec
    ?totaltime < aux
      ?choice
        u.showStrCtr(6,30,#green,
        ^"Chop trees: enabled",false)
      :
        u.showStrCtr(6,30,#red,
        ^"Chop trees: disabled",false)
    :
      dontShowAgain = true

?loc.loop
  nRuns++

// set up post-treasure metrics
?old_t ! item.GetTreasureCount()
  // reset metrics
  ?loc.loop | !isBossScr
    old_t = item.GetTreasureCount()
    end_t = 0
  : // track time
    end_t++

// set up bossScr
?!bossScr
  ?loc.stars <= 5 // white
    bossScr = 5
  :?loc.stars <= 15 // cyan and yellow
    bossScr = 6
  :?loc.stars <= 20 // green
    bossScr = 3 + loc.stars - 16
: // set up isBossScr
  isBossScr = (screen.i = bossScr)

// set up lastFoeScr
?!lastFoeScr
  ?loc.stars <= 5 // white
    lastFoeScr = 3
  :?loc.stars <= 10 // cyan
    lastFoeScr = 4
  :?loc.stars <= 15 // yellow
    lastFoeScr = 3

  // green
  :?loc.stars <= 20
    lastFoeScr = 1 + loc.stars - 16
: // set up isLastFoeScr
  isLastFoeScr = (screen.i = lastFoeScr)

// set up minibossScr
?!minibossScr
  // yellow
  ?loc.stars = math.Clamp(loc.stars, 11, 15)
    minibossScr = 4
  // green
  :?loc.stars = math.Clamp(loc.stars, 16, 20)
    minibossScr = 1
: // set up isMinibossScr
  isMinibossScr = (screen.i = minibossScr)

/* set up permapotSetup:
- in first run
- yellow onwards, or
- green onwards and
- upon reaching the boss screen. */
c.permapotSetup =
^ (nRuns = 1 & (
^  (loc.stars = math.Clamp(loc.stars, 11, 15)) |
^  (loc.stars > 15 &
^   screen.i >= bossScr - 1)))

// Record time when permapot was activated
?c.permapotSetup & permapotActTime = -1
  permapotActTime = totaltime

/* increase permapotTbw if player chooses to
chop trees. */
?choice
  permapotTbw = loc.averageTime + (30 * 75)

// BFG logic
?nRuns > 1 & loc.stars > 16
  c.screenMngr_DS("blade", 1, lastFoeScr - 1)

// set up itemSplash default value
// bardiche's hitbox + itemSplash area
itemSplash = 17 // s.getHbxSplash("bardiche", null)

// set canDash default value
canDash = true

// init Combat
c.Init()
// start up Ranged_Debuffing tracker
tracker.track()

stunTime = foe.debuffs.GetTime("stun")

// Decide hand for one-handed items
?c.permapotSetup |
^(s.inRange("dash") & canDash & ai.walking)
  hand = "left"
:
  hand = "right"

// Auto brewing
c.potionType = "lucky"
?c.canBrewPotion()
  c.brewPotion()

// .......................................... //

// Permapot equipment
?c.permapotSetup
  a.ldtF("permapot")

c.AAC("sword *0", "hatchet")

// Initial equipments
?loc.begin
  a.ldtF("default")

// activate potion when in permapot
:?c.canUsePotion() & c.permapotSetup
  activate potion

// ........... POST-TREASURE LOGIC .......... //

:?loc.stars > 10 & end_t > 1 & isBossScr
  // pickup treasure
  ?pickup.distance < 15
    a.ldtF("magnet")

  // activate potion
  :?c.canUsePotion() & end_t > 27
    activate potion

  // speed up
  :?c.canUseAbility("staff_fire") &
  ^ end_t > 27 & item.potion = "empty"
    c.useAbility_TH("staff_fire", a.stFh)

  : // regen armor
    a.ldtF("defense armor regen")

// .............. SUMMON LOGIC .............. //

:?c.canSummon("voidweaver") &
^ loc.stars > 15 &
^ screen.i < bossScr - 1 & !isMinibossScr
  c.useAbility_OH("aether_talisman",
  ^   "aether_talisman", hand       )
:?c.canSummon("cinderwisp") & foe ! "poena" &
^(loc.stars <= 15 | screen.i >= bossScr - 1)
  c.useAbility_OH("fire_talisman",
  ^   "fire_talisman", hand       )

/* hide cinderwisp to avoid getting ignition
mirrored. */
:?c.canHide("cinderwisp") &
^ foe = "poena" & isBossScr &
^!c.canUseAbility("bardiche")
  c.useAbility_OH("fire_talisman",
  ^   "fire_talisman", hand       )

// ............. DEFENSIVE LOGIC ............ //

:?(foe = "tree_boss" &
^  foe.state = 32 & foe.time >= 70) |
^ (foe = "poena" &
^  foe.state = 32 & foe.time >= 80)
  ?c.canUseAbility("staff_ice")
    c.useAbility_TH("staff_ice", a.stIh)
  :
    fight("evade")

// ............ CUTSCENES LOGIC ............. //



// ......... ENGAGING/WALKING LOGIC ......... //

/* speed up when:
  - speed effect not already present
  - not boss nor miniboss screens. */
:?c.canUseAbility("staff_fire") &
^ buffs.string ! "buff_inf_speed" &
^ (loc.stars <= 15 | nRuns > 1) &
^!isBossScr
  c.useAbility_TH("staff_fire", a.stFh)

// Harvesting logic
:?harvest.distance < 15 &
^choice & nRuns > 1
  ?c.canUseAbility("hatchet")
    c.useAbility_OH("hatchet", hatchet, "r")
  :
    a.ldtF("harvest")

// mini-dash
:?c.canUseAbility("quarterstaff") &
^ ai.walking & ai.enabled & !ai.paused &
// Cannot dash and in dashing range
^!(canDash & a.canSmartDash()) &
^ (c.permapotSetup | screen.i > 0)
  c.useAbility_TH("quarterstaff", a.myQ)

// pickup logic
:?pickup.distance < 15 &
// foe is farther than pickup
^ (foe.distance > 15 | foe.distance = 9999)
  a.ldtF("magnet")

// armor regen logic
:?(ai.walking & !s.inRange("socketed_shield")) |
^ (ai.paused | !ai.enabled |
^  player.direction = -1)
  /*?!c.canBurst() & !c.permapotSetup
    c.burst(a.burstSwords)
  :*/
  a.ldtF("defense armor regen")

// engaging logic (out of fighting range)
:?ai.walking & player.direction = 1 &
^ s.inRange("socketed_shield") &
^ ((canDash & !s.inRange("dash_max")) |
^  !s.inRange("crossbow"))
  ?armor > a.CmaE |
  ^(c.canEngage() & foe ! "phase")
    a.ldtF("engage")
  :
    a.ldtF("defense armor regen")

// ............... RANGED LOGIC .............. //



// .............. DASHING LOGIC ............. //

:?canDash & ((
^  foe.buffs.string = "poena_mirror" |
^  foe.buffs.string = "buff_mirror"   ) &
^ c.canUseAbility("dash")) | a.canSmartDash()
  a.smartDash()

// Knockback farming
:?c.canKbFarm()
  c.smoothCast(a.bS)

/* if in range, get closer while trying to
unmake with repeating crossbow. */
:?canDash & c.canSmoothCast(true)
  c.smoothCast(a.bR)

// engaging logic (within fighting range)
:?ai.walking & player.direction = 1 &
^foe ! "phase" & canDash & !a.canSmartDash() &
^s.betweenRange("triskelion", "dash_max")
  a.ldtF("engage")

// get in melee range faster
:?c.canStutterStep() // & canDash
  c.stutterStep()

// ............. MINIBOSS LOGIC ............. //

// Voidweaver - use it if possible
:?isMinibossScr &
^ c.canUseAbility("voidweaver") &
^ c.canUnmakeVoidweaver()
  c.devour("voidweaver")

  /*?foe = "spawner" | foe = "immune_to_ranged"
    fight("normal")
  :
    equip @a.bR@*/

// ............... AOE LOGIC ................ //

:?foe.GetCount(itemSplash) > 1 &
^!(foe = "boss" | foe = "monarch" |
^  isMinibossScr)
  // .......... SPECIAL ITEMS LOGIC ......... //

  // Reset buff
  ?c.canUseAbility("wand_vigor") &
  ^ foe.buffs.string = "buff_mirror"
    c.useAbility_OH("wand_vigor", a.wVh, hand)

  // Calamity - reduce hp
  :?c.canUseAbility("wand_aether") &
  ^(encounter.eliteMod = "berserk"    |
  ^ encounter.eliteMod = "monarch"    |
  ^ foe = "monarch"                   |
  ^ encounter.eliteMod = "blessed"    |
  ^ foe.buffs.string = "buff_tenacious")
    c.useAbility_OH("wand_aether", a.wAh, hand)

  // Reduce damage
  :?c.canUseAbility("wand_poison") &
  ^(encounter.eliteMod = "berserk"    |
  ^ encounter.eliteMod = "monarch"    |
  ^ foe = "monarch"                   |
  ^ encounter.eliteMod = "blessed"    |
  ^ encounter.eliteMod = "hydra"      |
  ^ foe.buffs.string = "buff_tenacious")
    c.useAbility_OH("wand_poison", a.wPh, hand)

  /* // FIXME: extend range
  :?c.canUseAbility("staff_aether") &
  ^ !(isMinibossScr | nRuns = 1)
    c.useAbility_TH("staff_aether", a.stAh) */

  // Align foes
  :?c.canUseAbility("wand_stone") &
  ^ s.inRange("wand")
    c.useAbility_OH("wand_stone", a.wSh, hand)

  // ........................................ //

  // Heavy hammer logic
  :?c.canUseAbility("heavy_hammer") &
  ^ encounter.eliteMod = "plated"
    c.useAbility_TH("heavy_hammer",
    ^               "Guardian's Bane")
  /* :?c.canUseAbility("heavy_hammer") &
  ^ foe = "elite"
    c.useAbility_TH("heavy_hammer", Mjölnir) */

  // Stun/Perma-stun logic
  :?s.inRange("grappling_hook") &
  // don't interrupt bardiche
  ^!c.isCasting("bardiche") &
  ^ (es.canDebuff("Stun") |
    // stun time (frames) running out
  ^  (stunTime = math.Clamp(stunTime, 1, 11) &
     // not stunned with heavy hammer // or Frost Wand
  ^   foe.debuffs.string ! "debuff_armor_fatigue"/* &
  ^   foe.debuffs.string ! "debuff_frost_stun")*/))
    itemSplash = foe.distance + 5
    a.ldtF("grappling")

  // permapot run
  :?nRuns = 1 |
  ^ (encounter.eliteMod = "blessed" &
  ^  !c.isCasting("bardiche"))
    ?foe ! "immune_to_ranged"
      itemSplash = foe.distance + 7

      // Debuff
      ?tracker.canTrack("Weaken")
        a.ldtF("magic debuff weaken")
      :?tracker.canTrack("Chill")
        a.ldtF("magic debuff chill")
      :?tracker.canTrack("Burn")
        a.ldtF("magic debuff burn")
      : // unmake
        itemSplash = 10
        a.ldtF("big sword unmake")
    : // unmake
      itemSplash = 10
      a.ldtF("big sword unmake")

  // berserk potion
  :?buffs.string = "ʘ" | foe ! "elite" |
  // split hydras lose the Stable buff
  ^ (encounter.eliteMod = "hydra" &
  ^  foe.buffs.string ! "stability") /* |
  // more foes outside range
  ^ (foe ! "elite" & screen.i > 1 &
  ^  (foe.count -
  ^   foe.GetCount(itemSplash))
  ^  > 0) */
    itemSplash = 10
    a.ldtF("big sword unmake")
  :
    equip Kubikiribocho

// ............... BOSS LOGIC ............... //

?foe = "phase1" & foe.hp <= 0 & (
^item.GetCooldown("bardiche") <= 0 |
^c.isCasting("bardiche"))
  c.useAbility_TH("bardiche", Kubikiribocho)

// Xyloalgia
:?foe = "tree_boss" & foe.state ! 4
  // About to die
  ?foe.hp < 100
    // dash back
    canDash = false
    ?c.canUseAbility("staff_stone")
      c.useAbility_TH("staff_stone", a.stSh)
    :?c.canUseAbility("mind") &
    ^ s.inRange("bardiche")
      a.ldtF("mind")
    
    // queue debuff projectiles
    :?tracker.canTrack("Weaken")
      a.ldtF("magic debuff weaken")
    :?tracker.canTrack("Chill")
      a.ldtF("magic debuff chill")
    :?tracker.canTrack("Burn")
      a.ldtF("magic debuff burn")

    : // dash again and finish up
      canDash = true
      fight("normal")
  :
    fight("normal")

:?foe = "poena"
  // remove mirror buff with Reset Wand
  ?c.canUseAbility("wand_vigor") &
  ^foe.buffs.string = "poena_mirror"
    c.useAbility_OH("wand_vigor", a.wVh, hand)

  // Stun Poena with Frost Wand
  :?c.canUseAbility("wand_ice") &
  ^ es.canDebuff("Stun")
    c.useAbility_OH("wand_ice", a.wIh, hand)

  :
    fight("normal")

// ................ 1V1 LOGIC ............... //

// Tanky foe, use bardiche ability to lower its hitpoints
:?loc.stars > 15 &
^(foe = "boss" | foe = "monarch") &
^(c.canUseAbility("staff_poison") |
^c.canUseAbility("bardiche"))
  ?c.canUseAbility("staff_poison")
    c.useAbility_TH("staff_poison", a.stPh)
  : // c.canUseAbility("bardiche")
    c.useAbility_TH("bardiche", Kubikiribocho)
:
  fight("normal")

?buffs.string = "buff_range"
  itemSplash += 10

//  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓  //
//  ┃ ▄▀▄▀▄▀▄ END OF "2-Deadwood" ▀▄▀▄▀▄▀▄ ┃  //
//  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  //
