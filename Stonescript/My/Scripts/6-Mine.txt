//  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓  //
//  ┃ ▄▀▄▀▄▀▄▀▄ START OF "6-Mine" ▀▄▀▄▀▄▀▄▀ ┃  //
//  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  //

// ///////////////// IMPORTS ///////////////// //

var log = import My/Lib/Error_Logging/public

var c = import My/Lib/Combat
var s = import My/Lib/Stats
var a = import My/Lib/Arsenal

var es = import My/Lib/Effect_Stats/public
var tracker = import My/Lib/Ranged_Debuffing/public

// //////////////// VARIABLES //////////////// //

// file
var _FILE = "Scripts/6-Mine"

// flags
var canDash  = true

// values
var stunTime = null
var hand     = null

var itemSplash = 17 // bardiche hitbox + splash area

// screens
var isMinibossScr = false
var lastFoeScr = null
var isLastFoeScr = false
// NOTE: this is in a special boss location.
var isBossScr = false

// TODO: implement
var boss_cutscenes = []

// stats
var minibossDmg = [
^60, 65, 70, 75, 80, // yellow
^85, 90, 95, 100, 105] // green

// counters
// number of runs in this session
var nRuns = 1
/* time when permapot was activated,
   -1 means not activated. */
var permapotActTime = -1
// permapot time bandwidth
var permapotTbw = loc.averageTime -
^                 (loc.averageTime / 10)

var old_t = item.GetTreasureCount()
var end_t = 0

// guardian's powerup counter
var powerupCount = 0

// //////////////// FUNCTIONS //////////////// //

func fight(mode)
  ?mode = "escape"
    canDash = false

    ?c.canUseAbility("mind")
      a.ldtF("mind")
    : // c.canUseAbility("staff_stone")
      c.useAbility_TH("staff_stone", a.stSh)

  :?mode = "evade"
    canDash = false

    ?c.canUseAbility("staff_stone") &
    ^ (foe ! "ranged" |
    ^  (foe = "phase" & s.inRange("dash_min")))
      c.useAbility_TH("staff_stone", a.stSh)
    :?c.canUseAbility("mind") &
    ^ (foe ! "ranged" |
    ^  (foe = "phase" & s.inRange("dash_min")))
      a.ldtF("mind")

    :?c.canUseAbility("staff_ice") &
    ^ s.inRange("dash_min")
      c.useAbility_TH("staff_ice", a.stIh)

    :?!s.inRange("sword")
      ?foe.count > 1
        fight("normal")
      :
        fight("normal")

    // Unmake
    :?es.canUnmake()
      a.ldtF("defense unmake")
    :
      a.ldtF("defense")

  :?mode = "normal"
    // ........... DEBUFFING LOGIC ........... //

    ?(tracker.canTrack("Weaken") |
    ^ tracker.canTrack("Burn")    ) &
    // Bronze Guardian ranged debuffing
    ^((foe = "phase" & !canDash &
    ^  buffs.string = "smite") |
    // AOE debuffing
    ^(!canDash |
    ^ (foe = "elite" &
    ^  foe.GetCount(itemSplash) > 1)))
      ?tracker.canTrack("Weaken")
        a.ldtF("magic debuff weaken")
      : // tracker.canTrack("Burn")
        a.ldtF("magic debuff burn")

    // 1v1 strong foe weakening
    :?es.canDebuff("Weaken") & canDash &
    ^(foe = "monarch" | foe = "phase")
      a.ldtF("sword debuff weaken")

    // Permapot 1v1 debuffing
    :?es.canMultiDebuff(["Weaken","Chill",
    ^                    "Burn"           ],
    ^                   "any") &
    ^canDash &
    ^((c.permapotSetup & foe = "elite" &
    ^  foe.GetCount(itemSplash) = 1) |
    // 1v1 strong foe debuffing
    ^ (((loc.stars > 15 &
    ^   (foe = "monarch" | foe = "phase") &
    ^   s.getFoeDmg(a.berserkerLvl,
    ^               a.plagueLvl   ,
    ^               a.maskLvl      ) > 0) |
    ^  nRuns = 1)))
      a.ldtF("sword debuff auto")

    // ............ HEALING LOGIC ............ //
    :?hp ! maxhp &
    ^((canDash &
    ^  foe.GetCount(itemSplash) = 1) |
    ^ foe = "monarch")
      a.ldtF("sword heal")

    // ........... UNMAKING LOGIC ............ //
    :?es.canUnmake()
      ?canDash &
      ^foe.GetCount(itemSplash) = 1
        a.ldtF("sword unmake")
      : // foe.GetCount(itemSplash) > 1
        a.ldtF("big sword unmake")

    // ............ DAMAGE LOGIC ............. //
    
    :?c.canUsePotion() & foe = "phase"
      activate potion
    :?c.canUseAbility("heavy_hammer") &
    ^foe = "phase" & foe.armor > 0
      c.useAbility_TH("heavy_hammer", Mjölnir)
    :?c.canUseAbility("mask") & foe = "phase"
      c.useAbility_OH("mask", "mask", "r")

    :?canDash &
    ^(foe.GetCount(itemSplash) = 1 |
    ^foe = "monarch" | foe = "phase")
      ?c.canUseAbility("staff_poison") &
      ^!s.inRange("dash")
        c.useAbility_TH("staff_poison", a.stPh)
      :
        a.ldtF("sword dmg")

    : // !(canDash | (...))
      ?buffs.string = "strength" &
      ^buffs.GetTime("strength") > 60
        equip @a.bAdmg@
      :?!c.permapotSetup
        a.ldtF("ranged dmg")
      :
        a.ldtF("magic dmg")

  : // invalid mode
    log.logError(_FILE,"fight",
    ^   "unknown <mode>: "+mode)

// //////////////// PROCEDURE //////////////// //

// .............. MONITOR LOGIC .............. //

/* // permapot time bandwidth monitor:
?permapotActTime ! -1 & nRuns = 1
  var delay = totaltime + (5 * 30)
  ?totaltime <= delay
    >o-7,6,#magenta,wait until 
    ^@time.FormatDigital(permapotTbw)@
*/

/* // foe distance monitor
?foe.distance ! 9999
  >f0,10,#magenta,dist=@foe.distance@
*/

// bfg ds screens monitor
var bfgDsTargetScr = c.getScreen_DS("blade",
^                                   "TARGET")
?loc.loop
  bfgDsTargetScr = c.getScreen_DS("blade",
  ^                               "TARGET")

?bfgDsTargetScr
  var bfgCol
  ?screen.i > bfgDsTargetScr |
  ^loc.id ! "bronze_mine"
    bfgCol = #888888
  :?screen.i < bfgDsTargetScr
    bfgCol = #ffff00
  : // screen.i = bfgDsTargetScr
    bfgCol = #00ff00
  >`1,10,@bfgCol@,bfg: @screen.i@/
  ^@bfgDsTargetScr@

// powerupCount monitor:
var powerupCol
powerupCol = #88ff00
?powerupCount = 1
  powerupCol = #ffff00
:?powerupCount = 2
  powerupCol = #ff8800
:?powerupCount >= 3
  powerupCol = #ff0000
>`1,11,@powerupCol@,powerupCount: @powerupCount@

// item states monitor:
>`1,12,#magenta,ils: @item.left.state@ | 
^irs: @item.right.state@

var permapotCol
?c.permapotSetup
  permapotCol = #00ff00
:
  permapotCol = #ff0000
>`1,13,@permapotCol@,permapotSetup

// show debuff duration
?buffs.string = "strength"
  var potTime
  potTime = buffs.GetTime("strength")
  >`1,15,#0066ff,strength: @potTime@f 
  ^(@time.FormatDigital(potTime, true)@)

// show any logged errors
?log.hasErrors()
  >`1,@screen.h - 2 - 5@,#ff0000,errorCount: 
  ^@log.getErrorCount()@
  >`1,@screen.h - 2 - 4@,#ff0000,@log.getError()@

// ............. WITHDRAWAL LOGIC ............ //

?(foe ! "boss" & s.getTotalHP("player")
^ <=
^s.getFoeDmg(a.berserkerLvl,
^            a.plagueLvl,
^            a.maskLvl      )) |
^nRuns >= 25
  loc.Leave()

// ............... SETUP LOGIC ............... //

?loc.loop
  nRuns++

  old_t = item.GetTreasureCount()
  end_t = 0

// set up isMinibossScr
isMinibossScr = (loc.id = "bronze_mine") &
   // yellow
^ ((loc.stars = math.Clamp(loc.stars,
^                          11, 15) &
^   screen.i = 6) |
   // green
^  (loc.stars = math.Clamp(loc.stars,
^                          16, 20) &
^   screen.i = 1))

// set up lastFoeScr
?!lastFoeScr
  ?loc.stars <= 5 // white
    lastFoeScr = 3
  :?loc.stars <= 15 // cyan and yellow
    lastFoeScr = 4
  :?loc.stars <= 20
    lastFoeScr = 1 + loc.stars - 16 // green
: // set up isLastFoeScr
  isLastFoeScr =(loc.id = "bronze_mine" &
  ^              screen.i = lastFoeScr   )

// set up isBossScr
isBossScr = (loc.id = "bronze_guardian_harder" &
^            screen.i = 1                       )

// set up permapotSetup
c.permapotSetup = // activate...
// in first run (yellow onwards), and
^(loc.stars > 10 & nRuns = 1 &
// once the potion has been consumed.
^ item.potion = "empty" &
^ buffs.string = "strength")

// Record time when permapot was activated
?c.permapotSetup & permapotActTime = -1
  permapotActTime = totaltime

// BFG logic
?loc.id = "bronze_mine" & lastFoeScr &
^(nRuns > 1 | loc.stars <= 10)
  c.screenMngr_DS("blade", 1, lastFoeScr - 1)

// set up itemSplash default value
itemSplash = 17 // bardiche's hitbox + itemSplash area
// Set canDash default value
canDash = true

c.potionType = "strength"
c.Init()
tracker.track()

stunTime = s.getEffectStat("foe",
^            "debuff"           ,
^            "stun"             ,
^            "time"              ) // frames
?!stunTime
  stunTime = -1

// Decide hand for one-handed items
?c.permapotSetup | s.inRange("dash")
  hand = "left"
:
  hand = "right"

// Auto brewing
?c.canBrewPotion()
  c.brewPotion()

// track time after picking treasure up
?old_t ! item.GetTreasureCount()
  end_t++

// reset powerupCount
?loc.loop & powerupCount > 0
  powerupCount = 0
// increase powerupCount
:?foe = "phase" & foe.state = 32 & foe.time = 0
  powerupCount ++

?isMinibossScr & foe ! "explode"
  canDash = false

// ........................................... //

// Permapot equipment
?c.permapotSetup
  a.ldtF("permapot")

c.AAC("sword *0", "hatchet")

// Initial equipments
?loc.begin
  a.ldtF("default")

/* activate potion after picking up treasure
or while setting up permapot. */
:?c.canUsePotion() &
^loc.stars > 10 & end_t > 1 &
^loc.id = "bronze_guardian_harder"
  activate potion

// Summons
:?c.canSummon("voidweaver") &
^ loc.id = "bronze_mine" &
^ screen.i <= lastFoeScr
  c.useAbility_OH("aether_talisman",
  ^   "aether_talisman", hand       )
:?c.canSummon("cinderwisp") &
^ ((loc.id = "bronze_mine" &
^   screen.i > lastFoeScr) |
^  loc.id = "bronze_guardian_harder")
// ^ loc.id = "bronze_guardian_harder"
  c.useAbility_OH("fire_talisman",
  ^   "fire_talisman", hand       )

// ............. DEFENSIVE LOGIC ............. //

// boss's hammer attack
:?foe = "phase" & foe.state = 32 & foe.time >= 30
  // block bomb attack
  ?c.canUseAbility("staff_ice") &
  ^powerupCount >= 3
    c.useAbility_TH("staff_ice", a.stIh)
  :
    canDash = false
    fight("escape")

// ............. CUTSCENES LOGIC ............. //



// .............. WALKING LOGIC .............. //

// speed up (post-treasure)
:?c.canUseAbility("staff_fire") &
^ end_t > 1 & loc.stars > 10 &
^ loc.id = "bronze_guardian_harder" &
  // after using potion
^ item.potion = "empty"
  c.useAbility_TH("staff_fire", a.stFh)

// speed up (normal)
:?c.canUseAbility("staff_fire") &
^ loc.id = "bronze_mine" &
^ !(foe = "explode" & s.inRange("dash_min")) &
// already has the speed effect
^ buffs.string ! "buff_inf_speed" &
^ screen.i = lastFoeScr + 1
/* // 1 foe just defeated
^((foe.count = 1 & foe.state = 4) |
// too far to attack
^ (!s.inRange("crossbow"))) &
// save armor if it's setup run
^!(loc.stars > 15 &
^  (nRuns = 1 |
// Don't use it when facing the scout
^   (nRuns > 1 & screen.i = 1)))
*/
  c.useAbility_TH("staff_fire", a.stFh)

// mini-dash
:?c.canUseAbility("quarterstaff") &
^!s.inRange("dash") & ai.walking &
^ai.enabled & !ai.paused & !blowing
  c.useAbility_TH("quarterstaff", a.myQ)

// Pickup logic
:?pickup.distance < 15 &
// foe is farther than pickup
^(foe.distance = 9999 |
^ foe.distance > 15 |
// pickup is a treasure
^ pickup = "treasure")
  a.ldtF("magnet")

// regen armor (after picking chest up)
:?(loc.stars <= 10 &
^  old_t ! item.GetTreasureCount()) |
^(end_t > 1 &
^ loc.id = "bronze_guardian_harder" &
^!(c.canUsePotion() |
^  c.canUseAbility("staff_fire")))
  a.ldtF("defense armor regen")

// armor regen logic
:?(ai.walking & !s.inRange("socketed_shield")) |
^(ai.paused | !ai.enabled |
^ player.direction = -1)
  a.ldtF("defense armor regen")

// engaging logic (out of fighting range)
:?ai.walking & player.direction = 1 & canDash &
^s.betweenRange("dash_max", "socketed_shield")
  ?armor > a.compoundMaxArmor_boosted |
  ^(c.canEngage() & foe ! "phase")
    a.ldtF("engage")
  :
    a.ldtF("defense armor regen")

// ............... RANGED LOGIC .............. //

// Insta-kill Enfused elites
:?encounter.eliteMod = "enfused" &
^s.inRange("wand")
  canDash = false
  a.ldtF("magic debuff burn")

// .............. DASHING LOGIC .............. //

:?a.canSmartDash() & canDash
  a.smartDash()

// Knockback farming
:?c.canKbFarm()
  c.smoothCast(a.bS)

/* if in range, get closer while trying to
unmake with repeating crossbow. */
:?canDash &
^s.betweenRange("triskelion","crossbow") &
^c.canSmoothCast(true) & foe ! "phase"
  c.smoothCast(a.bR)

// engaging logic (within fighting range)
:?ai.walking & player.direction = 1 &
^foe ! "phase" & canDash &
^s.betweenRange("triskelion", "dash_max")
  a.ldtF("engage")

// get in melee range faster
:?c.canStutterStep()
  c.stutterStep()

// ........... SPECIAL ITEMS LOGIC ........... //

// Voidweaver - use it if possible
:?c.canUseAbility("voidweaver") &
^ c.canUnmakeVoidweaver() &
^ foe.count > 1 & s.inRange("hatchet") &
^ !isMinibossScr
  c.devour("voidweaver")

// Calamity - reduce hp
:?c.canUseAbility("wand_aether") &
^(encounter.eliteMod = "berserk"    |
^ encounter.eliteMod = "monarch"    |
^ foe = "monarch"                   |
^ encounter.eliteMod = "blessed"    |
^ foe.buffs.string = "buff_tenacious")
  c.useAbility_OH("wand_aether", a.wAh, hand)

// Reset buff
:?c.canUseAbility("wand_vigor") &
^ foe.buffs.string = "stoic"
  c.useAbility_OH("wand_vigor", a.wVh, hand)

// Reduce damage
:?c.canUseAbility("wand_poison") &
^(encounter.eliteMod = "berserk"    |
^ encounter.eliteMod = "monarch"    |
^ foe = "monarch"                   |
^ encounter.eliteMod = "blessed"    |
^ encounter.eliteMod = "hydra"      |
^ foe.buffs.string = "buff_tenacious")
  c.useAbility_OH("wand_poison", a.wPh, hand)

// Stun enemies
:?c.canUseAbility("wand_ice") &
^ es.canDebuff("stun") &
^ foe.count > 1 & foe = "elite" &
^ s.getTotalHP("player") < c.hihp
  c.useAbility_OH("wand_ice", a.wIh, hand)

// extend range
/* :?c.canUseAbility("staff_aether") &
^ s.inRange("dash_min")
  c.useAbility_TH("staff_aether", a.stAh)
*/

// .............. MINIBOSS LOGIC ............. //

// Bomb Cart screen logic
:?isMinibossScr & s.inRange("crossbow")
  // Bomb Cart
  ?foe = "explode"
    // combat
    ?(s.inRange("hatchet") | foe.state = 4) &
    ^c.canUseAbility("staff_ice")
      c.useAbility_TH("staff_ice", a.stIh)

    :/* ?buffs.string ! "buff_frozen" &
    ^foe.debuffs.string ! "stun" */
      canDash = false
      fight("escape")
  
  : // normal foes
    a.ldtF("ranged dmg")

// ................ AOE LOGIC ................ //

:?foe.GetCount(itemSplash) > 1 &
^!(foe = "boss" | foe = "monarch")
  // Align foes
  ?c.canUseAbility("wand_stone") & s.inRange("wand")
    c.useAbility_OH("wand_stone", a.wSh, hand)

  // Heavy hammer logic
  :?c.canUseAbility("heavy_hammer") &
  ^ encounter.eliteMod = "plated"
    c.useAbility_TH("heavy_hammer",
    ^               "Guardian's Bane")
  :?c.canUseAbility("heavy_hammer") &
  ^ foe = "mechanical"
    c.useAbility_TH("heavy_hammer", Mjölnir)

  // Stun/Perma-stun logic
  :?s.inRange("grappling_hook") &
  ^ foe = "elite" &
  // don't interrupt bardiche
  ^ !c.isCasting("bardiche") &
  ^ (es.canDebuff("stun") |
    // stun time (frames) running out
  ^  (stunTime = math.Clamp(stunTime, 1, 11) &
     // not stunned with heavy hammer or Frost Wand
  ^   foe.debuffs.string ! "debuff_armor_fatigue" &
  ^   foe.debuffs.string ! "debuff_frost_stun"))
    a.ldtF("grappling")

  // permapot run
  :?encounter.eliteMod = "blessed" &
  ^ !c.isCasting("bardiche")
    itemSplash = foe.distance + 7

    // Debuff and unmake
    ?tracker.canTrack("Weaken")
      a.ldtF("magic debuff weaken")
    :?tracker.canTrack("Chill")
      a.ldtF("magic debuff chill")
    :?tracker.canTrack("Burn")
      a.ldtF("magic debuff burn")
    :
      itemSplash = 10
      a.ldtF("big sword unmake")

  // berserk potion
  :/* ?buffs.string = "ʘ" |
  // split hydras lose the Stable buff
  ^(encounter.eliteMod = "hydra" &
  ^ foe.buffs.string ! "stability") |
  // yellow and below
  ^loc.stars <= 15 */ /* |
  // more foes outside range
  ^(foe ! "elite" & screen.i > 1 &
  ^ (foe.count -
  ^ foe.GetCount(itemSplash))
  ^ > 0) */
    itemSplash = 10
    a.ldtF("big sword unmake")
  /*:
    equip Kubikiribocho*/

// ................ BOSS LOGIC ............... //

// Boss fight (Bronze Guardian)
:?foe = "phase"
  ?c.canKillCinderwisp(
  ^   a.cinderwispDmg_Default, 0) |
  // reached ignition cap
  ^c.isCinderwispCap(a.maxIgnitions_Boosted)
    c.devour("cinderwisp")

  // boss's hammer's stuck
  ?foe.state = 33 & foe.time < 180
    ?!s.inRange("triskelion")
      a.ldtF("default")

    :?c.canUseAbility("bardiche") & nRuns > 1
      c.useAbility_TH("bardiche", Kubikiribocho)
    :
      fight("normal")
  :
    canDash = false
    fight("normal")

// ................ 1V1 LOGIC ................ //

/* Tanky foe, use bardiche ability to lower
its hitpoints */
:?foe = "monarch" &
^(c.canUseAbility("staff_poison") |
^c.canUseAbility("bardiche"))
  ?c.canUseAbility("staff_poison")
    c.useAbility_TH("staff_poison", a.stPh)
  : // c.canUseAbility("bardiche")
    c.useAbility_TH("bardiche", Kubikiribocho)
:
  fight("normal")

//  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓  //
//  ┃ ▄▀▄▀▄▀▄▀▄▀ END OF "6-Mine" ▄▀▄▀▄▀▄▀▄▀ ┃  //
//  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  //
