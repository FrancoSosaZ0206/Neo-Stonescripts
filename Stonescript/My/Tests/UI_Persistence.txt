/* For more info about this file, see
UI_Persistence_README.md */

// ==============================================
// PUBLIC
// ==============================================

// functions:
func main()
  // Initialization / reset
  ?canInit()
    init()
  
  // Mainteinance
  ?canUpdate()
    update()

// ==============================================
// PRIVATE
// ==============================================

// imports:
var uimkr = import My/Lib/UI_Maker

// variables:
var pnl_UiPersistence = null
var txt_UiPersistence = null


// functions:

// Returns true on the first frame of every run
func canInit()
  return loc.begin | loc.loop

// --- Initializes the persistent UI (panel + text) ---
func init()
  // recycle old component(s)
  txt_UiPersistence = uimkr.destroy(txt_UiPersistence)
  pnl_UiPersistence = uimkr.destroy(pnl_UiPersistence)

  // Create container panel
  pnl_UiPersistence = ui.AddPanel()
  pnl_UiPersistence.w = 20
  pnl_UiPersistence.h = 5
  pnl_UiPersistence.color = "#333333"
  pnl_UiPersistence.anchor = "top_left"
  pnl_UiPersistence.dock = "top_left"
  pnl_UiPersistence.x = 1
  pnl_UiPersistence.y = 1

  // Add text element inside the panel
  txt_UiPersistence = ui.AddText("Waiting...") // placeholder string
  txt_UiPersistence.color = "#ffffff"

  pnl_UiPersistence.Add(txt_UiPersistence)

// Returns true if both pnl_UiPersistence and txt_UiPersistence are not null
func canUpdate()
  return pnl_UiPersistence & txt_UiPersistence

// --- Updates UI content every frame ---
func update()
  // Force visibility, even during suppression
  pnl_UiPersistence.visible = true
  txt_UiPersistence.visible = true

  // Dynamic content logic
  ?foe
    txt_UiPersistence.text = string.Format("Fighting: {0}\nHP: {1}/{2}",
    ^                           foe.name, foe.hp, foe.maxhp)

  :?harvest
    txt_UiPersistence.text = "Harvesting: " + harvest
  :
    txt_UiPersistence.text = "Exploring: " + loc.name
