/* For more info about this file, see
UI_Persistence_README.md */

// ==============================================
// PUBLIC
// ==============================================

// functions:
func main_ui_p()
  // Initialization / reset
  ?canInit()
    init()
  
  // Mainteinance
  ?canUpdate()
    update()

// ==============================================
// PRIVATE
// ==============================================

// imports:
var uimkr = import My/Lib/UI_Maker

// variables:
var pnl_ui_p = null
var txt_ui_p = null


// functions:

// Returns true on the first frame of every run
func canInit()
  return totaltime = 2*30 // loc.begin | loc.loop

// --- Initializes the persistent UI (panel + text) ---
func init()
  // recycle old component(s)
  ?pnl_ui_p
    ?txt_ui_p
      pnl_ui_p.Remove(txt_ui_p)
      txt_ui_p = null
    pnl_ui_p = uimkr.destroy(pnl_ui_p)

  // Add text element inside the panel
  txt_ui_p = ui.AddText()
  // txt_ui_p.text = "Waiting..." // placeholder string
  txt_ui_p.color = #ffffff

  // Create container panel
  pnl_ui_p = ui.AddPanel()
  pnl_ui_p.w = 20
  pnl_ui_p.h = 5
  pnl_ui_p.color = #333333
  pnl_ui_p.anchor = "top_left"
  pnl_ui_p.dock = "top_left"
  pnl_ui_p.x = 1
  pnl_ui_p.y = 1

  pnl_ui_p.Add(txt_ui_p)

// Returns true if both pnl_ui_p and txt_ui_p are not null
func canUpdate()
  return pnl_ui_p & txt_ui_p

// --- Updates UI content every frame ---
func update()
  // Force visibility, even during suppression
  pnl_ui_p.visible = true
  txt_ui_p.visible = true

  // Dynamic content logic
  ?foe
    txt_ui_p.text = string.Format("Fighting: {0}\nHP: {1}/{2}",
    ^                           foe.name, foe.hp, foe.maxhp)

  :?harvest
    txt_ui_p.text = "Harvesting: " + harvest
  :
    txt_ui_p.text = "Exploring: " + loc.name
