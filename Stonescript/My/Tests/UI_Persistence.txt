/* For more info about this file, see
UI_Persistence_README.md */

// ==============================================
// PUBLIC
// ==============================================

// functions:
func main()
  // Clear old UI elements (recycling/destruction)
  ?canDestroy()
    destroy()

  // Initialization / reset
  ?canConstruct()
    construct()
  
  // Mainteinance
  ?canUpdate()
    update()

// ==============================================
// PRIVATE
// ==============================================

// imports:
var uimkr = import My/Lib/UI_Maker

// variables:
var pnl = null
var txt = null


// functions:

// returns true if, at the start of each run,
// either pnl or txt are not null.
func canDestroy()
  return canConstruct() & pnl

// destroys this script's ui components, if needed.
func destroy()
  uimkr.destroy(pnl)
  pnl = null
  txt = null


// Returns true on the first frame of every run
func canConstruct()
  return loc.begin | loc.loop

// --- Initializes the persistent UI (panel + text) ---
func construct()
  // Create container panel
  pnl = ui.AddPanel()
  pnl.w = 20
  pnl.h = 5
  pnl.color = "#333333"
  pnl.anchor = "top_left"
  pnl.dock = "top_left"
  pnl.x = 1
  pnl.y = 1

  // Add text element inside the panel
  txt = ui.AddText("Waiting...") // placeholder string
  txt.color = "#ffffff"

  pnl.Add(txt)

// Returns true if both pnl and txt are not null
func canUpdate()
  return pnl & txt

// --- Updates UI content every frame ---
func update()
  // Force visibility, even during suppression
  pnl.visible = true
  txt.visible = true

  // Dynamic content logic
  ?foe
    txt.text = string.Format("Fighting: {0}\nHP: {1}/{2}",
    ^                           foe.name, foe.hp, foe.maxhp)

  :?harvest
    txt.text = "Harvesting: " + harvest
  :
    txt.text = "Exploring: " + loc.name
