//  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓  //
//  ┃ ▄▀▄▀▄▀▄▀▄▀ START OF "Times" ▀▄▀▄▀▄▀▄▀ ┃  //
//  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  //

// ///////////////// IMPORTS ///////////////// //

var uimkr = import My/Lib/UI_Maker
var u = import My/Lib/Utilities

// ///////////////// PUBLIC ////////////////// //

func main(x, y, colorHex, mode)
  // sanitize mode entries
  mode = string.ToLower(mode)

  ?canUpdate(mode)
    Update(mode)

    ?mode = "ui"
      UiMngr(x,y,colorHex,mode)

    :?mode = "print"
      Print(x,y,colorHex,mode,true)
    :
      u.showStrCtr(0,30,#red,ascii
ERROR
FILE: Times
FUNCTION: main
CAUSE: invalid <mode>:

@mode@
asciiend
      ^, false                      )

// ///////////////// PRIVATE ///////////////// //

// ................ Variables ................ //

var tt  = null
var pb  = null
var avg = null

var pnl = null
var txt = null

// ................ Functions ................ //

func canUpdate(mode)
  ?mode = "speedrun"
    return true
  :
    return loc.begin | (totaltime % u.sec = 0)
func Update(mode)
  ?mode = "speedrun" // update times every frame
    tt    = u.formatSpeedrun(totaltime)

    ?loc.begin | loc.loop
      pb  = u.formatSpeedrun(loc.bestTime)
      avg = u.formatSpeedrun(loc.averageTime)

  : // update times every second (30 frames)
    ?loc.begin | totaltime % u.sec = 0
      tt  = time.formatDigital(totaltime)

    ?loc.begin | loc.loop
      pb  = time.formatDigital(loc.bestTime)
      avg = time.formatDigital(loc.averageTime)

func ToString(size)
  var str = "####SPEED-O-METER####\n" +
  ^         "#·##·##·##·##·##·##·#\n" +
  ^         "#PB##{0}\n" +
  ^         "#AVG#{1}\n" +
  ^         "#CUR#{2}"

  ?size = "slim" | size = "small"
    /* TO DO: implement dynamic column paddings.
    var headers = ["☆", "≈", "▶"]
    var data    = [pb, avg, tt]*/

    str = "☆#{0}#|#≈#{1}#|#▶#{2}"

  :?!(size = "normal" | size = "default")
    str = null
    u.showStrCtr(0,30,#red,"ERROR\nFILE: Times\nFUNCTION: ToString\nCAUSE: invalid <size>:\n\n" + size, false)

  ?str
    str = string.Format(str, pb,avg,tt)

  return str
/* isAscii:
    true: prints the text in ascii format,
          replacing the whitespace characters
          with transparent characters.
    false: prints normally. Whitespaces
           will block the background. */
func Print(x, y, colorHex, mode)
  ?mode = "ascii"
    >`@x@,@y@,@colorHex@,ascii
@ToString(mode)@
asciiend
  :
    >`@x@,@y@,@colorHex@,@ToString(mode)@

func UiMngr(x, y, colorHex, size)
  ?loc.begin | loc.loop
    // DESTROY — Recycle old components
    txt = uimkr.destroy(txt)
    pnl = uimkr.destroy(pnl)


    // INIT — create UI if needed
    var isValidSize = true

    // Panel settings
    var panelAnchor = bottom_left
    var panelDock   = bottom_left
    var panelStyle  = -2

    // Textbox settings
    var str = ToString(size)
    var txtW = u.getLargestStr(string.Split(str, "\n"))
    var txtH = string.Split(str,"\n").Count()

    // default size: "normal"/"default"
    ?size = "slim"      | size = "small"
      panelStyle = -1
      txtW = string.Size(str)
      txtH = 1

    :?!(size = "normal" | size = "default")
      isValidSize = false
      u.showStrCtr(0,30,#red,ascii
ERROR
FILE: Times
FUNCTION: UiMngr
CAUSE: invalid <size>:

@size@
asciiend
      ^, false                     )

    ?isValidSize
      txt = ui.AddText(str)
      txt.x = 1
      txt.y = 1
      txt.w = txtW
      txt.h = txtH
      txt.anchor = "top_left"
      txt.dock = "top_left"
      txt.color = colorHex

      pnl = ui.AddPanel()
      pnl.Add(txt)
      pnl.x = x
      pnl.y = y
      pnl.w = txt.w + 2
      pnl.h = txt.h + 2
      pnl.anchor = panelAnchor
      pnl.dock = panelDock
      pnl.color = colorHex
      pnl.style = panelStyle


  // UPDATE
  ?pnl & txt
    pnl.visible = true
    txt.visible = true

    // Update content
    txt.text = ToString(size)

//  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓  //
//  ┃ ▄▀▄▀▄▀▄▀▄▀▄ END OF "Times" ▀▄▀▄▀▄▀▄▀▄ ┃  //
//  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  //