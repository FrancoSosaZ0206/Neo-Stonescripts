//  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓  //
//  ┃ ▄▀▄▀▄▀▄▀ START OF "Arsenal" ▄▀▄▀▄▀▄▀ ┃  //
//  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  //


/* // //////////// FILE INFO //////////////// //

Library with my personal weapons,
special stats and loadouts
Made by IronHawk (Tom Crow)

. ...................................... .

  Description

  This library just has some variables
  that minimalize the usage of my
  current arsenal and provide some
  info on their damage.

. ...................................... .

  Importing

  var a = new MyArsenal

. ...................................... .

  Usage

  ?foe.debuffs.count = maxIgnitions // example

. ...................................... .

  WARNING:

  There are constant variables that are subject to changes
  depending on the level or state of your arsenal
  (i.e. bladeRDmg). It is recommended to check
  and change these values accordingly for the functions
  to work as intended.

*/

/* //////////////// GLOSSARY //////////////// //

s = sword
bs = big sword
h = hammer
sh = shield
w = wand
st = staff
b = crossbow

P = poison
V = vigor
A = aether
F = fire
I = ice
S = stone

dmg = damage (D affix)
eff = buff/debuff
def = defensive (A affix)
h = hidden (staves and wands only)

D = dashing
T = towering
C = compound
R = repeating
Q = quarterstaff
B = bardiche
HH = heavy hammer */


// //////////////// IMPORTS ///////////////// //

var u = import My/Lib/Utilities
var c = import My/Lib/Combat


// /////////////// VARIABLES //////////////// //

// ************** ITEM ALIASES ************** //

/* ................ RENAMED ................. //

Unbroken Faith    = *max sword stone (enchanted: speed)
Broken Faith      = *max sword stone (enchanted: speed)
Mamba Negra       = *max sword poison D (enchanted: speed)
Dothaneel         = *max sword vigor D (enchanted: speed)
Void Slayer       = *max sword aether D (enchanted: speed)
Vantum Phoenix    = *max sword fire D (enchanted: speed)
Bifrost           = *max sword ice D (enchanted: speed/crit)

Soulfetcher       = *max sword vigor dL +21/ (enchanted: speed/L)

Speedy Hammer     = *max hammer stone
Kubikiribocho     = *max bardiche (enchanted: crit)
Mjölnir           = *max heavy_hammer (enchanted: damage)
Guardian's Wrath  = *max heavy_hammer shiny (enchanted: armor fatigue)

theVwand          = *max wand vigor D golden
Frosty Crust      = *max wand ice dI

Almafuerte        = *max sword ice dI (enchanted: speed)
Death's Kiss      = *max sword poison dP shiny (enchanted: speed)

............................................. */

// Elemental

// ................. POISON ................. //

var sPdmg   = "*max sword poison -dP"
var shPdef  = "*max shield poison -ap"
var shPeff  = "*max shield poison ap"
var hPeff   = "*max hammer poison aP"
var bPdmg   = "*max crossbow poison -dP"
var bPeff   = "*max crossbow poison dP"
var wPDmg   = "*max wand poison -dP -hidden"
var wPeff   = "*max wand poison dP -hidden"
var stPeff  = "*max staff poison dP -hidden"

// ................. VIGOR .................. //

var sVDmg   = "*max sword vigor -dL Spring24"
var sVeff   = "*max sword vigor dL -gold"
var shVdef  = "*max shield vigor -ah"
var shVeff  = "*max shield vigor ah"
var hVeff   = "*max hammer vigor ah"
var bVeff   = "*max crossbow vigor dL"
var bVDmg   = "*max crossbow vigor -dL"
var wVeff   = "*max wand vigor dL -hidden"
var wVDmg   = "*max wand vigor -dL -hidden" // 2nd
var stVeff  = "*max staff vigor dL -hidden"

// ................. AETHER ................. //

var sADmg   = "*max sword aether -dU"
var sAeff1  = "*max sword aether dU -big golden"
var sAeff2  = "*max sword aether dU -big -golden"
var bsAeff  = "*max sword aether dU big golden"
var shAdef  = "*max shield aether -au"
var shAeff  = "*max shield aether au"
var hAdef   = "*max hammer aether aU"
var bADmg   = "*max crossbow aether -dU"
var bAeff   = "*max crossbow aether dU"
var wAeff   = "*max wand aether dU -hidden"
var stAeff  = "*max staff aether dU -hidden"

// .................. FIRE .................. //

var sFeff   = "*max sword fire dF"
var sFDmg   = "*max sword fire -dF"
var shFdef  = "*max shield fire -af"
var shFeff  = "*max shield fire af"
var hFdef   = "*max hammer fire aF"
var bFDmg   = "*max crossbow fire -dF"
var bFeff   = "*max crossbow fire dF"
var wFDmg   = "*max wand fire -dF -hidden"
var wFeff   = "*max wand fire dF -hidden"
var stFeff  = "*max staff fire dF -hidden"

// .................. ICE ................... //

var sIeff   = "*max sword ice dI -prismatic"
var sIDmg   = "*max sword ice -dI"
var shIdef  = "*max shield ice -ai"
var shIeff  = "*max shield ice ai"
var hIdef   = "*max hammer ice aI"
var bIDmg   = "*max crossbow ice -dI"
var bIeff   = "*max crossbow ice dI"
var wIDmg   = "*max wand ice -dI -hidden"
var wIeff   = "*max wand ice dI +15 -hidden"
var stIeff  = "*max staff ice dI -hidden"

// .................. STONE ................. //

var shS     = "*max shield stone" // enchanted: dodge chance
var bS      = "*max crossbow stone"

// ................. HIDDEN ................. //

// Wands
var wPh     = "*max wand_hidden_poison"  // aka Plague Wand
var wVh     = "*max wand_hidden_vigor"   // aka Reset Wand
var wAh     = "*max wand_hidden_aether"  // aka Calamity Wand
var wFh     = "*max wand_hidden_fire"    // aka Explosive Wand
var wIh     = "*max wand_hidden_ice"     // aka Frost Wand
var wSh     = "*max wand_hidden_stone"   // aka Gravity Wand
// Staves
var stPh    = "*max staff_hidden_poison" // aka Berserker Staff
var stVh    = "*max staff_hidden_vigor"  // aka Prevention Staff
var stAh    = "*max staff_hidden_aether" // aka Grasping Staff
var stFh    = "*max staff_hidden_fire"   // aka Infernal Staff
var stIh    = "*max staff_hidden_ice"    // aka Eternity Staff
var stSh    = "*max staff_hidden_stone"  // aka Acrobatic Staff

// ............... ALTERNATE ................ //

var bAlt    = "*max crossbow golden"

// ............ SPECIAL WEAPONS ............. //

var shD     = "*max shield dashing HoH24"
var myQ     = "*max quarterstaff glitched"
var fastB   = "*max bardiche" // enchanted: speed
var bR      = "*max crossbow repeating golden"
var shC1    = "*max shield compound shiny" // enchanted: armor
var shC2    = "*max shield compound -shiny" // enchanted: armor/s
var shT     = "*max shield towering golden"

// ................ GROUPING ................ //

var burstingSwords = [
^     Soulfetcher     , Almafuerte,
^     Mamba Negra     , sPdmg,
^     Dothaneel       , sVDmg,
^     Void Slayer     , sADmg,
^     Vantum Phoenix  , sFDmg,
^     Bifrost         , sIDmg
^]

// ************* SPECIAL STATS ************** //

// ............. BUFFS/DEBUFFS .............. //

// amount of damage reduced by dP affix weapons
var weaken_default = 4
var weaken_boosted = 9 // Death's Kiss

// amount of health healed when using an ah affix weapon
var ah_heal = 2

// ............ COMPOUND SHIELD ............. //

var compoundMaxArmor_default = 14
var compoundMaxArmor_boosted = 35

// .............. CULTIST MASK .............. //

var mask_feebleCount = 5 // amount of feeble debuffs the Mask applies
var mask_feebleDmg = 9 // amount of damage each debuff deals to the foe
var mask_feebleReduction = 2 // amount of damage each debuff deducts from the foe

// ........ BLADE OF THE FALLEN GOD ......... //

var blade_Dmg = 310
var blade_RDmg = 170
var smiteDmg = 40 // smite flat bonus damage

// .............. SKELETON ARM .............. //

var armDmg = 56
var armRDmg = armDmg / 2
var maxPickPockets = "pick_pocket:4"

// ............... CINDERWISP ............... //

// multiplied by the amount of Ignition buffs:
var cinderwispDmg_Default = 36
var cinderwispDmg_Boosted = 96
var maxIgnitions_Default = "ignition:10"
var maxIgnitions_Boosted = "ignition:17"

// ............... VOIDWEAVER ............... //

var voidweaverDmg = 1
var voidweaverUnmakeChance = 0.14 // %
var voidweaverArmor = 1.35

// .............. HEAVY HAMMER .............. //

var heavyHammerDmg = 145

// ................ BARDICHE ................ //

/* ***************** WARNING **************** */
/*         These stats only apply for         */
/*              [Kubikiribocho]!              */

var bardicheDmg = 52
var bardicheCrit = 13.5
var bardicheRDmg = (bardicheDmg + 17) * bardicheCrit
/* ****************************************** */


// /////////////// FUNCTIONS //////////////// //

/* Loadout function.
- Acts as a custom loadout that works with my arsenal.
- Handles most (if not all) situations.
- Accounts for the permapot strategy. */
func ldtF(mode)
  // sanitize entry
  mode = string.ToLower(mode)

  ?mode = "start" | mode = "begin" | mode = "default"
    equipL triskelion
    equipR @shC1@

  :?mode = "engage"
    ?buffs.string ! "buff_inf_speed" & // infernal staff
    ^totaltime % 2 = 0 // every even frame
      ?(foe = "poison" & foe.buffs.string ! "adaptive_defense_ice") | mode = "ice"
        equipL @hIdef@
      :?(foe = "vigor" & foe.buffs.string ! "adaptive_defense_poison") | mode = "poison"
        equipL @hPeff@
      :?(foe = "aether" & foe.buffs.string ! "adaptive_defense_vigor") | mode = "vigor"
        equipL @hVeff@
      :?(foe = "fire" & foe.buffs.string ! "adaptive_defense_aether") | mode = "aether"
        equipL @hAdef@
      :?(foe = "ice" & foe.buffs.string ! "adaptive_defense_fire") | mode = "fire"
        equipL @hFdef@
      :
        equipL triskelion
    :
      equipL triskelion

    ?!c.permapotSetup
      ?foe ! "immune_to_debuff_chill" &
      ^foe.debuffs.string ! "chill" &
      ^encounter.eliteMod ! "tenacious"
        equipR @shIeff@
      :
        ?(foe = "poison" & foe.buffs.string ! "adaptive_defense_ice") | mode = "ice"
          equipL @shIdef@
        :?(foe = "vigor" & foe.buffs.string ! "adaptive_defense_poison") | mode = "poison"
          equipL @shPdef@
        :?(foe = "aether" & foe.buffs.string ! "adaptive_defense_vigor") | mode = "vigor"
          equipL @shVdef@
        :?(foe = "fire" & foe.buffs.string ! "adaptive_defense_aether") | mode = "aether"
          equipL @shAdef@
        :?(foe = "ice" & foe.buffs.string ! "adaptive_defense_fire") | mode = "fire"
          equipL @shFdef@
        :
          equipL @shC1@
  :?mode = "extend" | mode = "permapot"
    ?item.right ! "bardiche" &
    ^item.right ! "quarterstaff" &
    ^item.right ! "heavy_hammer"
      equipR mask
  :?mode = "bash" | mode = "dash"
    ?(foe = "poison" & foe.buffs.string ! "adaptive_defense_ice") | mode = "ice"
      equipL Bifrost
    :?(foe = "vigor" & foe.buffs.string ! "adaptive_defense_poison") | mode = "poison"
      equipL Mamba Negra
    :?(foe = "aether" & foe.buffs.string ! "adaptive_defense_vigor") | mode = "vigor"
      equipL Dothaneel
    :?(foe = "fire" & foe.buffs.string ! "adaptive_defense_aether") | mode = "aether"
      equipL Void Slayer
    :?(foe = "ice" & foe.buffs.string ! "adaptive_defense_fire") | mode = "fire"
      equipL Vantum Phoenix
    :
      equipL Bifrost
      // Unbroken Faith

    ?mode = "bash"
      equipR bashing shield
    :?mode = "dash"
      equipR @shD@

  :?mode = "escape" | mode = "mind" | mode = "mindstone"
    equipL mind

    ?!c.permapotSetup
      ?(foe = "poison" & foe.buffs.string ! "adaptive_defense_ice") | mode = "ice"
        equipR @shIdef@
      :?(foe = "vigor" & foe.buffs.string ! "adaptive_defense_poison") | mode = "poison"
        equipR @shPdef@
      :?(foe = "aether" & foe.buffs.string ! "adaptive_defense_vigor") | mode = "vigor"
        equipR @shVdef@
      :?(foe = "fire" & foe.buffs.string ! "adaptive_defense_aether") | mode = "aether"
        equipR @shAdef@
      :?(foe = "ice" & foe.buffs.string ! "adaptive_defense_fire") | mode = "fire"
        equipR @shFdef@
      :
        equipR @shT@
  :?mode = "magnet" | mode = "star" | mode = "star stone"
    ?c.permapotSetup
      equipL star
    :
      equipL triskelion
      equipR star
  :?mode = "harvest"
    ?loc = "rocky_plateau"
      equip shovel
    :?loc = "deadwood_valley"
      equipL moon
      equipR hatchet


  :?mode = "defense" // evade/buff/debuff when hit
    // Special cases (both left and right are dedicated to the loadout's goal)
    ?mode = "heal"
      equipL @hVeff@
      ?!c.permapotSetup
        equipR @shVeff@
    :?mode = "unmake" // unmake when hit
      ?foe.count > 1
        equipL @wAeff@
      :
        equipL @sAeff1@
      
      ?!c.permapotSetup
        equipR @shAeff@

    :?mode = "regen"
      equipL triskelion

      ?!c.permapotSetup
        ?mode = "max" | mode = "slow"
          equipR @shC1@
        :?mode = "fast"
          equipR @shC2@

    :
      // Left hand
      ?foe.count > 1
        ?(foe = "poison" & foe.buffs.string ! "adaptive_defense_ice") | mode = "ice"
          equipL @wIDmg@
        :?(foe = "vigor" & foe.buffs.string ! "adaptive_defense_poison") | mode = "poison"
          equipL @wPDmg@
        :?(foe = "aether" & foe.buffs.string ! "adaptive_defense_vigor") | mode = "vigor"
          equipL @wVDmg@
        :?(foe = "fire" & foe.buffs.string ! "adaptive_defense_aether") | mode = "aether"
          equipL @wADmg@
        :?(foe = "ice" & foe.buffs.string ! "adaptive_defense_fire") | mode = "fire"
          equipL @wFDmg@
        : // foe = "stone"
          equipL @wSh@
      :
        ?(foe = "poison" & foe.buffs.string ! "adaptive_defense_ice") | mode = "ice"
          equipL Bifrost
        :?(foe = "vigor" & foe.buffs.string ! "adaptive_defense_poison") | mode = "poison"
          equipL Mamba Negra
        :?(foe = "aether" & foe.buffs.string ! "adaptive_defense_vigor") | mode = "vigor"
          equipL Dothaneel
        :?(foe = "fire" & foe.buffs.string ! "adaptive_defense_aether") | mode = "aether"
          equipL Void Slayer
        :?(foe = "ice" & foe.buffs.string ! "adaptive_defense_fire") | mode = "fire"
          equipL Vantum Phoenix
        : // foe = "stone"
          equipL Bifrost // Unbroken Faith

      // Right hand
      ?mode = "tank"
        equipR @shT@
      :?mode = "stun"
        equipR @shC1@

      :?mode = "buff" | mode = "debuff"
        ?mode = "poison" | mode = "empower"
          equipR @shPeff@
        :?mode = "vigor" | mode = "heal"
          equipR @shVeff@
        :?mode = "aether" | mode = "unmake"
          equipR @shAeff@
        :?mode = "fire" | mode = "burn"
          equipR @shFeff@
        :?mode = "ice" | mode = "chill"
          equipR @shIeff@

      :?!c.permapotSetup
        ?(foe = "poison" & foe.buffs.string ! "adaptive_defense_ice") | mode = "ice"
          equipR @shIdef@
        :?(foe = "vigor" & foe.buffs.string ! "adaptive_defense_poison") | mode = "poison"
          equipR @shPdef@
        :?(foe = "aether" & foe.buffs.string ! "adaptive_defense_vigor") | mode = "vigor"
          equipR @shVdef@
        :?(foe = "fire" & foe.buffs.string ! "adaptive_defense_aether") | mode = "aether"
          equipR @shAdef@
        :?(foe = "ice" & foe.buffs.string ! "adaptive_defense_fire") | mode = "fire"
          equipR @shFdef@
        : // foe = "stone"
          equipR @shS@

  :?mode = "melee"
    ?mode = "aoe" | mode = "splash" // TO DO: big swords
      // Special cases:
      ?mode = "heal"
        ?c.permapotSetup
          // equipL 
        :
          ?(foe = "poison" & foe.buffs.string ! "adaptive_defense_ice") | mode = "ice"
            // c.doMoondial(,)
          :?(foe = "vigor" & foe.buffs.string ! "adaptive_defense_poison") | mode = "poison"
            // c.doMoondial(,)
          :?(foe = "aether" & foe.buffs.string ! "adaptive_defense_vigor") | mode = "vigor"
            // c.doMoondial(,)
          :?(foe = "fire" & foe.buffs.string ! "adaptive_defense_aether") | mode = "aether"
            // c.doMoondial(,)
          :?(foe = "ice" & foe.buffs.string ! "adaptive_defense_fire") | mode = "fire"
            // c.doMoondial(,)
          : // foe = "stone"
            // c.doMoondial(,)
      :?mode = "unmake"
        ?c.permapotSetup
          equipL @bsAeff@
        :
          ?(foe = "poison" & foe.buffs.string ! "adaptive_defense_ice") | mode = "ice"
            // c.doMoondial(,)
          :?(foe = "vigor" & foe.buffs.string ! "adaptive_defense_poison") | mode = "poison"
            // c.doMoondial(,)
          :?(foe = "aether" & foe.buffs.string ! "adaptive_defense_vigor") | mode = "vigor"
            // c.doMoondial(,)
          :?(foe = "fire" & foe.buffs.string ! "adaptive_defense_aether") | mode = "aether"
            // c.doMoondial(,)
          :?(foe = "ice" & foe.buffs.string ! "adaptive_defense_fire") | mode = "fire"
            // c.doMoondial(,)
          : // foe = "stone"
            // c.doMoondial(,)
      :?mode = "debuff"
        ?c.permapotSetup // all left hand
          ?c.canApplyChill()
            // equipL 
          :?c.canApplyWeaken()
            // equipL 
          :?c.canApplyBurn()
            // equipL 

        : // !c.permapotSetup

          // Left hand:
          ?c.canApplyWeaken()
            // equipL 
            //'
          :?c.canApplyBurn()
            // equipL 
          :?c.canApplyChill()
            // equipL 

          // Right hand:
          ?c.canApplyChill()
            // equipR 
      :?mode = "dmg"
        ?c.permapotSetup // all left hand
          ?(foe = "poison" & foe.buffs.string ! "adaptive_defense_ice") | mode = "ice"
            // equipL 
          :?(foe = "vigor" & foe.buffs.string ! "adaptive_defense_poison") | mode = "poison"
            // equipL 
          :?(foe = "aether" & foe.buffs.string ! "adaptive_defense_vigor") | mode = "vigor"
            // equipL 
          :?(foe = "fire" & foe.buffs.string ! "adaptive_defense_aether") | mode = "aether"
            // equipL 
          :?(foe = "ice" & foe.buffs.string ! "adaptive_defense_ice") | mode = "fire"
            // equipL 
          : // foe = "stone"
            // equipL 

        : // !c.permapotSetup
          ?(foe = "poison" & foe.buffs.string ! "adaptive_defense_ice") | mode = "ice"
            // c.doMoondial(,)
          :?(foe = "vigor" & foe.buffs.string ! "adaptive_defense_poison") | mode = "poison"
            // c.doMoondial(,)
          :?(foe = "aether" & foe.buffs.string ! "adaptive_defense_vigor") | mode = "vigor"
            // c.doMoondial(,)
          :?(foe = "fire" & foe.buffs.string ! "adaptive_defense_aether") | mode = "aether"
            // c.doMoondial(,)
          :?(foe = "ice" & foe.buffs.string ! "adaptive_defense_fire") | mode = "fire"
            // c.doMoondial(,)
          : // foe = "stone"
            // c.doMoondial(,)

    :?mode = "1v1"
      // Special cases:
      ?mode = "heal"
        ?c.permapotSetup
          equipL Soulfetcher
        :
          ?(foe = "poison" & foe.buffs.string ! "adaptive_defense_ice") | mode = "ice"
            c.doMoondial(Bifrost /*sVeff*/, Soulfetcher)
          :?(foe = "vigor" & foe.buffs.string ! "adaptive_defense_poison") | mode = "poison"
            c.doMoondial(Mamba Negra /*sVeff*/, Soulfetcher)
          :?(foe = "aether" & foe.buffs.string ! "adaptive_defense_vigor") | mode = "vigor"
            c.doMoondial(Dothaneel /*sVeff*/, Soulfetcher)
          :?(foe = "fire" & foe.buffs.string ! "adaptive_defense_aether") | mode = "aether"
            c.doMoondial(Void Slayer /*sVeff*/, Soulfetcher)
          :?(foe = "ice" & foe.buffs.string ! "adaptive_defense_fire") | mode = "fire"
            c.doMoondial(Vantum Phoenix /*sVeff*/, Soulfetcher)
          : // foe = "stone
            c.doMoondial(Bifrost /*Broken Faith*/ /*sVeff*/, Soulfetcher)
      :?mode = "unmake"
        ?c.permapotSetup
          equipL @sAeff1@
        :
          // put a 2nd dU sword when we have it
          ?(foe = "poison" & foe.buffs.string ! "adaptive_defense_ice") | mode = "ice"
            c.doMoondial(sAeff1, Bifrost) // sAeff2
          :?(foe = "vigor" & foe.buffs.string ! "adaptive_defense_poison") | mode = "poison"
            c.doMoondial(sAeff1, Mamba Negra) // sAeff2
          :?(foe = "aether" & foe.buffs.string ! "adaptive_defense_vigor") | mode = "vigor"
            c.doMoondial(sAeff1, Dothaneel) // sAeff2
          :?(foe = "fire" & foe.buffs.string ! "adaptive_defense_aether") | mode = "aether"
            c.doMoondial(sAeff1, Void Slayer) // sAeff2
          :?(foe = "ice" & foe.buffs.string ! "adaptive_defense_fire") | mode = "fire"
            c.doMoondial(sAeff1, Vantum Phoenix) // sAeff2
          : // foe = "stone
            c.doMoondial(sAeff1, Bifrost /*Broken Faith*/) // sAeff2
      :?mode = "debuff"
        ?c.permapotSetup // all left hand
          ?c.canApplyChill()
            equipL Almafuerte
          :?c.canApplyWeaken()
            equipL Death's Kiss
            //'
          :?c.canApplyBurn()
            equipL @sFeff@

        : // !c.permapotSetup
          var sDmg = null
          ?(foe = "poison" & foe.buffs.string ! "adaptive_defense_ice") | mode = "ice"
            sDmg = Bifrost
          :?(foe = "vigor" & foe.buffs.string ! "adaptive_defense_poison") | mode = "poison"
            sDmg = Mamba Negra
          :?(foe = "aether" & foe.buffs.string ! "adaptive_defense_vigor") | mode = "vigor"
            sDmg = Dothaneel
          :?(foe = "fire" & foe.buffs.string ! "adaptive_defense_aether") | mode = "aether"
            sDmg = Void Slayer
          :?(foe = "ice" & foe.buffs.string ! "adaptive_defense_fire") | mode = "fire"
            sDmg = Vantum Phoenix
          : // foe = "stone"
            sDmg = Bifrost // Unbroken Faith

          ?c.canApplyChill()
            c.doMoondial(sDmg, Almafuerte)
          :?c.canApplyWeaken() | c.canApplyBurn()
            equipL Death's Kiss
            //'
            equipR @sFeff@
      :?mode = "dmg"
        ?c.permapotSetup // all left hand
          ?(foe = "poison" & foe.buffs.string ! "adaptive_defense_ice") | mode = "ice"
            equipL Bifrost
          :?(foe = "vigor" & foe.buffs.string ! "adaptive_defense_poison") | mode = "poison"
            equipL Mamba Negra
          :?(foe = "aether" & foe.buffs.string ! "adaptive_defense_vigor") | mode = "vigor"
            equipL Dothaneel
          :?(foe = "fire" & foe.buffs.string ! "adaptive_defense_aether") | mode = "aether"
            equipL Void Slayer
          :?(foe = "ice" & foe.buffs.string ! "adaptive_defense_fire") | mode = "fire"
            equipL Vantum Phoenix
          : // foe = "stone"
            equipL Bifrost // Unbroken Faith

        : // !c.permapotSetup
          ?(foe = "poison" & foe.buffs.string ! "adaptive_defense_ice") | mode = "ice"
            c.doMoondial(Bifrost, sIDmg)
          :?(foe = "vigor" & foe.buffs.string ! "adaptive_defense_poison") | mode = "poison"
            c.doMoondial(Mamba Negra, sPdmg)
          :?(foe = "aether" & foe.buffs.string ! "adaptive_defense_vigor") | mode = "vigor"
            c.doMoondial(Dothaneel, sVDmg)
          :?(foe = "fire" & foe.buffs.string ! "adaptive_defense_aether") | mode = "aether"
            c.doMoondial(Void Slayer, sADmg)
          :?(foe = "ice" & foe.buffs.string ! "adaptive_defense_fire") | mode = "fire"
            c.doMoondial(Vantum Phoenix, sFDmg)
          : // foe = "stone"
            c.doMoondial(Bifrost /*Unbroken Faith*/, sFDmg /*Broken Faith*/)

  :?mode = "magic" // wands and staves
    ?mode = "heal"
      ?c.permapotSetup
        equipL @wVeff@
      :
        // equip @stVeff@
        equipL moon
        equipR @wVeff@
    :?mode = "unmake"
      ?c.permapotSetup
        equipL @wAeff@
      :
        equipL moon
        equip @wAeff@
        // equip @stAeff@
    :?mode = "debuff"
      ?c.permapotSetup
        ?c.canApplyChill()
          equipL Frosty Crust
        :?c.canApplyWeaken()
          equipL @wPeff@
        :?c.canApplyBurn()
          equipL @wFeff@
      :
        ?c.canApplyChill()
          equip @stIeff@
        :?c.canApplyWeaken()
          equip @stPeff@
        :?c.canApplyBurn()
          equip @stFeff@

    :?mode = "dmg"
      ?c.permapotSetup // all left hand
        ?(foe = "poison" & foe.buffs.string ! "adaptive_defense_ice") | mode = "ice"
          equipL @wIDmg@
        :?(foe = "vigor" & foe.buffs.string ! "adaptive_defense_poison") | mode = "poison"
          equipL @wPDmg@
        :?(foe = "aether" & foe.buffs.string ! "adaptive_defense_vigor") | mode = "vigor"
          equipL @wVDmg@
        :?(foe = "fire" & foe.buffs.string ! "adaptive_defense_aether") | mode = "aether"
          equipL @wADmg@
        :?(foe = "ice" & foe.buffs.string ! "adaptive_defense_fire") | mode = "fire"
          equipL @wFDmg@
        : // foe = "stone"
          equipL Frosty Crust // @wSDmg@
      : // !c.permapotSetup
        equip @bAeff@

        /* ?(foe = "poison" & foe.buffs.string ! "adaptive_defense_ice") | mode = "ice"
          equip @stIDmg@
        :?(foe = "vigor" & foe.buffs.string ! "adaptive_defense_poison") | mode = "poison"
          equip @stPDmg@
        :?(foe = "aether" & foe.buffs.string ! "adaptive_defense_vigor") | mode = "vigor"
          equip @stVDmg@
        :?(foe = "fire" & foe.buffs.string ! "adaptive_defense_aether") | mode = "aether"
          equip @stADmg@
        :?(foe = "ice" & foe.buffs.string ! "adaptive_defense_fire") | mode = "fire"
          equip @stFDmg@
        : // foe = "stone"
          equip @stIeff@ // @stSDmg@ */

  :?mode = "ranged" // crossbows
    ?c.permapotSetup
      equipL @bAlt@

    : // !c.permapotSetup
      ?mode = "heal"
        equipL @wVeff@
        equipR Frosty Crust
        // @bVeff@
      :?mode = "unmake"
        equip @bAeff@

      :?mode = "debuff"
        ?c.canApplyChill()
          equip @stIeff@
          // @bIeff@
        :?c.canApplyWeaken()
          equip @stPeff@
          // @bPeff@
        :?c.canApplyBurn()
          equip @stFeff@
          // @bFeff@

      :?mode = "dmg" // TO DO: Uncomment when we have all D crossbows maxed out
          equip @bAeff@

          /*?(foe = "poison" & foe.buffs.string ! "adaptive_defense_ice") | mode = "ice"
            equip @bIDmg@
          :?(foe = "vigor" & foe.buffs.string ! "adaptive_defense_poison") | mode = "poison"
            equip @bPdmg@
          :?(foe = "aether" & foe.buffs.string ! "adaptive_defense_vigor") | mode = "vigor"
            equip @bVDmg@
          :?(foe = "fire" & foe.buffs.string ! "adaptive_defense_aether") | mode = "aether"
            equip @bFDmg@
          :?(foe = "ice" & foe.buffs.string ! "adaptive_defense_fire") | mode = "fire"
            equip @bIDmg@
          : // foe = "stone"
            equip @bS@ */

  :
    u.showStrCtr(0,30,#red,"ERROR\nFILE: Arsenal\nFUNCTION: ldtF\nCAUSE: unknown <mode>:\n\n" + mode, false)

  return

func canSmartDash()
  return c.canUseAbility("bash") | c.canUseAbility("dash")
func smartDash()
  ?c.canUseAbility("bash")
    ldtF("bash")
  :?c.canUseAbility("dash")
    ldtF("dash")


//  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓  //
//  ┃ ▄▀▄▀▄▀▄▀▄ END OF "Arsenal" ▀▄▀▄▀▄▀▄▀ ┃  //
//  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  //