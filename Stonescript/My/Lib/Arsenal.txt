//  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓  //
//  ┃ ▄▀▄▀▄▀▄▀ START OF "Arsenal" ▄▀▄▀▄▀▄▀ ┃  //
//  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  //

/* // //////////// FILE INFO //////////////// //

Library with my personal weapons,
special stats and loadouts
Made by IronHawk (Tom Crow)

. ................ Description ............... .

  This library has some variables and functions
  that minimalize the usage of my current
  arsenal and provide some info on their damage.

. ................. Importing ................ .

  var a = new MyArsenal

. ................... Usage .................. .

  ?foe.debuffs.count = maxIgnitions // example

* ****************** WARNING ***************** *

  There are constant variables that are subject
  to changes depending on the level or state of
  your arsenal (i.e. bladeRDmg).
  
  It is recommended to check and change these
  values accordingly for the functions to work
  as intended.

* ******************************************** *

Enjoy! ;) */

/* //////////////// GLOSSARY //////////////// //

s = sword
bs = big sword
h = hammer
sh = shield
w = wand
st = staff
b = crossbow

P = poison
V = vigor
A = aether
F = fire
I = ice
S = stone

dmg = damage (D affix)
eff = buff/debuff
def = defensive (A affix)
h = hidden (staves and wands only)

D = dashing
T = towering
C = compound
R = repeating
Q = quarterstaff
B = bardiche
HH = heavy hammer */

// //////////////// IMPORTS ///////////////// //

var u = import My/Lib/Utilities
var c = import My/Lib/Combat
var s = import My/Lib/Stats

// /////////////// VARIABLES //////////////// //

// ************** ITEM ALIASES ************** //

/* ................ RENAMED ................. //

Unbroken Faith      = *max sword stone (enchanted: speed)
Broken Faith        = *max sword stone (enchanted: speed)
Mamba Negra         = *max sword poison D (enchanted: speed)
Dothaneel           = *max sword vigor D (enchanted: speed)
Void Slayer         = *max sword aether D (enchanted: speed)
Vantum Phoenix      = *max sword fire D (enchanted: speed)
Bifrost             = *max sword ice D (enchanted: speed/crit)

Death's Kiss        = *max sword -big poison dP shiny (enchanted: speed)
Soulfetcher         = *max sword -big vigor dL +21/ (enchanted: speed/L)
Existential Crisis  = *max sword -big aether dU +21 (enchanted: speed)
Almafuerte          = *max sword -big ice dI (enchanted: speed)

theVwand            = *max wand vigor D golden
Frosty Crust        = *max wand ice dI

Subspace Bubble     = *max shield dashing HoH24
Speedy Hammer       = *max hammer stone
Kubikiribocho       = *max bardiche (enchanted: crit/damage)
Mjölnir             = *max heavy_hammer (enchanted: damage)
Guardian's Wrath    = *max heavy_hammer shiny (enchanted: armor fatigue)

............................................. */

// Elemental

// ................. POISON ................. //

var sPdmg   = "*max sword -big poison -dP" // 2nd
var bsPdmg  = "*max sword big poison -dP"
var bsPeff  = "*max sword big poison dP"
var hPeff   = "*max hammer poison aP"
var shPdef  = "*max shield poison -ap"
var shPeff  = "*max shield poison ap"
var bPdmg   = "*max crossbow poison -dP"
var bPeff   = "*max crossbow poison dP"
var wPDmg   = "*max wand poison -dP -hidden"
var wPeff   = "*max wand poison dP -hidden"
var stPeff  = "*max staff poison dP -hidden"

// ................. VIGOR .................. //

var sVDmg   = "*max sword -big vigor -dL Spring24" // 2nd
var sVeff   = "*max sword -big vigor dL -gold" // 2nd (enchanted: speed)
var bsVDmg  = "*max sword vigor -dL"
var bsVeff  = "*max sword vigor dL"
var hVeff   = "*max hammer vigor ah"
var shVdef  = "*max shield vigor -ah"
var shVeff  = "*max shield vigor ah"
var bVeff   = "*max crossbow vigor dL"
var bVDmg   = "*max crossbow vigor -dL"
var wVeff   = "*max wand vigor dL -hidden"
var wVDmg   = "*max wand vigor -dL -hidden" // 2nd
var stVeff  = "*max staff vigor dL -hidden"

// ................. AETHER ................. //

var sADmg   = "*max sword -big aether -dU" // 2nd
var sAeff2  = "*max sword -big aether dU -golden" // 2nd
var bsAdmg  = "*max sword big aether -dU -golden"
var bsAeff  = "*max sword big aether dU shiny" // enchanted: speed
var bsAeff2 = "*max sword big aether dU -shiny" // enchanted: speed
var hAeff   = "*max hammer aether aU"
var shAdef  = "*max shield aether -au"
var shAeff  = "*max shield aether au"
var bADmg   = "*max crossbow aether -dU"
var bAeff   = "*max crossbow aether dU"
var wAeff   = "*max wand aether dU -hidden"
var stAeff  = "*max staff aether dU -hidden"

// .................. FIRE .................. //

var sFDmg   = "*max sword -big fire -dF"
var sFeff   = "*max sword -big fire dF"
var bsFDmg  = "*max sword big fire -dF"
var bsFeff  = "*max sword big fire dF"
var hFeff   = "*max hammer fire aF"
var shFdef  = "*max shield fire -af"
var shFeff  = "*max shield fire af"
var bFDmg   = "*max crossbow fire -dF"
var bFeff   = "*max crossbow fire dF"
var wFDmg   = "*max wand fire -dF -hidden" // enchanted: speed
var wFeff   = "*max wand fire dF -hidden"
var stFeff  = "*max staff fire dF -hidden"

// .................. ICE ................... //

var sIeff   = "*max sword -big ice dI -prismatic"
var sIDmg   = "*max sword -big ice -dI"
var bsIeff  = "*max sword big ice dI"
var bsIDmg  = "*max sword big ice -dI"
var hIeff   = "*max hammer ice aI"
var shIdef  = "*max shield ice -ai"
var shIeff  = "*max shield ice ai"
var bIDmg   = "*max crossbow ice -dI"
var bIeff   = "*max crossbow ice dI"
var wIDmg   = "*max wand ice -dI -hidden"
var wIeff   = "*max wand ice dI +15 -hidden"
var stIeff  = "*max staff ice dI -hidden"

// .................. STONE ................. //

var shS     = "*max shield stone" // enchanted: dodge chance
var bS      = "*max crossbow stone socketed"

// ................. HIDDEN ................. //

// Wands
var wPh     = "*max wand_hidden_poison"  // aka Plague Wand
var wVh     = "*max wand_hidden_vigor"   // aka Reset Wand
var wAh     = "*max wand_hidden_aether"  // aka Calamity Wand
var wFh     = "*max wand_hidden_fire"    // aka Explosive Wand
var wIh     = "*max wand_hidden_ice"     // aka Frost Wand
var wSh     = "*max wand_hidden_stone"   // aka Gravity Wand

// Staves
var stPh    = "*max staff_hidden_poison" // aka Berserker Staff
var stVh    = "*max staff_hidden_vigor"  // aka Prevention Staff
var stAh    = "*max staff_hidden_aether" // aka Grasping Staff
var stFh    = "*max staff_hidden_fire"   // aka Infernal Staff
var stIh    = "*max staff_hidden_ice"    // aka Eternity Staff
var stSh    = "*max staff_hidden_stone"  // aka Acrobatic Staff

// ............... ALTERNATE ................ //

var bAlt    = "*max crossbow golden -socketed"

// ............ SPECIAL WEAPONS ............. //

var myQ     = "*max quarterstaff"
var fastB   = "*max bardiche" // enchanted: speed
var bR      = "*max crossbow repeating golden" // enchanted: pierce
var shC1    = "*max shield compound shiny" // enchanted: armor
var shC2    = "*max shield compound -shiny" // enchanted: armor/s
var shT     = "*max shield towering golden"

// ................ GROUPING ................ //

var burstingSwords = [
^     Soulfetcher     , Almafuerte,
^     Mamba Negra     , sPdmg,
^     Dothaneel       , sVDmg,
^     Void Slayer     , sADmg,
^     Vantum Phoenix  , sFDmg,
^     Bifrost         , sIDmg
^]

// ************* SPECIAL STATS ************** //

// ............. BUFFS/DEBUFFS .............. //

// amount of damage reduced by dP affix weapons
var weaken_default = 4
var weaken_boosted = 9 // Death's Kiss

// amount of health healed when using an ah affix weapon
var ah_heal = 2

// Plague Wand's enchantment level
var plagueLvl = 11
// Berserker Staff's enchantment level
var berserkerLvl = 21

// ............ COMPOUND SHIELD ............. //

var compoundMaxArmor_default = 14
var compoundMaxArmor_boosted = 30

// .............. CULTIST MASK .............. //

// mask's current star level
var maskLvl = 9

// ........ BLADE OF THE FALLEN GOD ......... //

var bladeDmg = 310
var bladeDmgR = 170
var smiteDmg = 40 // smite flat bonus damage

// .............. SKELETON ARM .............. //

var armDmg = 56
var armDmgR = armDmg / 2
var armEffCap = "pick_pocket:4"

// ............... CINDERWISP ............... //

// multiplied by the amount of Ignition buffs:
var cinderwispDmg_Default = 36
var cinderwispDmg_Boosted = 96
var maxIgnitions_Default = "ignition:10"
var maxIgnitions_Boosted = "ignition:17"

// ............... VOIDWEAVER ............... //

var voidweaverDmg_Default = 1
// var voidweaverDmg_Boosted = 1
var voidweaverUnmakeChance = 0.14 // %
var voidweaverArmor_Default = 0.7
var voidweaverArmor_Boosted = 1.35

// .............. HEAVY HAMMER .............. //

var heavyHammerDmg = 145

// ................ BARDICHE ................ //

// Assuming *max level
var bardicheDmg_Default = 52
var bardicheDmg_Boosted = 107
var bardicheMult_Default = 4
var bardicheMult_Boosted = 13.5

// ............ FUNCTION RELATED ............ //

var chillCount = null
var weakenCount = null
var chillLimit = null
var weakenLimit = null

var effCount = 0
var effLimit = 0
var canIncrease = true

// /////////////// FUNCTIONS //////////////// //

/* Loadout function.
- Acts as a custom loadout that works with my arsenal.
- Handles most (if not all) situations.
- Accounts for the permapot strategy. */
func ldtF(mode)
  // sanitize entry
  mode = string.ToLower(mode)

  ?mode = "start" | mode = "begin" | mode = "default"
    equipL triskelion
    equipR @shC1@

  :?mode = "engage"
    // Left hand:
    ?totaltime % 2 = 0 | // every even frame
    ^buffs.string = "buff_inf_speed" // infernal staff
      equipL triskelion
    :
      ?(foe = "poison" & foe.buffs.string ! "adaptive_defense_ice") | mode = "ice"
        equipL @hIeff@
      :?(foe = "vigor" & foe.buffs.string ! "adaptive_defense_poison") | mode = "poison"
        equipL @hPeff@
      :?(foe = "aether" & foe.buffs.string ! "adaptive_defense_vigor") | mode = "vigor"
        equipL @hVeff@
      :?(foe = "fire" & foe.buffs.string ! "adaptive_defense_aether") | mode = "aether"
        equipL @hAeff@
      :?(foe = "ice" & foe.buffs.string ! "adaptive_defense_fire") | mode = "fire"
        equipL @hFeff@
      :
        equipL @hVeff@

    // Right hand:
    ?!c.permapotSetup
      /*?c.canApplyChill(1)
        equipR @shIeff@
      :*/
      ?(foe = "poison" & foe.buffs.string ! "adaptive_defense_ice") | mode = "ice"
        equipR @shIdef@
      :?(foe = "vigor" & foe.buffs.string ! "adaptive_defense_poison") | mode = "poison"
        equipR @shPdef@
      :?(foe = "aether" & foe.buffs.string ! "adaptive_defense_vigor") | mode = "vigor"
        equipR @shVdef@
      :?(foe = "fire" & foe.buffs.string ! "adaptive_defense_aether") | mode = "aether"
        equipR @shAdef@
      :?(foe = "ice" & foe.buffs.string ! "adaptive_defense_fire") | mode = "fire"
        equipR @shFdef@
      :
        ?armor < compoundMaxArmor_default
          equipR @shC2@
        : // armor = math.Clamp(armor, compoundMaxArmor_default, compoundMaxArmor_boosted)
          equipR @shC1@

  :?mode = "extend" | mode = "permapot"
    ?item.right ! "bardiche" &
    ^item.right ! "quarterstaff" &
    ^item.right ! "heavy_hammer"
      equipR mask
  :?mode = "bash" | mode = "dash"
    ?(foe = "poison" & foe.buffs.string ! "adaptive_defense_ice") | mode = "ice"
      equipL Bifrost
    :?(foe = "vigor" & foe.buffs.string ! "adaptive_defense_poison") | mode = "poison"
      equipL Mamba Negra
    :?(foe = "aether" & foe.buffs.string ! "adaptive_defense_vigor") | mode = "vigor"
      equipL Dothaneel
    :?(foe = "fire" & foe.buffs.string ! "adaptive_defense_aether") | mode = "aether"
      equipL Void Slayer
    :?(foe = "ice" & foe.buffs.string ! "adaptive_defense_fire") | mode = "fire"
      equipL Vantum Phoenix
    :
      equipL Bifrost
      // Unbroken Faith

    ?mode = "bash"
      equipR bashing shield
    :?mode = "dash"
      equipR Subspace Bubble
  :?mode = "grappling"
    equipL grappling
    ?!c.permapotSetup
      equipR moon

  :?mode = "escape" | mode = "mind" | mode = "mindstone"
    equipL mind

    ?!c.permapotSetup
      ?(foe = "poison" & foe.buffs.string ! "adaptive_defense_ice") | mode = "ice"
        equipR @shIdef@
      :?(foe = "vigor" & foe.buffs.string ! "adaptive_defense_poison") | mode = "poison"
        equipR @shPdef@
      :?(foe = "aether" & foe.buffs.string ! "adaptive_defense_vigor") | mode = "vigor"
        equipR @shVdef@
      :?(foe = "fire" & foe.buffs.string ! "adaptive_defense_aether") | mode = "aether"
        equipR @shAdef@
      :?(foe = "ice" & foe.buffs.string ! "adaptive_defense_fire") | mode = "fire"
        equipR @shFdef@
      :
        equipR @shT@
  :?mode = "magnet" | mode = "star" | mode = "star stone"
    ?c.permapotSetup
      equipL star
    :
      ?pickup = "treasure"
        equipL star
        ?armor < compoundMaxArmor_default
          equipR @shC2@
        :
          equipR @shC1@
      :
        equipL triskelion
        equipR star
  :?mode = "harvest"
    ?loc = "rocky_plateau"
      equip shovel
    :?loc = "deadwood_valley"
      equipL moon
      equipR hatchet

  :?mode = "defense" // evade/buff/debuff when hit
    // Special cases (both left and right are dedicated to the loadout's goal)
    ?mode = "heal"
      equipL @hVeff@
      ?!c.permapotSetup
        equipR @shVeff@
    :?mode = "unmake" // unmake when hit
      ?foe.count > 1
        equipL @bsAeff@
      :
        equipL Existential Crisis

      ?!c.permapotSetup
        equipR @shAeff@

    :?mode = "armor regen"
      // Left hand:
      ?!ai.walking | // standing still
      ^(!ai.enabled | ai.paused) // cutscene walking
        ?armor < maxarmor |
        ^player.direction = -1 |
        ^(hp = maxhp & armor <= 2)
          equipL quest
        :?hp ! maxhp // passive regen
          equipL ouroboros
        : // try to deal extra damage if possible
          equipL fissure
      :?totaltime % 2 = 0 | buffs.string = "buff_inf_speed"
        equipL triskelion
      :
        equipL quest

      // Right hand:
      ?!c.permapotSetup
        ?armor < compoundMaxArmor_default
          equipR @shC2@
        : // armor = math.Clamp(armor, compoundMaxArmor_default, compoundMaxArmor_boosted)
          equipR @shC1@

    :
      // Left hand
      ?foe.count > 1
        ?(foe = "poison" & foe.buffs.string ! "adaptive_defense_ice") | mode = "ice"
          equipL @wIDmg@
        :?(foe = "vigor" & foe.buffs.string ! "adaptive_defense_poison") | mode = "poison"
          equipL @wPDmg@
        :?(foe = "aether" & foe.buffs.string ! "adaptive_defense_vigor") | mode = "vigor"
          equipL @wVDmg@
        :?(foe = "fire" & foe.buffs.string ! "adaptive_defense_aether") | mode = "aether"
          equipL @wADmg@
        :?(foe = "ice" & foe.buffs.string ! "adaptive_defense_fire") | mode = "fire"
          equipL @wFDmg@
        : // foe = "stone"
          equipL @wSh@
      :
        ?(foe = "poison" & foe.buffs.string ! "adaptive_defense_ice") | mode = "ice"
          equipL Bifrost
        :?(foe = "vigor" & foe.buffs.string ! "adaptive_defense_poison") | mode = "poison"
          equipL Mamba Negra
        :?(foe = "aether" & foe.buffs.string ! "adaptive_defense_vigor") | mode = "vigor"
          equipL Dothaneel
        :?(foe = "fire" & foe.buffs.string ! "adaptive_defense_aether") | mode = "aether"
          equipL Void Slayer
        :?(foe = "ice" & foe.buffs.string ! "adaptive_defense_fire") | mode = "fire"
          equipL Vantum Phoenix
        : // foe = "stone"
          equipL Bifrost // Unbroken Faith

      // Right hand
      ?mode = "tank"
        equipR @shT@
      :?mode = "stun"
        equipR @shC1@

      :?mode = "buff" | mode = "debuff"
        ?mode = "poison" | mode = "empower"
          equipR @shPeff@
        :?mode = "vigor" | mode = "heal"
          equipR @shVeff@
        :?mode = "aether" | mode = "unmake"
          equipR @shAeff@
        :?mode = "fire" | mode = "burn"
          equipR @shFeff@
        :?mode = "ice" | mode = "chill"
          equipR @shIeff@

      :?!c.permapotSetup
        ?(foe = "poison" & foe.buffs.string ! "adaptive_defense_ice") | mode = "ice"
          equipR @shIdef@
        :?(foe = "vigor" & foe.buffs.string ! "adaptive_defense_poison") | mode = "poison"
          equipR @shPdef@
        :?(foe = "aether" & foe.buffs.string ! "adaptive_defense_vigor") | mode = "vigor"
          equipR @shVdef@
        :?(foe = "fire" & foe.buffs.string ! "adaptive_defense_aether") | mode = "aether"
          equipR @shAdef@
        :?(foe = "ice" & foe.buffs.string ! "adaptive_defense_fire") | mode = "fire"
          equipR @shFdef@
        : // foe = "stone"
          equipR @shS@

  :?mode = "sword" & mode ! "big" // normal swords
    // Special cases:
    ?mode = "heal"
      ?c.permapotSetup
        equipL Soulfetcher
      :
        /*var sDmg = null
        ?(foe = "poison" & foe.buffs.string ! "adaptive_defense_ice") | mode = "ice"
          sDmg = Bifrost
        :?(foe = "vigor" & foe.buffs.string ! "adaptive_defense_poison") | mode = "poison"
          sDmg = Mamba Negra
        :?(foe = "aether" & foe.buffs.string ! "adaptive_defense_vigor") | mode = "vigor"
          sDmg = Dothaneel
        :?(foe = "fire" & foe.buffs.string ! "adaptive_defense_aether") | mode = "aether"
          sDmg = Void Slayer
        :?(foe = "ice" & foe.buffs.string ! "adaptive_defense_fire") | mode = "fire"
          sDmg = Vantum Phoenix
        : // foe = "stone
          sDmg = Unbroken Faith*/

        c.moonjuggle(Soulfetcher, sVeff)
    :?mode = "unmake"
      ?c.permapotSetup
        equipL Existential Crisis
      :
        var sword = null
        // put a 2nd dU sword when we have it
        ?(foe = "poison" & foe.buffs.string ! "adaptive_defense_ice") | mode = "ice"
          sword = Bifrost
        :?(foe = "vigor" & foe.buffs.string ! "adaptive_defense_poison") | mode = "poison"
          sword = Mamba Negra
        :?(foe = "aether" & foe.buffs.string ! "adaptive_defense_vigor") | mode = "vigor"
          sword = Dothaneel
        :?(foe = "fire" & foe.buffs.string ! "adaptive_defense_aether") | mode = "aether"
          sword = Void Slayer
        :?(foe = "ice" & foe.buffs.string ! "adaptive_defense_fire") | mode = "fire"
          sword = Vantum Phoenix
        : // foe = "stone"
          sword = Bifrost // Broken Faith

        c.moonjuggle(Existential Crisis, sword) // sAeff2
    :?mode = "debuff"
      ?c.permapotSetup // all left hand
        ?c.canApplyChill(6) & (mode = "auto" | mode = "chill")
          equipL Almafuerte
        :?c.canApplyWeaken() & (mode = "auto" | mode = "weaken")
          equipL Death's Kiss
          //'
        :?c.canApplyBurn() & (mode = "auto" | mode = "burn")
          equipL @sFeff@

      : // !c.permapotSetup
        var sDmg = null
        ?(foe = "poison" & foe.buffs.string ! "adaptive_defense_ice") | mode = "ice"
          sDmg = Bifrost
        :?(foe = "vigor" & foe.buffs.string ! "adaptive_defense_poison") | mode = "poison"
          sDmg = Mamba Negra
        :?(foe = "aether" & foe.buffs.string ! "adaptive_defense_vigor") | mode = "vigor"
          sDmg = Dothaneel
        :?(foe = "fire" & foe.buffs.string ! "adaptive_defense_aether") | mode = "aether"
          sDmg = Void Slayer
        :?(foe = "ice" & foe.buffs.string ! "adaptive_defense_fire") | mode = "fire"
          sDmg = Vantum Phoenix
        : // foe = "stone"
          sDmg = Bifrost // Unbroken Faith

        ?c.canApplyChill(6) & (mode = "auto" | mode = "chill")
          c.moonjuggle(Almafuerte, sIeff)
        :
          equipL moon
          ?c.canApplyWeaken() & (mode = "auto" | mode = "weaken")
            equipR Death's Kiss
            //'
          :?c.canApplyBurn() & (mode = "auto" | mode = "burn")
            equipR @sFeff@
    :?mode = "dmg"
      ?c.permapotSetup // all left hand
        ?(foe = "poison" & foe.buffs.string ! "adaptive_defense_ice") | mode = "ice"
          equipL Bifrost
        :?(foe = "vigor" & foe.buffs.string ! "adaptive_defense_poison") | mode = "poison"
          equipL Mamba Negra
        :?(foe = "aether" & foe.buffs.string ! "adaptive_defense_vigor") | mode = "vigor"
          equipL Dothaneel
        :?(foe = "fire" & foe.buffs.string ! "adaptive_defense_aether") | mode = "aether"
          equipL Void Slayer
        :?(foe = "ice" & foe.buffs.string ! "adaptive_defense_fire") | mode = "fire"
          equipL Vantum Phoenix
        : // foe = "stone"
          equipL Bifrost // Unbroken Faith

      : // !c.permapotSetup
        ?(foe = "poison" & foe.buffs.string ! "adaptive_defense_ice") | mode = "ice"
          c.moonjuggle(Bifrost, sIDmg)
        :?(foe = "vigor" & foe.buffs.string ! "adaptive_defense_poison") | mode = "poison"
          c.moonjuggle(Mamba Negra, sPdmg)
        :?(foe = "aether" & foe.buffs.string ! "adaptive_defense_vigor") | mode = "vigor"
          c.moonjuggle(Dothaneel, sVDmg)
        :?(foe = "fire" & foe.buffs.string ! "adaptive_defense_aether") | mode = "aether"
          c.moonjuggle(Void Slayer, sADmg)
        :?(foe = "ice" & foe.buffs.string ! "adaptive_defense_fire") | mode = "fire"
          c.moonjuggle(Vantum Phoenix, sFDmg)
        : // foe = "stone"
          c.moonjuggle(Bifrost /*Unbroken Faith*/, sIDmg /*Broken Faith*/)
  :?mode = "big sword" // TO DO: big swords
    // Special cases:
    ?mode = "heal"
      ?c.permapotSetup
        equipL @bsVeff@
      :
        ?(foe = "poison" & foe.buffs.string ! "adaptive_defense_ice") | mode = "ice"
          // c.moonjuggle(,)
        :?(foe = "vigor" & foe.buffs.string ! "adaptive_defense_poison") | mode = "poison"
          // c.moonjuggle(,)
        :?(foe = "aether" & foe.buffs.string ! "adaptive_defense_vigor") | mode = "vigor"
          // c.moonjuggle(,)
        :?(foe = "fire" & foe.buffs.string ! "adaptive_defense_aether") | mode = "aether"
          // c.moonjuggle(,)
        :?(foe = "ice" & foe.buffs.string ! "adaptive_defense_fire") | mode = "fire"
          // c.moonjuggle(,)
        : // foe = "stone"
          // c.moonjuggle(,)
    :?mode = "unmake"
      ?c.permapotSetup
        equipL @bsAeff@
      :
        equipL @bsAeff@
        equipR @bsAeff2@
    :?mode = "debuff"
      ?c.permapotSetup // all left hand
        ?c.canApplyChill(6)
          // equipL 
        :?c.canApplyWeaken()
          // equipL 

      : // !c.permapotSetup

        // Left hand:
        ?c.canApplyWeaken()
          // equipL 
        :?c.canApplyChill(6)
          // equipL 

        // Right hand:
        ?c.canApplyChill(6)
          // equipR 
    :?mode = "dmg"
      ?c.permapotSetup // all left hand
        ?(foe = "poison" & foe.buffs.string ! "adaptive_defense_ice") | mode = "ice"
          // equipL 
        :?(foe = "vigor" & foe.buffs.string ! "adaptive_defense_poison") | mode = "poison"
          // equipL 
        :?(foe = "aether" & foe.buffs.string ! "adaptive_defense_vigor") | mode = "vigor"
          // equipL 
        :?(foe = "fire" & foe.buffs.string ! "adaptive_defense_aether") | mode = "aether"
          // equipL 
        :?(foe = "ice" & foe.buffs.string ! "adaptive_defense_ice") | mode = "fire"
          // equipL 
        : // foe = "stone"
          // equipL 

      : // !c.permapotSetup
        ?(foe = "poison" & foe.buffs.string ! "adaptive_defense_ice") | mode = "ice"
          // c.moonjuggle(,)
        :?(foe = "vigor" & foe.buffs.string ! "adaptive_defense_poison") | mode = "poison"
          // c.moonjuggle(,)
        :?(foe = "aether" & foe.buffs.string ! "adaptive_defense_vigor") | mode = "vigor"
          // c.moonjuggle(,)
        :?(foe = "fire" & foe.buffs.string ! "adaptive_defense_aether") | mode = "aether"
          // c.moonjuggle(,)
        :?(foe = "ice" & foe.buffs.string ! "adaptive_defense_fire") | mode = "fire"
          // c.moonjuggle(,)
        : // foe = "stone"
          // c.moonjuggle(,)

  :?mode = "magic" // wands and staves
    ?mode = "heal"
      ?c.permapotSetup
        equipL @wVeff@
      :
        // equip @stVeff@
        equipL moon
        equipR @wVeff@
    :?mode = "unmake"
      ?c.permapotSetup
        equipL @wAeff@
      :
        equipL moon
        equip @wAeff@
        // equip @stAeff@
    :?mode = "debuff"
      ?c.permapotSetup
        ?mode = "chill"
          equipL Frosty Crust
        :?mode = "weaken"
          equipL @wPeff@
      :
        ?mode = "chill"
          equipL moon
          equipR Frosty Crust
        :?mode = "weaken"
          equipL moon
          equipR @wPeff@

    :?mode = "dmg"
      ?c.permapotSetup // all left hand
        ?(foe = "poison" & foe.buffs.string ! "adaptive_defense_ice") | mode = "ice"
          equipL @wIDmg@
        :?(foe = "vigor" & foe.buffs.string ! "adaptive_defense_poison") | mode = "poison"
          equipL @wPDmg@
        :?(foe = "aether" & foe.buffs.string ! "adaptive_defense_vigor") | mode = "vigor"
          equipL @wVDmg@
        :?(foe = "fire" & foe.buffs.string ! "adaptive_defense_aether") | mode = "aether"
          equipL @wADmg@
        :?(foe = "ice" & foe.buffs.string ! "adaptive_defense_fire") | mode = "fire"
          equipL @wFDmg@
        : // foe = "stone"
          equipL Frosty Crust // @wSDmg@
      : // !c.permapotSetup
        equipL moon

        ?(foe = "poison" & foe.buffs.string ! "adaptive_defense_ice") | mode = "ice"
          equipR @wIDmg@
        :?(foe = "vigor" & foe.buffs.string ! "adaptive_defense_poison") | mode = "poison"
          equipR @wPDmg@
        :?(foe = "aether" & foe.buffs.string ! "adaptive_defense_vigor") | mode = "vigor"
          equipR @wVDmg@
        :?(foe = "fire" & foe.buffs.string ! "adaptive_defense_aether") | mode = "aether"
          equipR @wADmg@
        :?(foe = "ice" & foe.buffs.string ! "adaptive_defense_fire") | mode = "fire"
          equipR @wFDmg@
        : // foe = "stone"
          equipR @wIeff@ // @stSDmg@
  :?mode = "ranged" // crossbows
    ?c.permapotSetup
      equipL @bAlt@

    : // !c.permapotSetup
      ?mode = "heal"
        equipL @wVeff@
        equipR Frosty Crust
        // @bVeff@
      :?mode = "unmake"
        ?c.canSmoothCast()
          c.smoothCast(bAeff)
        :
          equip @bAeff@

      :?mode = "debuff"
        ?mode = "chill"
          equip @bIeff@
        :?mode = "weaken"
          equipL moon
          equipR @wPeff@
          // @bPeff@

      :?mode = "knockback"
        equip bS

      :?mode = "dmg" // TO DO: Uncomment when we have all D crossbows maxed out
        ?c.canSmoothCast()
          c.smoothCast(bAeff)
        :
          equip @bAeff@

        /*?(foe = "poison" & foe.buffs.string ! "adaptive_defense_ice") | mode = "ice"
          equip @bIDmg@
        :?(foe = "vigor" & foe.buffs.string ! "adaptive_defense_poison") | mode = "poison"
          equip @bPdmg@
        :?(foe = "aether" & foe.buffs.string ! "adaptive_defense_vigor") | mode = "vigor"
          equip @bVDmg@
        :?(foe = "fire" & foe.buffs.string ! "adaptive_defense_aether") | mode = "aether"
          equip @bFDmg@
        :?(foe = "ice" & foe.buffs.string ! "adaptive_defense_fire") | mode = "fire"
          equip @bIDmg@
        : // foe = "stone"
          equip @bS@ */

  :
    u.showStrCtr(0,30,#red,"ERROR\nFILE: Arsenal\nFUNCTION: ldtF\nCAUSE: unknown <mode>:\n\n" + mode, false)

  return

func canSmartDash()
  return c.canUseAbility("bash") | c.canUseAbility("dash")
func smartDash()
  ?c.canUseAbility("bash")
    ldtF("bash")
  :?c.canUseAbility("dash")
    ldtF("dash")

/* Smart debuffing is a faster,
more efficient method to debuff
with ranged weapons.

It counts the amount of times a
debuffing weapon is cast, instead
of counting the foe's debuffs,
eliminating the time it takes for
the projectiles to land. */
func canSmartDebuff(itemType)
  // entry sanitization
  itemType = string.ToLower(itemType)

  return c.canApplyAny() &
  ^      effCount <= effLimit &
  ^      ["magic","ranged"].Contains(itemType)
func smartDebuff_Mgr()
  // get individual counts
  chillCount = s.getEffectStat("foe","debuff","chill","count")
  weakenCount = s.getEffectStat("foe","debuff","damage","count")

  ?!chillCount
    chillCount = 0
  ?!weakenCount
    weakenCount = 0

  // calculate individual limits
  ?foe = "immune_to_debuff_chill" // immune, don't apply
    chillLimit = 0
  : // vulnerable, apply
    // <limit> = <cap> - <applied count>
    chillLimit = 6 - chillCount

  ?foe = "immune_to_debuff_weaken"
    weakenLimit = 0
  :
    weakenLimit = 1 - weakenCount

  effLimit = chillLimit + weakenLimit

  // resetting logic
  ?effCount > effLimit & // else, no need to reset
  ^(effCount > effLimit | // reached limit
  ^foe.state = 4 | // foe died
  ^!c.canApplyAny()) // can no longer apply debuffs
    ?chillCount
      effCount = chillCount
    :
      effCount = 0

    ?weakenCount
      effCount += weakenCount

func smartDebuff(itemType)
  // Apply effects
  ?foe ! "immune_to_debuff_chill" &
  ^effCount < chillLimit
    ?itemType = "magic"
      ldtF("magic debuff chill")
    : // itemType = "ranged"
      ldtF("ranged debuff chill")

  :?foe ! "immune_to_debuff_weaken" &
  ^effCount = math.Clamp(effCount, chillLimit, effLimit - 1)
    ?itemType = "magic"
      ldtF("magic debuff weaken")
    : // itemType = "ranged"
      ldtF("ranged debuff weaken")
      
  // incrementing logic
  ?(item.left.state = 3 |
  ^ item.right.state = 3) & // perf state
  ^canIncrease
    effCount++
    canIncrease = false
  :
    canIncrease = true

//  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓  //
//  ┃ ▄▀▄▀▄▀▄▀▄ END OF "Arsenal" ▀▄▀▄▀▄▀▄▀ ┃  //
//  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  //