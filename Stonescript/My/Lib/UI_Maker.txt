//  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓  //
//  ┃ ▄▀▄▀▄▀▄▀▄ START OF "UI_Maker" ▀▄▀▄▀▄▀▄▀▄ ┃  //
//  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  //


/* // ///////////// FILE INFO //////////////// //

UI functions library
Made by IronHawk (Tom Crow)

. ................ Description ................ .

  This library offers a simple way to help make
  UI component creation more concise and
  straightforward.

  All functions are one-liners!

. .................. WARNING .................. .

  It is recommended to know read and understand
  what the functions do in order to make a good
  usage of them.

. ................. Importing ................. .

  var uimkr = new UI_Maker

. ................... Usage ................... .

  Example - returns a button with these properties:
  - location = 1, 10 (x, y),
  - width, height = 12, 5,
  - anchor = top_center,
  - dock = top_left,
  - text = "Phrases!",
  - color = red,
  - text color = yellow,
  - border color = magenta,
  - highlight color (when pressing) = rainbow,
  - border style = 2,
  - while pressed = call function "iLike"
  - before pressed = call function "greetings"
  - after pressed = call function "goodbye"
  - sound played when pressed = buy

  func greeting()
    >c0,-1,#red,Hello world!
  func iLike()
    >c0,0,#yellow,I like trees .-.
  func goodbye()
    >c0,1,#green,Goodbye world!

  var button = uimkr.mkButton(1,10,12,5,
  ^            top_center,top_left,
  ^            "Phrases!",
  ^            #red,#yellow,#magenta,#rainbow,
  ^            2,
  ^            iLike,greetings,goodbye,
  ^            buy)
  
. ............................................. .

Enjoy! */


// //////////////// FUNCTIONS //////////////// //

/* **************** GLOSSARY ***************** **

  x = horizontal position (relative to dock)
  y = vertical position (relative to dock)

  w = width
  h = height

  anchor = position relative to the screen
  dock = position relative to parent UI component
  
  colorHex = color in hexadecimal (hex) format
  style = numeric ID used for drawing rectangular
          Components such as Panels and Buttons (range
          from -8 to 8)


  Optional properties/parameters:

  send 0 if you don't want to use them.
  The default value will be used instead. */


/* Makes a panel component.
PARAMETERS:
  Common:
    - x
    - y
    - anchor
    - dock

  Optional:
    - w
    - h
    - colorHex = color of the panel.
    - style
    - child = initial child component to add. */
func mkPanel(x,y,w,h, anchor,dock, colorHex, style, child)

  var panel

  panel = ui.AddPanel()

  panel.x = x
  panel.y = y

  ?w
    panel.w = w
  ?h
    panel.h = h

  panel.anchor = anchor
  panel.dock = dock

  ?colorHex
    panel.color = colorHex
  ?style
    panel.style = style

  ?child
    panel.Add(child)

  return panel

/* Makes a textbox component.
PARAMETERS:
  Common:
    - x
    - y
    - anchor
    - dock
  
  Special:
    - txt = textbox contents.
    - align = text justification/alignment inside the textbox.
              Default: "left"
  
  Optional:
    - w
    - h
    - colorHex = textbox color */
func mkTextbox(x,y,w,h, anchor,dock, txt, align, colorHex)

  //declarations:
  var textbox

  //assignations:
  textbox = ui.AddText(txt)

  //adding alignment
  textbox.anchor = anchor
  textbox.dock = dock

  ?align
    textbox.align = align

  //adding color
  ?colorHex
    textbox.color = colorHex

  //adding position
  textbox.x = x
  textbox.y = y

  //adding width and height
  ?w
    textbox.w = w
  :
    var largestStr
    
    // **************************************
    // borrowed from MyScripts/Lib/Utilities:
    var arrStr = string.Split(txt, "\n")

    ?arrStr.Count() > 0
      var maxStr = arrStr[0]
      var maxInd = -1

      for str : arrStr
        ?string.Size(str) > string.Size(maxStr)
          maxStr = str

      largestStr = maxStr
    
    :
      largestStr = null
    // **************************************

    textbox.w = string.Size(largestStr)
    
  ?h
    textbox.h = h
  :
    textbox.h = string.Split(txt, "\n").Count()


  return textbox

/* Makes a button component.
PARAMETERS
  Common:
    - x
    - y
    - anchor
    - dock

  Special:
    - txt = button text
    - colorHex = general color of the button (colors below override it)
    - pressedFunc = function that the button will perform when pressedFunc

  Optionals:
    - w
    - h
    - colorT   = text color
    - colorB   = border color
    - colorH   = highlight color (when pressedFunc)
    - downFunc   = function that the button will perform when press begins
    - upFunc     = function that the button will perform when press ends
    - soundFx  = sound effect when pressedFunc */
func mkButton(x,y,w,h, anchor,dock, txt, colorHex,colorT,colorB,colorH, style, pressedFunc,downFunc,upFunc, soundFx)
  
  var button
  button = ui.AddButton()

  button.x = x
  button.y = y

  button.text = txt

  ?w
    button.w = w
  :
    var txtSize = string.Size(txt)
    var parity = txtSize % 2
    ?parity = 0 // even
      button.w = (txtSize * 2) + 2 // *2 = always even, 2 for even margin
    : // odd
      button.w = (txtSize * 2) + 3 // *2 + 1 = always odd, 3 for odd margin

  ?h
    button.h = 3 + h
  :
    button.h = 3


  ?anchor
    button.anchor = anchor
  ?dock
    button.dock = dock

  ?style
    button.style = style

  ?colorT
    button.tcolor = colorT
  :
    button.tcolor = colorHex
  ?colorB
    button.bcolor = colorB
  :
    button.bcolor = colorHex
  ?colorH
    button.hcolor = colorH
  :
    button.hcolor = colorHex

  button.SetPressed(pressedFunc)
  ?downFunc
    button.SetDown(downFunc)
  ?upFunc
    button.SetUp(upFunc)

  ?soundFx
    button.sound = soundFx

  return button


//  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓  //
//  ┃ ▄▀▄▀▄▀▄▀▄▀ END OF "UI_Maker" ▄▀▄▀▄▀▄▀▄▀▄ ┃  //
//  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  //
