//  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓  //
//  ┃ ▄▀▄▀▄▀▄▀▄ START OF "UI_Maker" ▀▄▀▄▀▄▀▄▀▄ ┃  //
//  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  //

// //////////////// FUNCTIONS //////////////// //

func destroy(component)
  ?component & Type(component) = "object"
    // Recycle the component itself
    component.Recycle()
    return null


func mkPanel(x,y,w,h, anchor,dock, colorHex, style, child)

  var panel

  panel = ui.AddPanel()

  panel.x = x
  panel.y = y

  ?w
    panel.w = w
  ?h
    panel.h = h

  panel.anchor = anchor
  panel.dock = dock

  ?colorHex
    panel.color = colorHex
  ?style
    panel.style = style

  ?child
    panel.Add(child)

  return panel

func mkTextbox(x,y,w,h, anchor,dock, text, align, colorHex)
  // declarations:
  var textbox = null
  var arrStr  = string.Split(text, "\n")
  
  textbox = ui.AddText(text)
  
  // position
  textbox.x = x
  textbox.y = y

  // width and height
  ?w
    textbox.w = w
  : // auto-calculate width (largest string in the text)
    var largestStr = ""
    
    // **************************************
    // borrowed from MyScripts/Lib/Utilities
    // getLargestStr()

    ?arrStr.Count() > 0
      var largestStr = arrStr[0]

      for str : arrStr
        ?string.Size(str) > string.Size(largestStr)
          largestStr = str

    // **************************************

    textbox.w = string.Size(largestStr)
    
  ?h
    textbox.h = h
  : // auto-calculate height (no. of text lines)
    textbox.h = arrStr.Count()


  // anchor and dock
  textbox.anchor = anchor
  textbox.dock = dock

  // alignment
  ?align
    textbox.align = align

  // color
  ?colorHex
    textbox.color = colorHex


  return textbox

func mkButton(x,y,w,h, anchor,dock, text, colorHex,colorT,colorB,colorH, style, pressedFunc,downFunc,upFunc, soundFx)
  
  var button
  button = ui.AddButton()

  button.x = x
  button.y = y

  button.text = text

  ?w
    button.w = w
  :
    var textSize = string.Size(text)
    var parity = textSize % 2
    ?parity = 0 // even
      button.w = (textSize * 2) + 2 // *2 = always even, 2 for even margin
    : // odd
      button.w = (textSize * 2) + 3 // *2 + 1 = always odd, 3 for odd margin

  ?h
    button.h = 3 + h
  :
    button.h = 3


  ?anchor
    button.anchor = anchor
  ?dock
    button.dock = dock

  ?style
    button.style = style

  ?colorT
    button.tcolor = colorT
  :
    button.tcolor = colorHex
  ?colorB
    button.bcolor = colorB
  :
    button.bcolor = colorHex
  ?colorH
    button.hcolor = colorH
  :
    button.hcolor = colorHex

  button.SetPressed(pressedFunc)
  ?downFunc
    button.SetDown(downFunc)
  ?upFunc
    button.SetUp(upFunc)

  ?soundFx
    button.sound = soundFx

  return button

//  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓  //
//  ┃ ▄▀▄▀▄▀▄▀▄▀ END OF "UI_Maker" ▄▀▄▀▄▀▄▀▄▀▄ ┃  //
//  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  //
