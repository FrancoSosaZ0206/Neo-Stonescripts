//  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓  //
//  ┃ ▄▀▄▀▄▀▄ START OF "Utilities" ▀▄▀▄▀▄▀▄ ┃  //
//  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  //


/* // ///////////// FILE INFO //////////////// //

Utilities library
Made by IronHawk (Tom Crow)

. ................ Description ................ .

  This library provides a pack of useful
  general purpose variables and
  functions to make your script-making
  tasks easier!

. ................. Importing ................. .

  Desktop:
    Put this file in Stonescript/UI or your
    directory of preference (inside Stonescript),
    then do this:

    var u = import <YourDirectory>/Utilities

  Mobile:
    Copy-paste this script and any dependencies
    into your Mindstone.

. ................... Usage ................... .

  Example - print a flashing message
  every second:

  ?totaltime = u.sec
    >c0,0,#red,HIIIIII

. ............................................. .

Enjoy! */


// ///////////////// IMPORTS ///////////////// //

var uimkr = import My/Lib/UI_Maker


// //////////////// VARIABLES //////////////// //

// Units

var sec = 30 // frames
var scr = 69 // 1 screen = 69 units


// //////////////// FUNCTIONS //////////////// //

// ................... Math .................. //

/* Returns the biggest between two numbers. */
func max(n1,n2)
  ?n1 >= n2
    return n1
  :
    return n2

// ................... Time .................. //

func myFormatDigital(frames)
  ?frames <= 0
    return "00:00"
  :
    var timeStr
    var secs
    var mins
    var secStr
    var minStr

    secs = frames/30
    mins = (frames/30)/60

    secs -= mins*60

    ?mins < 10
      minStr = "0" + mins
    :
      minStr = mins
      
    ?secs < 10
      secStr = "0" + secs
    :
      secStr = secs
    
    return minStr + ":" + secStr

/* returns time in a similar format to time.FormatDigital,
  but with frame presition. */
func formatSpeedrun(frames)
  var timeStr = "00:00 00f"

  ?frames > 0
    var frms    = null
    var secs    = null
    var mins    = null
    var frmStr  = null
    var secStr  = null
    var minStr  = null

    frms =   frames % sec // the remaining frames between each second
    secs =   frames / sec
    mins =  (frames / sec) / 60
    secs -= (mins * 2*sec)

    ?frms < 10
      frmStr = "0" + frms
    :
      frmStr = frms
    frmStr += "f"

    ?secs < 10
      secStr = "0" + secs
    :
      secStr = secs
      
    ?mins < 10
      minStr = "0" + mins
    :
      minStr = mins

    timeStr = minStr + ":" + secStr + " " + frmStr
    
  return timeStr

// ................. Strings ................. //

/* Finds the largest string in an array of strings. */
func getLargestStr(arrStr)
  var largestStr = null
  ?arrStr.Count() > 0
    largestStr = arrStr[0]

    for str : arrStr
      ?string.Size(str) > string.Size(largestStr)
        largestStr = str

  return null

/* shows a big string, broken down into several lines.
PARAMETERS:
  - str = the string in question
  - x
  - y
  - maxW = maximum width to show the string
  - colorName (optional) = resulting text's color
  - isUI:
    - true = returns an UI component with the string
    - false = prints out the broken down string directly.
              DOES NOT RETURN ANYTHING. */
func showBigStr(x, y, maxW, colorName, str, isUI)

  ?isUI
    var textbox
    var panel

    textbox = uimkr.mkTextbox(1,1,maxW,null,
    ^top_left,top_left,
    ^str,null,colorName)

    panel = uimkr.mkPanel(x,y,
    ^textbox.w + 2,
    ^textbox.h + 2,
    ^top_left,top_left,
    ^colorName,-1,textbox)
    
    return panel
  
  :
    var arr = string.Break(str, maxW)

    for i = 0 .. arr.Count()-1
      ?colorName
        >`@x@,@y + i@,@colorName@,@arr[i]@
      :
        >`@x@,@y + i@,@arr[i]@

    return

/* Shows a string centered in the screen,
  breaking it down into several lines if necessary.
PARAMETERS:
  - y
  - maxW = maximum width to show the string
  - str = the string in question
  - colorName = output color of the string
  - isUI:
    - true = returns an UI component with the string
    - false = prints out the centered, broken down
              string directly.
              DOES NOT RETURN ANYTHING. */
func showStrCtr(y, maxW, colorName, str, isUI)

  ?isUI
    var textbox
    var panel

    textbox = uimkr.mkTextbox(1,1,maxW,null,
    ^top_left,top_left,
    ^str,center,colorName)

    panel = uimkr.mkPanel(
    ^- (textbox.w / 2),y,
    ^textbox.w + 2,
    ^textbox.h + 2,
    ^center_center,center_center,
    ^colorName,-1,textbox)
    
    return panel

  :

    var arr = string.Break(str, maxW)

    for i = 0 .. arr.Count()-1
      var x
      x = - ( string.Size(arr[i]) - 1 ) / 2
      ?colorName
        >c@x@,@y + i@,@colorName@,@arr[i]@
      :
        >c@x@,@y + i@,@arr[i]@

    return

// ............. Helper functions ............ //

/* Converts widely used color names into
their respective hexadecimal representation. */
func colorToHex(colorName)
  // Entry sanitization
  colorName = string.ToLower(colorName)

  ?colorName = "red"
    return #FF0000
  :?colorName = "orange"
    return #FF7518
  :?colorName = "yellow"
    return #FFFF00
  :?colorName = "gold"
    return #E49B0F
  :?colorName = "blue"
    return #0000FF
  :?colorName = "cyan"
    return #00FFFF
  :?colorName = "magenta"
    return #FF00FF
  :?colorName = "pink"
    return #E0115F
  :?colorName = "purple"
    return #800080
  :?colorName = "violet"
    return #7F00FF
  :?colorName = "green"
    return #008000
  :?colorName = "darkGreen"
    return #023020
  :?colorName = "white"
    return #FFFFFF
  :?colorName = "gray"
    return #808080
  :?colorName = "black"
    return #000000
  :?colorName = "brown"
    return #7B3F00
  :?colorName = "turquoise" |
  ^colorName = "turquesa"
    return #40E0D0
  :?colorName = "rainbow" |
  ^colorName = "rgb"
    return #rainbow
  :
    showStrCtr(0,30,#red,"ERROR\nFILE: Utilities\nFUNCTION: colorToHex\nCAUSE: unknown <colorName>: " + colorName, false)


//  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓  //
//  ┃ ▄▀▄▀▄▀▄▀ END OF "Utilities" ▄▀▄▀▄▀▄▀▄ ┃  //
//  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  //
