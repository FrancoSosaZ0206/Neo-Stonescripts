//  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓  //
//  ┃ ▄▀▄▀▄▀▄▀▄▀▄ START OF "DPS" ▀▄▀▄▀▄▀▄▀▄ ┃  //
//  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  //

// ///////////////// IMPORTS ///////////////// //

var uimkr = import My/Lib/UI_Maker
var u = import My/Lib/Utilities

// ///////////////// PUBLIC ////////////////// //

/* Initializes and manages the dps meter.

Valid <mode> values:

Primary (should go first)
"normal", "default" = returns the full version
                      of the Meter.
"slim", "small" = returns a smaller version of
                  it, containing less
                  information.

Secondary (should go after primary)
"ui" = makes an UI panel containing the meter.
"print" = prints the meter normally.
"print ascii" = prints the meter in ascii mode. */
func main(x, y, colorHex, frameRate, mode)
  // sanitize mode entries
  mode = string.ToLower(mode)

  ?canUpdate(frameRate)
    Update()

    ?mode = "ui"
      mkUI(x,y,colorHex,mode)

    :?mode = "print"
      Print(x,y,colorHex,mode,false)
    :
      u.showStrCtr(0,30,#red,"ERROR\nFILE: DPS\nFUNCTION: main\nCAUSE: invalid <mode>:\n\n" + mode, false)

// ///////////////// PRIVATE ///////////////// //

// ................ Variables ................ //

var sec = 30        // No need to import the whole Utilities script just for this variable.
var currhp = 0      // foe's current hitpoints (with armor)
var nethp = 0       // foe's net maximum hitpoints (with armor)

var hits      = 0   // hit counter
var dmg       = 0   // current damage dealt
var totalDmg  = 0   // total damage dealt
var startTime = 0   // timestamp for the beginning of the fight
var auxhp     = 0   // auxiliar variable to compare with currhp

var FRM = "N/A"     // frames elapsed from first hit
var FPH = "N/A"     // frames per hit >>> hit frequency | frames elapsed from each hit to the next
var HPS = "N/A"     // hits per second
var DPF = "N/A"     // damage per frame
var DPS = "N/A"     // damage per second

var panel = null
var txt = null
var init = false

// ................ Functions ................ //

func canUpdate(frameRate)
  ?frameRate > 0
    // only works when there's a boss
    return (foe = "boss" | foe = "monarch") &
    ^totaltime % frameRate = 0
  :
    u.showStrCtr(0,30,#red,"ERROR\nFILE: DPS\nFUNCTION: canUpdate\nCAUSE: invalid <frameRate>:\n\n" + frameRate, false)

    return false
func Update()
  currhp  = foe.hp + foe.armor
  nethp   = foe.maxhp + foe.maxarmor

  ?0 < currhp & currhp < nethp // boss lost hp/armor, but isn't dead

    ?auxhp > currhp // if current hp updates
      hits += 1 // we count a hit
      dmg       = auxhp - currhp // we get the damage dealt from the difference
      totalDmg  = totalDmg + dmg // and we accumulate it in this variable

  : // else, reset temporal variables
    startTime = totaltime
    hits      = 0
    dmg       = 0
    totalDmg  = 0


  FRM = totaltime - startTime // total time minus the time the first hit was dealt
  ?hits > 1
    FPH = FRM      / (hits /*- 1*/) // -1 is there to avoid stat flicking
  :
    FPH = "N/A"

  ?FPH ! "N/A"
    HPS = sec      / FPH
  :
    HPS = "N/A"
    
  ?FRM > 0
    DPF = totalDmg / FRM // damage accumulated - no. frames elapsed
  :
    DPF = "N/A"

  ?DPF ! "N/A"
    DPS = DPF  * sec
  :
    DPS = "N/A"

  auxhp = currhp

func ToString(size)
  var str = null

  ?size = "slim" | size = "small"
    str = "DPS#|#" + DPS

  :?size = "normal" | size = "default"
    str = "###DPS#METER###"   + "\n" +
    ^     "#·##·##·##·##·#"   + "\n" +
    ^     "#No.#Hits#" + hits + "\n" +
    ^     "#Hits/Sec#" + HPS  + "\n" +
    ^     "#Dmg#/Hit#" + dmg  + "\n" +
    ^     "#Dmg#/Frm#" + DPF  + "\n" +
    ^     "#Dmg#/Sec#" + DPS  + "\n" +
    ^     "#·##·##·##·##·#"
  :
    u.showStrCtr(0,30,#red,"ERROR\nFILE: DPS\nFUNCTION: ToString\nCAUSE: invalid <size>:\n\n" + size, false)

  return str
func Print(x, y, colorHex, mode)
  ?mode = "ascii"
    >`@x@,@y@,@colorHex@,ascii
@ToString(mode)@
asciiend
  :
    >`@x@,@y@,@colorHex@,@ToString(mode)@

func mkUI(x, y, colorHex, size)
  ?!(panel & txt)
    var isValidSize = true

    var panelAnchor = bottom_right
    var panelDock = bottom_right
    var panelStyle = null

    ?size = "normal" | size = "default"
      panelStyle = -3
    :?size = "slim" | size = "small"
      panelStyle = -1
    :
      isValidSize = false
      u.showStrCtr(0,30,#red,"ERROR\nFILE: DPS\nFUNCTION: mkUI\nCAUSE: invalid <size>:\n\n" + size, false)

    ?isValidSize
      txt = uimkr.mkTextbox(
      ^ 1, 1, null, null, // x, y, w, h,
      ^ top_left, top_left, // anchor, dock,
      ^ ToString(size), // txt
      ^ null, colorHex) // align, colorHex

      panel = uimkr.mkPanel(
      ^ x, y, txt.w + 2, txt.h + 2, // x, y, w, h,
      ^ panelAnchor, panelDock, // anchor, dock,
      ^ colorHex, panelStyle, txt) // colorHex, style, child

      init = true

  : // panel & txt
    txt.text = ToString(size)

    ?!panel.parent // destroy and re-init
      txt.Recycle()
      txt = null

      panel.Recycle()
      panel = null

      init = false

//  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓  //
//  ┃ ▄▀▄▀▄▀▄▀▄▀▄▀ END OF "DPS" ▀▄▀▄▀▄▀▄▀▄▀ ┃  //
//  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  //
