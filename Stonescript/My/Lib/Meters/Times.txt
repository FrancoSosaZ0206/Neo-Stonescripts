//  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓  //
//  ┃ ▄▀▄▀▄▀▄▀▄▀ START OF "Times" ▀▄▀▄▀▄▀▄▀ ┃  //
//  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  //

// ///////////////// IMPORTS ///////////////// //

var uimkr = import My/Lib/UI_Maker
var u = import My/Lib/Utilities

// ///////////////// PUBLIC ////////////////// //

/* Initializes and manages the times meter.

Valid <mode> values:

Primary (should go first)
"normal", "default" = returns the full version
                      of the Meter.
"slim", "small" = returns a smaller version of
                  it, containing less
                  information.

Secondary
"speedrun" = displays times with frame
             presition

Tertiary (Should go at the end)
"ui" = makes an UI panel containing the meter.
"print" = prints the meter normally.
"print ascii" = prints the meter in ascii mode. */
func main(x, y, colorHex, mode)
  // sanitize mode entries
  mode = string.ToLower(mode)

  ?canUpdate(mode)
    Update(mode)

    ?mode = "ui"
      mkUI(x,y,colorHex,mode)

        >c-10,0,#green,ascii
TIMES: OK
panel = @panel ! null@
  - parent: @panel.parent ! null@
  - visible: @panel.visible@
txt = @txt@
  - parent: @txt.parent ! null@
  - visible: @txt.visible@
  - text: @txt.text@
asciiend

    :?mode = "print"
      Print(x,y,colorHex,mode,true)
    :
      u.showStrCtr(0,30,#red,"ERROR\nFILE: Times\nFUNCTION: main\nCAUSE: invalid <mode>:\n\n" + mode, false)

// ///////////////// PRIVATE ///////////////// //

// ................ Variables ................ //

var tt  = null
var pb  = null
var avg = null

var panel = null
var txt = null
var init = false

// ................ Functions ................ //

func canUpdate(mode)
  ?mode = "speedrun"
    return true
  :
    return loc.begin | (totaltime % u.sec = 0)
func Update(mode)
  ?mode = "speedrun" // update times every frame
    tt    = u.formatSpeedrun(totaltime)

    ?loc.begin | loc.loop
      pb  = u.formatSpeedrun(loc.bestTime)
      avg = u.formatSpeedrun(loc.averageTime)

  : // update times every second (30 frames)
    ?loc.begin | totaltime % u.sec = 0
      tt  = time.formatDigital(totaltime)

    ?loc.begin | loc.loop
      pb  = time.formatDigital(loc.bestTime)
      avg = time.formatDigital(loc.averageTime)

func ToString(size)
  var str = null

  ?size = "slim" | size = "small"
    /* TO DO: implement dynamic column paddings.
    var headers = ["☆", "≈", "▶"]
    var data    = [pb, avg, tt]*/

    str = "☆#{0}#|#≈#{1}#|#▶#{2}"

  :?size = "normal" | size = "default"
    str = "####SPEED-O-METER####\n" +
    ^     "#·##·##·##·##·##·##·#\n" +
    ^     "#PB##{0}\n" +
    ^     "#AVG#{1}\n" +
    ^     "#CUR#{2}"
  :
    u.showStrCtr(0,30,#red,"ERROR\nFILE: Times\nFUNCTION: ToString\nCAUSE: invalid <size>:\n\n" + size, false)

  ?str
    str = string.Format(str, pb,avg,tt)

  return str
/* isAscii:
    true: prints the text in ascii format,
          replacing the whitespace characters
          with transparent characters.
    false: prints normally. Whitespaces
           will block the background. */
func Print(x, y, colorHex, mode)
  ?mode = "ascii"
    >`@x@,@y@,@colorHex@,ascii
@ToString(mode)@
asciiend
  :
    >`@x@,@y@,@colorHex@,@ToString(mode)@

func mkUI(x, y, colorHex, size)
  ?!(panel & txt)
    var isValidSize = true

    // For the panel:
    var panelAnchor = bottom_left
    var panelDock = bottom_left
    var panelStyle = null
    
    ?size = "normal" | size = "default"
      panelStyle = -2
    :?size = "slim" | size = "small"
      panelStyle = -1
    :
      isValidSize = false
      u.showStrCtr(0,30,#red,"ERROR\nFILE: Times\nFUNCTION: mkUI\nCAUSE: invalid <size>:\n\n" + size, false)

    ?isValidSize
      txt = uimkr.mkTextbox(
      ^ 1, 1, null, null,   // x, y, w, h,
      ^ top_left, top_left, // anchor, dock,
      ^ ToString(size),     // txt
      ^ null, colorHex)     // align, colorHex

      panel = uimkr.mkPanel(
      ^ x, y, txt.w + 2, txt.h + 2, // x, y, w, h,
      ^ panelAnchor, panelDock,     // anchor, dock,
      ^ colorHex, panelStyle, txt)  // colorHex, panelStyle, child

      init = true

  : // panel & txt
    txt.text = ToString(size)

    ?!panel.parent // destroy and re-init
      txt.Recycle()
      txt = null

      panel.Recycle()
      panel = null

      init = false

//  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓  //
//  ┃ ▄▀▄▀▄▀▄▀▄▀▄ END OF "Times" ▀▄▀▄▀▄▀▄▀▄ ┃  //
//  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  //