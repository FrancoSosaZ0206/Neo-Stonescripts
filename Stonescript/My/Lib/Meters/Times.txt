//  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓  //
//  ┃ ▄▀▄▀▄▀▄▀▄▀ START OF "Times" ▀▄▀▄▀▄▀▄▀ ┃  //
//  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  //


/* // ///////////// FILE INFO //////////////// //

Time Display Utility
Made by MetalEagle26 (Tom Crow)

Current version: 2.1

. ................ Description ................ .

  This library displays your runs's times!
  Includes a speedrunning version to track frames.

. ................. Importing ................. .

  Desktop:
    Put this file in Stonescript/UI or your
    directory of preference (inside Stonescript),
    then do this:

    var t = import <YourDirectory>/Times

  Mobile:
    Copy-Paste this script and any dependencies
    into your Mindstone.

. ................... Usage ................... .

  Example - initialize the meter in 0,3 (x,y),
  in red, in the slim, non-speedrun version, and
  in the "ui" mode:

  t.Main(0, 1, "#red", true, false, ui)

· ···················· Tip ···················· ·

  Keep in mind that speedrunning functions need to
  update constantly to show the frames, which may cause
  some lag.
  
  Also, remember to use ".Recycle()" function and assign
  to "null" after using UI functions!

. ................. CHANGELOG ................. .

  - v1.2:
    - Now you can choose a slim version
      of the meter in all functions.
  - v1.3:
    - showSpeedOmeterUI() renamed to "speedOmeterUI".
    - added import: UI_Maker.txt
    - speedOmeterUI now uses functions from
      the import "UI_Maker.txt".
  - v1.4:
    - Fixed bug that prevented displaying
      the meter before the first
      second of each run.
  - v1.5:
    - Now all functions that show the meter
      depend on speedOmeterToStr().
  - v1.6:
    - formatSpeedrun(): now 1 digit frames
      are prefixed with a zero ('0').
    - myFormatDigital() and formatSpeedrun()
      moved to Utilities.
    - fixed ttSpeedrun update frequency. Now
      it updates every frame as it should.
  - v1.7:
    - renamed all functions and variables
      containing "speedOmeter" to "som".
    - isAscii now belongs to Print() as
      one of two modes of a new parameter: isAscii.
    - uiSom() -> mkUI().
    - mkUI(): if isSlim, the panel will now be borderless.
    - ToString(): '#' replaced back with ' '.
      Now not all functions replace it again, but those who do
      delegate that task to Utilities -> replaceInStr().
  - v1.8:
    - Renamed functions: removed "Som" from them
      to make them more concise and cohesive with
      object-oriented programming and the "new" keyword.
    - Added Import: Performance, to centralize dependencies
      and upgrade performance.
  - v1.9:
    - Variable updates are now done in function Update().
  - v2.0:
    - Fixed bug that messed with ui panel updates
    - Changed mode of use: now you only need to
      import and use the function "main".
    - Updates and ui components are now handled
      internally.
    - Renamed to "Times"

. ............................................. .

Enjoy! */


// ///////////////// IMPORTS ///////////////// //

var uimkr = new MyScripts/Lib/UI_Maker
var u = new MyScripts/Lib/Utilities


// ///////////////// PUBLIC ////////////////// //

var panel = null
func main(x, y, colorHex, isSlim, isSpeedrun, mode)
  ?mode = "ui"
    ?Update(isSpeedrun)
      ?panel
        panel.Recycle()
        panel = null

      panel = mkUI(x,y,colorHex,isSlim,isSpeedrun)

  :?mode = "print"
    ?mode = "printAscii"
      Print(x,y,colorHex,isSlim,isSpeedrun,true)
    :
      Print(x,y,colorHex,isSlim,isSpeedrun,false)

  return


// ///////////////// PRIVATE ///////////////// //

// ................ Variables ................ //

// Times in seconds
var ttDigital = u.myFormatDigital(totaltime)
var pb = u.myFormatDigital(loc.bestTime)
var avg = u.myFormatDigital(loc.averageTime)

// Times in seconds and frames
var ttSpeedrun = u.formatSpeedrun(totaltime)
var pbSpeedrun = u.formatSpeedrun(loc.bestTime)
var avgSpeedrun = u.formatSpeedrun(loc.averageTime)


// ................ Functions ................ //

func Update(isSpeedrun)
  // Variable updating frequency:
  ?totaltime % u.sec = 0
    ttDigital = u.myFormatDigital(totaltime)
  ttSpeedrun = u.formatSpeedrun(totaltime)

  ?loc.loop
    pb = u.myFormatDigital(loc.bestTime) // update pb
    avg = u.myFormatDigital(loc.averageTime) // update avg

    pbSpeedrun = u.formatSpeedrun(loc.bestTime)
    avgSpeedrun = u.formatSpeedrun(loc.averageTime)


  ?isSpeedrun
    return true
  :
    return totaltime = 1 | (totaltime % u.sec = 0)

func ToString(isSlim, isSpeedrun)

  ?isSlim
    ?isSpeedrun
      return
      ^"☆#" + pbSpeedrun +     // ☆ = PB
      ^"#|#≈#" + avgSpeedrun + // ≈ = AVG
      ^"#|#▶#" + ttSpeedrun    // ▶ = CURR

    :
      return
      ^"☆#" + pb +         // ☆ = PB
      ^"#|#≈#" + avg +      // ≈ = AVG
      ^"#|#▶#" + ttDigital // ▶ = CURR

  :
    ?isSpeedrun
      return
      ^"####SPEED-O-METER" + "\n" +
      ^"·····················" + "\n" +
      ^"#PB##" + pbSpeedrun + "#(" + loc.bestTime + "f)" + "\n" +
      ^"#AVG#" + avgSpeedrun + "#(" + loc.averageTime + "f)" + "\n" +
      ^"#CUR#" + ttSpeedrun + "#(" + totaltime + "f)"

    :
      return
      ^"SPEED-O-METER" + "\n" +
      ^"·············" + "\n" +
      ^"##PB##" + pb + "\n" +
      ^"##AVG#" + avg + "\n" +
      ^"##CUR#" + ttDigital

/* isAscii:
    true: prints the text in ascii format,
          replacing the whitespace characters
          with transparent characters.
    false: prints normally. Whitespaces
           will block the background. */
func Print(x, y, colorHex, isSlim, isSpeedrun, isAscii)
  ?isAscii
    >`@x@,@y@,@colorHex@,ascii
@ToString(isSlim, isSpeedrun)@
asciiend
  :
    >`@x@,@y@,@colorHex@,@ToString(isSlim, isSpeedrun)@

  return

func mkUI(x, y, colorHex, isSlim, isSpeedrun)

  var txt
  var panel

  // For the panel:
  var pnlAnchor
  var pnlDock
  var style
  
  ?isSlim
    pnlAnchor = top_center
    pnlDock = top_center
    style = -1
  :
    pnlAnchor = top_left
    pnlDock = top_left
    style = -2

  txt = uimkr.mkTxtbox(
  ^1, 1, null, null, // x, y, w, h,
  ^top_left, top_left, // pnlAnchor, dock,
  ^ToString(isSlim, isSpeedrun), // txt
  ^null, colorHex) // align, colorHex

  panel = uimkr.mkPanel(
    ^x, y, txt.w + 2, txt.h + 2, // x, y, w, h,
    ^pnlAnchor, pnlDock, // anchor, dock,
    ^colorHex, style, txt) // colorHex, style, child

  return panel


//  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓  //
//  ┃ ▄▀▄▀▄▀▄▀▄▀▄ END OF "Times" ▀▄▀▄▀▄▀▄▀▄ ┃  //
//  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  //
