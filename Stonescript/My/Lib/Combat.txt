//  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓  //
//  ┃ ▄▀▄▀▄▀▄▀▄▀ START OF "Combat" ▄▀▄▀▄▀▄▀▄▀▄ ┃  //
//  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  //

// ///////////////// IMPORTS ///////////////// //

var log = import My/Lib/Error_Logging/public
var s = import My/Lib/Stats

// //////////////// VARIABLES //////////////// //

// File
var _FILE = "Lib/Combat"

// Status

var midhp
var lowhp
var hihp


// Function-related

var slideCount = 0 // counter to give screen.Next() time to slide in _DS functions.

var moondialTimer = 0
var burstTimer = 0
var burstCdTimer = 0
var burstState = true

var item_TH_IDs = [ // two-handed item IDs
^   "blade",
^   "arm",

^   "shovel",

^   "bardiche",
^   "heavy_hammer",
^   "quarterstaff",

^   "staff_poison",
^   "staff_vigor",
^   "staff_aether",
^   "staff_fire",
^   "staff_ice",
^   "staff_stone"
^]

var item_OH_IDs = [ // one-handed item IDs
^   "mask",
^   "hatchet",

// ^   "stone_talisman",
// ^   "poison_talisman",
// ^   "vigor_talisman",
^   "aether_talisman",
^   "fire_talisman",
// ^   "ice_talisman",

^   "wand_poison",
^   "wand_vigor",
^   "wand_aether",
^   "wand_fire",
^   "wand_ice",
^   "wand_stone"
^]

var table_itemDS = [ // IDs of items' abilities that can be used in 2 screens
^   "ID"    , "TARGET", "MAX" ,
^   "blade" , null    , null  ,
^   "mask"  , null    , null
^]


// Others

var permapotSetup = loc.stars > 10 // only true from yellow onwards
var potionType = null

// //////////////// FUNCTIONS //////////////// //

func Init()
  midhp = maxhp / 2
  lowhp = maxhp / 3
  hihp = (4 * maxhp) / 5

  ?loc.loop
    permapotSetup = false

// ................. GLOBAL ................. //

func canUseAbility(abilityID)
  var result = false

  // Valid ID
  ?s.ability_table.Contains(abilityID)
    result = item.CanActivate() &
    ^item.GetCooldown(abilityID) <= 0

    ?abilityID = "bash" | abilityID = "dash"
      result = result & s.inRange("dash") & !ai.idle

    :?abilityID = "arm"
      result = result & // item.CanActivate("arm") &
      ^s.inRange("arm") &
      ^buffs.string = "pick_pocket"

    :?abilityID = "hatchet"
      result = (result & loc.id = "deadwood_valley" &
      ^         s.inRange(abilityID)) |
      ^isCasting(abilityID) // won't get interrupted
    :?abilityID = "shovel"
      result = (result & loc.id = "rocky_plateau"/* &
      ^         s.inRange(abilityID)*/) |
      ^isCasting(abilityID) // won't get interrupted

    :?abilityID = "bardiche" |
    ^abilityID = "heavy_hammer"
      result = (result & s.inRange(abilityID+" ability")) |
      ^isCasting(abilityID) // won't get interrupted

    :?abilityID = "talisman" // interruptible abilities
      result = result | isCasting(abilityID) // make sure not to change it while casting the ability

    // Special case, stone wand doesn't require armor.
    :?abilityID = "wand_stone"
      result = result & foe.count > 1 &
      ^item.CanActivate("wand_stone")

    :?(abilityID = "staff" & abilityID ! "quarterstaff") |
    ^ abilityID = "wand"
      result = result &
      ^((10 * armor) + armor.f > 10 * s.getArmor(abilityID))

      ?abilityID = "wand_poison"
        result = result &
        ^!(foe = "immune_to_debuff_damage" |
        ^  encounter.eliteMod = "tenacious")
      :?abilityID = "wand_ice"
        result = result &
        ^!(foe = "immune_to_stun" |
        ^  encounter.eliteMod = "tenacious")

    :?s.talisman_table.Contains(abilityID) // it's a summon
      result = result & isSummoned(abilityID)

      ?abilityID = "voidweaver"
        result = result & canUnmakeVoidweaver()
      :?abilityID = "cinderwisp"
        ?foe.debuffs.string
          result = result & (foe.debuffs.string = "ignition")
        :
          result = false
  :
    log.logError(_FILE, "canUseAbility",
    ^"unknown <abilityID>: "+abilityID)

  return result

func useAbility_TH(abilityID, itemName)
  ?item_TH_IDs.Contains(abilityID)
    equip @itemName@
    activate R

  : // invalid abilityID
    log.logError(_FILE, "useAbility_TH", "<abilityID> unknown: "+abilityID)
func useAbility_OH(abilityID, itemName, hand)
  ?item_OH_IDs.Contains(abilityID)
    // special one-handed weapons equipment logic
    ?abilityID = "hatchet" | abilityID = "mask"
      equipR @abilityID@
      activate R

    // normal equipment logic
    :?hand = "l" | hand = "left"
      equipL @itemName@
      activate L

      // talismans equipment logic
      ?abilityID = "talisman" & s.inRange("dash")
        ?canUseAbility("bash")
          equipR bash
        :?canUseAbility("bash")
          equipR dash

    :?hand = "r" | hand = "right"
      equipR @itemName@
      activate R

      // talismans equipment logic
      ?abilityID = "talisman"
        ?pickup.distance < 15
          equipL star
        :?ai.walking & !s.inRange("triskelion")
          equipL triskelion
    :
      log.logError(_FILE, "useAbility_OH", "unknown <hand>: "+hand)
  :
    log.logError(_FILE, "useAbility_TH", "unknown <abilityID>: "+abilityID)

func isEquipped(itemName)
  return item.left = itemName | item.right = itemName
func isCasting(itemName)
  return
  ^(item.left = itemName & item.left.state = 2) |
  ^(item.right = itemName & item.right.state = 2)

// ........... Double Screen (DS) ........... //

/* returns the target or maximum screen of a double-screen item, null if not set, or -1 if there was an error.

valid <type> values: "TARGET", "MAX". */
func getScreen_DS(itemName, type)
  var result = -1
  ?!table_itemDS.Contains(itemName)
    log.logError(_FILE, "getScreen_DS", "unknown <itemName>: "+itemName)
  :?!table_itemDS.Contains(type)
    log.logError(_FILE, "getScreen_DS", "unknown <type>: "+type)
  :
    result = 
    ^table_itemDS[table_itemDS.IndexOf(itemName) +
    ^             table_itemDS.IndexOf(type)]

  return result
func isScreen_DS(itemName, type)
  var result = false
  ?!table_itemDS.Contains(itemName)
    log.logError(_FILE, "isScreen_DS", "unknown <itemName>: "+itemName)
  :?!table_itemDS.Contains(type)
    log.logError(_FILE, "isScreen_DS", "unknown <type>: "+type)
  :
    var scrTarget =
    ^table_itemDS[table_itemDS.IndexOf(itemName) + 
    ^             table_itemDS.IndexOf("TARGET")]

    ?type = "TARGET"
      result = (screen.i = scrTarget)
    : // type = "MAX"
      result = (scrTarget =
      ^table_itemDS[table_itemDS.IndexOf(itemName) + 
      ^            table_itemDS.IndexOf("MAX")])
  
  return result
func screenMngr_DS(itemName, scrTarget, scrMax)
  // Entry sanitization
  itemName = string.ToLower(itemName)

  // Error handling
  ?!table_itemDS.Contains(itemName)
    log.logError(_FILE, "screenMngr_DS", "unknown <itemName>: "+itemName)
  :?scrMax < 0
    log.logError(_FILE, "screenMngr_DS", "invalid <scrMax>: "+scrMax)
  :?scrTarget ! math.Clamp(scrTarget, 0, scrMax)
    log.logError(_FILE, "screenMngr_DS", "invalid <scrTarget>: "+scrTarget)
  // OK, proceed
  :
    var itemI = table_itemDS.IndexOf(itemName)
    var targetI = table_itemDS.IndexOf("TARGET")
    var maxI = table_itemDS.IndexOf("MAX")
    ?loc.begin | // beginning of the game
    ^!(table_itemDS[itemI + targetI] & table_itemDS[itemI + maxI]) // or unset
      table_itemDS[itemI + targetI] = scrTarget
      table_itemDS[itemI + maxI] = scrMax
    :?loc.loop & !isScreen_DS(itemName, "MAX")
      table_itemDS[itemI + targetI] += 1

    :?canUseAbility_DS(itemName)
      useAbility_DS(itemName)
func canUseAbility_DS(itemName)
  ?table_itemDS.Contains(itemName)
    return canUseAbility(itemName) &
    ^isScreen_DS(itemName, "TARGET")
  :
    log.logError(_FILE, "canUseAbility_DS", "unknown <itemName>: "+itemName)

    return false
func useAbility_DS(itemName)
  ?table_itemDS.Contains(itemName)
    ?slideCount = 0
      screen.Next()
      slideCount = 20

    :?slideCount > 0
      slideCount--

      ?slideCount = 0
        ?itemName = "blade"
          useAbility_TH(itemName, itemName)
        :?itemName = "mask"
          useAbility_OH(itemName, itemName, "r")
        screen.ResetOffset()
  :
    log.logError(_FILE, "useAbility_DS", "unknown <itemName>: "+itemName)

// ....... Talisman / Summon specific ....... //

func isSummoned(summonName)
  return summon.GetId() = summonName
func canSummon(summonName)
  var talisman = s.getTalisman(summonName)
  ?talisman
    return canUseAbility(talisman) & !isSummoned(summonName)
  :
    log.logError(_FILE, "canSummon", "unknown <summonName>: "+summonName)
    return false

func canHide(summonName)
  var result = s.getTalisman(summonName)

  ?result
    return canUseAbility(result) & isSummoned(summonName)
  :
    log.logError(_FILE, "canHide", "unknown <summonName>: "+summonName)

  return result

func devour(summonName)
  ?s.talisman_table.Contains(summonName)
    ?isSummoned(summonName)
      /*?summonName = ""
        activate */
      /*:?summonName = ""
        activate */
      ?summonName = "voidweaver"
        activate voidweaver
      :?summonName = "cinderwisp"
        activate cinderwisp
      /*:?summonName = ""
        activate */
      /*: // summonName = ""
        activate */
    :
      log.logError(_FILE, "devour", "'"+summonName+"' isn't summoned")
  :
    log.logError(_FILE, "devour", "unknown <summonName>: "+summonName)

func canUnmakeVoidweaver()
  return !(foe = "boss" | foe.buffs.string = "stability")

func canKillCinderwisp(cinderwispDmg, margin)
  var result = false
  var debuffCount = null // amount of debuffs stacked

  ?canUseAbility("cinderwisp") & debuffCount
    debuffCount = s.getEffectStat("foe","debuff","ignition","count")
    result = s.getTotalHP("foe") <= (debuffCount * cinderwispDmg) + margin

  return result
func isCinderwispCap(ignitions_cap)
  ?foe.debuffs.string
    return foe.debuffs.string = ignitions_cap
  :
    return false

// ................. Potions ................ //

/* Checks if a certain potion can be brewed. */
func canBrewPotion()
  ?!potionType
    log.logError(_FILE, "canBrewPotion", "<potionType> has not been set")
    return false
  :
    // Entry sanitization
    potionType = string.ToLower(potionType)

    ?!s.potion_table.Contains(potionType)
      log.logError(_FILE, "canBrewPotion", "unknown <potionType>: "+potionType)
      return false
    :
      var result = loc.begin & item.potion ! potionType

      ?potionType   = "strength"
        result = result & res.stone >= 20
      :?potionType  = "experience"
        result = result & res.wood >= 20
      :?potionType  = "healing"
        result = result & res.tar >= 20
      :?potionType  = "lightning"
        result = result & res.bronze >= 20
      :?potionType  = "vampiric"
        result = result & res.tar >= 10 & res.bronze >= 10
      :?potionType  = "lucky"
        result = result & res.stone >= 10 & res.bronze >= 10
      :?potionType  = "berserk"
        result = result & res.wood >= 10 & res.bronze >= 10
      :?potionType  = "cleansing"
        result = result & res.wood >= 10 & res.tar >= 10
      :?potionType  = "defensive"
        result = result & res.stone >= 10 & res.tar >= 10
      : // potionType  = "invisibility"
        result = result & res.wood >= 10 & res.stone >= 10

      return result
/* Brews a certain potion. */
func brewPotion()
  ?!potionType
    log.logError(_FILE, "brewPotion", "<potionType> has not been set")
  :
    // Entry sanitization
    potionType = string.ToLower(potionType)

    ?!s.potion_table.Contains(potionType)
      log.logError(_FILE, "brewPotion", "unknown <potionType>: "+potionType)
    :
      ?potionType   = "strength"
        brew stone
      :?potionType  = "experience"
        brew wood
      :?potionType  = "healing"
        brew tar
      :?potionType  = "lightning"
        brew bronze
      :?potionType  = "vampiric"
        brew tar + bronze
      :?potionType  = "lucky"
        brew stone + bronze
      :?potionType  = "berserk"
        brew wood + bronze
      :?potionType  = "cleansing"
        brew wood + tar
      :?potionType  = "defensive"
        brew stone + tar
      : // potionType  = "invisibility"
        brew wood + stone

func canUsePotion()
  ?!potionType
    log.logError(_FILE, "canBrewPotion", "<potionType> has not been set")
    return false
  :
    // Entry sanitization
    potionType = string.ToLower(potionType)

    ?!s.potion_table.Contains(potionType)
      log.logError(_FILE, "canBrewPotion", "unknown <potionType>: "+potionType)
      return false
    :
      return item.CanActivate() &
      ^      item.potion ! "empty" &
      ^      item.potion = potionType

// ........... Damage min-maxing ............ //

func moonjuggle(weapon1, weapon2)
  /* moonjuggling isn't necessary or possible
  under these conditions, do
  dual wielding */
  ?debuffs.string = "stun" |
  ^debuffs.string = "chill" |
  ^buffs.string = "ʘ" // berserk potion
    equipL @weapon2@
    equipR @weapon1@
  : // Normal moonjuggling
    moondialTimer++
    var moondialFrame = moondialTimer % 3

    ?moondialFrame = 1
      equipL moon
      equipR @weapon1@
    :?moondialFrame = 2
      equipL moon
      equipR @weapon2@
    :
      equipL @weapon1@
      equipR @weapon2@

  /* For when you have just 1 +21 sword (weapon2 can be
  anything, it will not be used) */
  /*:?moondialMode = 3
    equipL moon
    equipR @weapon1@*/

func canBurst()
  return burstState
func burst(weaponsArr)
  var n = weaponsArr.Count()

  ?n < 2
    log.logError(_FILE, "doBursting", "<weaponsArr> is too small (has "+n+" weapons)")
  :
    ?burstState // active state
      ?burstTimer < n - 1 // burst frames
        equipL moon
        equipR @weaponsArr[burstTimer]@
        burstTimer ++

      : // reset timer
        burstTimer = 0
        burstState = false

    : // cooldown state
      ?burstCdTimer < n - 2
        equipL @weaponsArr[burstCdTimer]@
        equipR @weaponsArr[burstCdTimer + 1]@
        burstCdTimer += 2
      :
        burstCdTimer = 0
        burstState = true

func AAC(itemLeft, itemRight)
  ?item.left.state = 3
    equipL @itemLeft@
    equipL @item.left@

  ?item.right.state = 3
    equipR @itemRight@
    equip @item.right@ // equip works for two-handed items as well

func canSmoothCast(is1f)
  return !permapotSetup &
  ^!(debuffs.string = "stun"  | // player is stunned, can't attack
  ^  debuffs.string = "chill" | // player is chilled, which drastically reduces movement and attack speeds
  ^  buffs.string = "buff_inf_speed") & // Infernal Staff walking speed boost
  ^(is1f | buffs.string = "ʘ") // 1-frame cast item or berserk potion
func smoothCast(itemName)
  ?totaltime % 2 = 0
    equipL triskelion
    equipR hatchet
  :
    equip @itemName@

func canKbFarm()
  return foe ! "unpushable" & // immune to knockback
  ^!permapotSetup &
  ^canSmoothCast(false) & // smooth cast is required
  // between dashing and crossbow range
  ^s.betweenRange("dash_min","crossbow")

func canEscape()
  return foe ! "ranged" &
  ^foe.distance < s.getRange("dash_min") &
  ^(canUseAbility("staff_stone") |
  ^ canUseAbility("mind"))

func canStutterStep()
  return s.betweenRange("hatchet", "triskelion") &
  ^!(permapotSetup /*| buffs.string = "buff_inf_speed"*/) 
func stutterStep()
  equipL sword 0* +0

  ?totaltime % 2 = 0 // equip every other frame
    equipR triskelion
  :
    equipR hatchet

  /* : // s.inRange("shovel")
    equip shovel
    >h0,0,#red,SHOVEL STUTTERSTEP
   */

// ................ Various ................. //

func canEngage()
  return ai.walking & ai.enabled & !ai.paused &
  ^s.betweenRange("dash_max", "socketed_shield")

//  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓  //
//  ┃ ▄▀▄▀▄▀▄▀▄▀▄ END OF "Combat" ▀▄▀▄▀▄▀▄▀▄▀▄ ┃  //
//  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  //