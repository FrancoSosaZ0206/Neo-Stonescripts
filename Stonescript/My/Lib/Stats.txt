//  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓  //
//  ┃ ▄▀▄▀▄▀▄▀▄ START OF "Stats" ▀▄▀▄▀▄▀▄▀▄ ┃  //
//  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  //


/* // ///////////// FILE INFO //////////////// //

Stats library
Made by IronHawk (Tom Crow)

. ................ Description ................ .

  This library contains a pack of stats from the
  game, as well as querie functions to consult
  and reference.

  It's static, so updates in-game won't be
  reflected here. It is therefore advised to
  keep values updated.

. ................. Importing ................. .

  Desktop:
    Put this file in Stonescript/UI or your
    directory of preference (inside Stonescript),
    then do this:

    var s = import <YourDirectory>/Stats

  Mobile:
    Copy-paste this script and any dependencies
    into your Mindstone.

. ................... Usage ................... .

  Example - TO DO:

  TO DO

. ............................................. .

Enjoy! */

/* HITBOXES AND SPLASH RANGES

Ranges + Hitboxes table

Link: https://discord.com/channels/423242655498240000/609453573113249924/1283482516287918153

"So here are the main hitboxes, with slashes ('/')
showing splash area to the right vs odd-width foe.

All hitbox widths are odd unless it says even,
which means splash rounds down while main hit
rounds up.

          11111111
012345678901234567
..bbbbbBbbbbb////. bardiche, bfg
...sssSsss/....... skeleton arm (has 1 aoeX)
..ccCcc////....... basic crossbow left
...ccCcc////...... basic crossbow right
....ccCcc////..... heavy crossbows, heavy hammer
..ssSss///........ sword left, staff melee, hammer left (even)
...ssSss///....... sword right, big sword left, hammer right (even)
....ssSss///...... big sword right (even)
..wWw////......... wand left, torch left, harmonic
...rRr////........ runestone left, runestone right
....wWw////....... wand right, staff magic, torch right
G////............. grappling
tTt////........... stone throw left
.tTt////.......... stone throw right
..pPp////......... punch, kick
.hhhHhhh////...... hatchet (even) (has 5 aoeX)
.ssSss///......... shovel (even)
....ffffffffffffff fissure left (up to 63) (even)
......ffffffffffff fissure right (up to 65) (even)"

******************************************************
How splash and the table works:

Link: https://discord.com/channels/423242655498240000/609453573113249924/1378196531706073178

"The top row of the table is distance to the enemy
and the letters are where that hitbox will hit.
For example, bardiche will hit an enemy at
distance 12, but not 13.

Enemies have their own collision width extending to
the right, which is why you don't miss when
swinging at dist 1.

When a projectile hits the first enemy, it
splashes and hits the rest, using a different
calculation:

For most projectiles, it grows the projectile
hitbox by 4 units on both sides, 2 units vertically
(to the area shown with slashes), but there is a
bug that will shift the enemy hitbox left by half
their collision width with the splash collision
detection, so actually you get +1 range on top of
this if the enemy is 3-wide, +2 if its 5-wide, etc.

I don't recall how even enemy widths round, it might
depend if the projectile hitbox is even or odd, [...]."
*/

/* ENGAGING RANGE AND CONDITIONS

Engage conditions

Link: https://discord.com/channels/423242655498240000/597668520888762388/1242108255178592339

Hallifax: "You get the armor when the enemy goes to state 2, [...] Maybe check how many foes there are and how much armor you gained, and do some math to check whether you got all? Idk."

Engage ranges

Link: https://discord.com/channels/423242655498240000/609453573113249924/1198026098143932546

By Ket

Related files are downloaded in Stonescript/Borrowed
wakeupTimes.txt
wakeupStats.txt

*/

// //////////////// IMPORTS ///////////////// //

var u = import My/Lib/Utilities


// /////////////// VARIABLES //////////////// //

// .................. IDs ................... //

// TO DO: implement for renamed weapons
/*var item_table = [ // all items with their names and stonescript IDs
^   "NAME"          , "STONESCRIPT ID"      , "STAR LEVEL"      , "ENCHANT LEVEL"       , "LOST"    , "COSMETIC"
^]*/

var ability_table = [ // ability cooldown IDs only
^   "blade",
^   "mask",
^   "arm",

^   "mind",

^   "bash",
^   "dash",

^   "bardiche",
^   "heavy_hammer",
^   "quarterstaff",

// ^   "stone_talisman",
// ^   "poison_talisman",
// ^   "vigor_talisman",
^   "aether_talisman",
^   "fire_talisman",
// ^   "ice_talisman",

// ^   "",
// ^   "",
// ^   "",
^   "voidweaver",
^   "cinderwisp",
// ^   "",

^   "wand_stone",
^   "wand_poison",
^   "wand_vigor",
^   "wand_aether",
^   "wand_fire",
^   "wand_ice",

^   "staff_stone",
^   "staff_poison",
^   "staff_vigor",
^   "staff_aether",
^   "staff_fire",
^   "staff_ice"
^]

var talisman_table = [
^   "TALISMAN"        , "SUMMON"      ,

// ^   "poison_talisman" , ""  ,
// ^   "vigor_talisman"  , ""  ,
^   "aether_talisman" , "voidweaver"  ,
^   "fire_talisman"   , "cinderwisp" //  ,
// ^   "ice_talisman"    , ""  ,
// ^   "stone_talisman"  , ""
^]

var hidden_table = [
^   "ID"                  , "NAME"              , "REQUIRED ARMOR",

// Hidden wands
^   "wand_poison"  , "plague wand"       , 6   ,
^   "wand_vigor"   , "reset wand"        , 1   ,
^   "wand_aether"  , "calamity wand"     , 14  ,
^   "wand_fire"    , "explosive wand"    , 4   ,
^   "wand_ice"     , "frost wand"        , 3   ,
^   "wand_stone"   , "gravity wand"      , 0   ,

// Hidden staves
^   "staff_poison" , "berserker staff"   , 8   ,
^   "staff_vigor"  , "prevention staff"  , 4   ,
^   "staff_aether" , "grasping staff"    , 2   ,
^   "staff_fire"   , "infernal staff"    , 6   ,
^   "staff_ice"    , "eternity staff"    , 1   ,
^   "staff_stone"  , "acrobatic staff"   , 3
^]

var potion_table = [
^   "strength"        ,
^   "experience"      ,
^   "healing"         ,
^   "lightning"       ,
^   "vampiric"        ,
^   "lucky"           ,
^   "berserk"         ,
^   "cleansing"       ,
^   "defensive"       ,
^   "invisibility"
^]


// ............. Weapon Ranges .............. //

var range_table = [
^   "ID"                    , "RANGE",

^   "blade"                 , 11,
^   "arm"                   , 7,

^   "bardiche"              , 9,
^   "bardiche ability"      , 7,  // Ability
^   "heavy_hammer"          , 7,
^   "heavy_hammer ability"  , 21, // Ability

// These count both for dashing and bashing shields:
^   "dash_min"              , 11,
^   "dash_max"              , 16,

^   "shovel"                , 2,
^   "hatchet"               , 5,
^   "grappling_hook"        , 13,

// soul stones (the mindstone can be used no matter the range)
^   "star"                  , 12,
^   "ki"                    , 18,
^   "experience"            , 18,
^   "triskelion"            , 10,
^   "moon"                  , 18,

^   "sword"                 , 5,
^   "hammer"                , 5,
^   "quarterstaff"          , 5,
^   "big_sword"             , 6,
^   "wand"                  , 20,
^   "socketed_staff"        , 20,
^   "crossbow"              , 22,
^   "socketed_shield"       , 40  // Engaging range
^]

// Special stats

/* the added range that the
Grasping Staff's ability adds: */
var grasping_buff = 10
var grasping_cap = 22

// Berserker Staff's bonus damage (%) at +1.
var berserker_base = 10
var reset_base = 29.5
// Plague Wand's Weaken level table
var plague_table = [1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6]

// Mask
var mask_lvl_table = [
^[5, 6, 7, 8, 9, 10], // Feeble: damage
^[1, 2, 3, 4, 5, 6 ]  // Active: max stacks
^]
// damage reduction per feeble applied
var maskEffReduction = 2


// //////////////// FUNCTIONS //////////////// //

/* Returns a stat of an effect,
or null if there was an error.

Valid <source> values: "foe", "player"
Valid <effectType> values: "buff", "debuff"
Valid <effectId> values: same as in game.
  for more info, consult the Wiki: https://stonestoryrpg.miraheze.org/wiki/Status_Effects
Valid <statType> values:
  - "1", "symbol"
  - "2", "name", "id"
  - "3", "count", "stack"
  - "4", "time", "duration" */
func getEffectStat(source, effectType, effectId, statType)
  // Entry sanitization:
  source = string.ToLower(source)
  effectType = string.ToLower(effectType)
  effectId = string.ToLower(effectId)
  statType = string.ToLower(statType)

  var stat = null // the effect stat to return
  var fxStr = null // the full effects string

  ?source = "foe" & string.Equals(effectType, "buff")
    fxStr = foe.buffs.string
  :?source = "foe" & effectType = "debuff"
    fxStr = foe.debuffs.string

  :?source = "player" & string.Equals(effectType, "buff")
    fxStr = buffs.string
  :?source = "player" & effectType = "debuff"
    fxStr = debuffs.string

  :
    showStrCtr(0,30,#red,"ERROR\nFILE: Stats\nFUNCTION: getEffectStat\nCAUSE: unknown <source> or <effectType>: <" + source + ">, <" + effectType + ">", false)

  ?fxStr // there are active effects
    // all effects are separated by a "," char
    var fxArr = string.Split(fxStr, ",")

    for i = 0 .. fxArr.Count() - 1
      ?fxArr[i] = effectId // target effect is active
        var fxStats = string.Split(fxArr[i], ":")

        ?statType = "1" | statType = "symbol"
          stat = fxStats[0]
        :?statType = "2" | statType = "name" | statType = "id"
          stat = fxStats[1]
        :?statType = "3" | statType = "count" | statType = "stack"
          stat = int.Parse(fxStats[2]) // convert into an int to be able to operate with in conditionals.
        :?statType = "4" | statType = "time" | statType = "duration"
          stat = int.Parse(fxStats[3]) // convert into an int to be able to operate with in conditionals.

  return stat
/* Returns a string formatted like a table with
a given target's active effects and their stats.
Has a full and a slim version.

- Full version example: "
Foe debuffs table:

Symbol | Name | Count | Time
❄ | chill | 4 | 352
o | stun | 1 | 100
* | unstable | 1 | 12
"

- Slim version example: "
Player buffs table:

<sym> x<n>, <mm:ss f>
i x12, 00:05 24f
∞ x4, 00:07 12f
"

Valid <source> values: "foe", "player"
Valid <effectType> values: "buff", "debuff" */
func getEffectsTable(source, effectType, isSlim)
  // Entry sanitization:
  source = string.ToLower(source)
  effectType = string.ToLower(effectType)

  var fxStr = null
  var fxTable = null

  ?source = "foe" & string.Equals(effectType, "buff")
    fxStr = foe.buffs.string
    fxTable = "Foe buffs"
  :?source = "foe" & effectType = "debuff"
    fxStr = foe.debuffs.string
    fxTable = "Foe debuffs"

  :?source = "player" & string.Equals(effectType, "buff")
    fxStr = buffs.string
    fxTable = "Player buffs"
  :?source = "player" & effectType = "debuff"
    fxStr = debuffs.string
    fxTable = "Player debuffs"

  :
    showStrCtr(0,30,#red,"ERROR\nFILE: Stats\nFUNCTION: showEffects\nCAUSE: unknown <source> or <effectType>: <" + source + ">, <" + effectType + ">", false)


  ?fxStr // there are active effects
    /* Overview:
    1. split effects
    2. for each effect, split into an array with all its stats, and
      a. add it to the matrix, or
      b. for the slim version, add all except index 2 (the name).

    - Effects are separated by a "," char
    - Stats are separated by a ":" char */
    
    var fxArr = []
    fxTable += "table:\n\n"

    ?!isSlim
      fxTable += "Symbol | Name | Count | Time\n"
    :
      fxTable += "<sym> x<n>, <mm:ss f>"

    var fxArr = string.Split(fxStr, ",")
    var fxArrFormatted = []
    for i = 0 .. fxArr.Count() - 1
      var fxStats = string.Split(fxArr[i], ":")
      var statsFormatted = null

      ?!isSlim
        statsFormatted = string.Join(" | ", fxArr)
      :
        statsFormatted = fxStats[0] + " x" + // <sym>
        ^fxStats[2] + ", " + // <n>
        ^u.myFormatSpeedrun(fxStats[3]) // <t>

      ?i < fxArr.Count() - 1
        statsFormatted += "\n"

      fxArrFormatted.Add(statsFormatted)

    fxTable += string.Join("\n", fxArrFormatted)

  return fxTable

/* Returns the sum of a given target's current hp and
armor. */
func getTotalHP(source)
  ?source = "foe"
    return foe.hp + foe.armor
  :?source = "player"
    return hp + armor
  :
    showStrCtr(0,30,#red,"ERROR\nFILE: Stats\nFUNCTION: getTotalHP\nCAUSE: unknown <source>: " + source, false)

    return null

/* Returns an armor stat from an item's ID or null if there was an error.
Works with hidden items only. */
func getArmor(source)
  var armorI = hidden_table.IndexOf(source) +
  ^            hidden_table.IndexOf("REQUIRED ARMOR")

  ?armorI >= 5 // first armor value's index
    return hidden_table[armorI]
  : // armorI <= 0 -- not found or error
    u.showStrCtr(0,30,#red,"ERROR\nFILE: Stats\nFUNCTION: getArmor\nCAUSE: unknown <source>:\n\n" + source, false)
    return null
/* Returns a talisman's name/ID from a summon's ID or null if there was an error. */
func getTalisman(source)
  var talismanI = talisman_table.IndexOf(source) - 1 // index of "TALISMAN"

  ?talismanI >= 2 // first talisman value's index
    return talisman_table[talismanI]
  : // talismanI <= -1 -- not found or error
    u.showStrCtr(0,30,#red,"ERROR\nFILE: Stats\nFUNCTION: getTalisman\nCAUSE: unknown <source>:\n\n" + source, false)
    return null
/* Returns a summon's name/ID from a talisman's ID or null if there was an error. */
func getSummon(source)
  var summonI = talisman_table.IndexOf(source) +
  ^             talisman_table.IndexOf("SUMMON")

  ?summonI >= 3 // first summon value's index
    return talisman_table[summonI]
  : // summonI <= 0 -- not found or error
    u.showStrCtr(0,30,#red,"ERROR\nFILE: Stats\nFUNCTION: getSummon\nCAUSE: unknown <source>:\n\n" + source, false)
    return null
/* Returns each weapon's range, or null
if there was an error.

Accounts for the Grasping Staff's
buff and Pallas's debuff.
*************************************
   REQUIRES WEAPON ID EXCLUSIVELY.
************************************* */
func getRange(source)
  var result = null
  var isIncreased = false
  var canIncrease = true
  var isReduced = false

  var rangeI = range_table.IndexOf(source) +
  ^            range_table.IndexOf("RANGE")

  ?rangeI >= 3 // first range value's index
    result = range_table[rangeI]

    ?source = "crossbow" |
    ^source = "triskelion"
      canIncrease = false

    ?buffs.string = "buff_range" &
    ^canIncrease & !isIncreased
      result = result + grasping_buff
      isIncreased = true

    ?debuffs.string = "pallas_phase2_debuff" & !isReduced
      result--
      isReduced = true

    ?result >= grasping_cap & isIncreased
      result = grasping_cap
  :
    u.showStrCtr(0,30,#red,"ERROR\nFILE: Stats\nFUNCTION: getRange\nCAUSE: unknown <source>:\n\n" + source, false)
    result = false

  return result
func inRange(source)
  ?source = "dash" | source = "bash"
    return foe.distance =
    ^math.Clamp(foe.distance,
    ^           getRange("dash_min"),
    ^           getRange("dash_max") )
  :
    return foe.distance <= getRange(source) + 1
/* Returns true if  */
func betweenRange(source1, source2)
  ?!range_table.Contains(source1) |
  ^!range_table.Contains(source2)
    u.showStrCtr(0,30,#red,"ERROR\nFILE: Stats\nFUNCTION: betweenRange\nCAUSE: unknown <source1> or <source2>:\n\n<"+source1+">,<"+source2+">", false)
    return false
  :
    return foe.distance =
    ^math.Clamp(foe.distance,
    ^           getRange(source1),
    ^           getRange(source2) )

// TO DO: COMPLETE THIS FUNCTION
/* Calculates the damage the player will deal
in their next hit.

Accounts for these external factors:
  - Lucky potion.
  - Strength potion.
  - Berserker Staff's damage increment.
  - Weaken debuffs dealt to the player.
  - If the item is a hammer and the foe has armor.

itemDmg = the base damage of your target weapon (> 0).
itemMult = the item's critical damage multiplier (> 0)
           (only taken into account when using Lucky potion).
berserkerLvl = your Berserker Staff's enchantment level
             (1 <= x <= 21).
armorMult = if the target item is a hammer, its bonus
            damage multiplier to foes with armor (> 0). */
/* func getPlayerDmg(itemDmg, itemMult, berserkerLvl, armorMult)
  var result = null
  var applied = [false,false,false,false]

  ?itemDmg > 0 & itemMult > 0 &
  ^1 <= berserkerLvl & berserkerLvl <= 21
    ?!result
      result = itemDmg

    ?buffs.string
      ?buffs.string = "buff_staff_berserk" & !applied[0]
        result += getHiddenStat("berserk staff", berserkerLvl)
        applied[0] = true

      ?buffs.string = "!" & !applied[1] // lucky crit buff
        ?buffs.string = "✖" & !applied[2] // lucky_mult buff
          itemMult += // whatever lucky_mult is
        result *= itemMult
        applied[1] = true
  :
    u.showStrCtr(0,30,#red,"ERROR\nFILE: Stats\nFUNCTION: getPlayerDmg\nCAUSE: invalid entry/entries:\n\n" + source, false)

    result = null
  
  return result*/

/* Calculates a foe's damage.

Accounts for damage-reduction debuffs applied,
or other external factors.
Returns null if there was an error.

plagueLvl = if used, your Plague Wand's
            enchantment level (1 <= x <= 21).
berserkerLvl = your Berserker Staff's enchantment
             level (1 <= x <= 21).
***************** WARNING *****************
  Since these are variable, they can't be
  calculated, so they have to be provided
        for this function to work.
******************************************* */
func getFoeDmg(berserkerLvl, plagueLvl, maskLvl)
  ?(buffs.string = "buff_frozen") // Eternity Staff will prevent any damage
    return 0

  :?berserkerLvl = math.Clamp(berserkerLvl, 1, 21) &
  ^plagueLvl = math.Clamp(plagueLvl, 1, 21) &
  ^maskLvl = math.Clamp(maskLvl, 5, 10)

    var result = foe.damage
    // TO DO: get way to identify Plague Wand debuff
    var applied = [false,false,false,false]

    ?foe.debuffs.string
      ?buffs.string = "buff_staff_berserk" & !applied[0]
        result += (foe.damage *
        ^          (getHiddenStat("berserker staff", berserkerLvl)
        ^           / 100))
        applied[0] = true

      ?foe.debuffs.string = "debuff_damage" & !applied[1]
        result -= 4
        applied[1] = true

      ?foe.debuffs.string = "debuff_damage" &
      ^item.GetCooldown("wand_poison") >= ((30 * u.sec) - (3 * u.sec)) & // (total cd duration) - (effect duration)
      ^!applied[2]
        result -= getHiddenStat("plague wand", plagueLvl)
        applied[2] = true

      ?foe.debuffs.string = "feeble" & !applied[3]
        result -= (2 * (maskLvl - 4))
        applied[3] = true

    ?result < 0
      result = 0

    return result
  
  : // invalid entries
    u.showStrCtr(0,30,#red,"ERROR\nFILE: Stats\nFUNCTION: getFoeDmg\nCAUSE: invalid entry/entries:\n\n" + "plagueLvl = " + plagueLvl + "\nberserkerLvl = " + berserkerLvl, false)

    return null

// TO DO: COMPLETE MISSING HIDDEN STAVES AND WANDS
/* Returns stats for hidden wands or staves, based
on their enchant level. */
func getHiddenStat(hiddenName, lvl)
  // Entry sanitization
  hiddenName = string.ToLower(hiddenName)
  ?hidden_table.Contains(hiddenName) // valid hiddenName
    ?math.Clamp(lvl, 1, 21) = lvl // lvl is in range
      ?hiddenName = "berserker staff"
        return berserker_base + lvl - 1
      :?hiddenName = "plague wand"
        return plague_table[lvl - 1]
      :?hiddenName = "reset wand"
        return reset_base - (0.5 * (lvl - 1))
    :
      u.showStrCtr(0,30,#red,"ERROR\nFILE: Stats\nFUNCTION: getHiddenStat\nCAUSE: invalid <lvl>:\n\n" + lvl, false)

      return null
  :
    u.showStrCtr(0,30,#red,"ERROR\nFILE: Stats\nFUNCTION: getHiddenStat\nCAUSE: unknown <hiddenName>:\n\n" + hiddenName, false)

    return null

/* Calculates the damage the Bardiche's ability will do,
based on its base damage and crit multiplier. */
func bardicheDmgR(dmg, mult)
  return (dmg + 17) * mult


//  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓  //
//  ┃ ▄▀▄▀▄▀▄▀▄▀ END OF "Stats" ▄▀▄▀▄▀▄▀▄▀▄ ┃  //
//  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  //
