//  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓  //
//  ┃ ▄▀▄▀▄▀▄▀▄ START OF "Stats" ▀▄▀▄▀▄▀▄▀▄ ┃  //
//  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  //


/* // ///////////// FILE INFO //////////////// //

Stats library
Made by IronHawk (Tom Crow)

. ................ Description ................ .

  This library contains a pack of stats from the
  game, as well as querie functions to consult
  and reference.

  It's static, so updates in-game won't be
  reflected here. It is therefore advised to
  keep values updated.

. ................. Importing ................. .

  Desktop:
    Put this file in Stonescript/UI or your
    directory of preference (inside Stonescript),
    then do this:

    var s = import <YourDirectory>/Stats

  Mobile:
    Copy-paste this script and any dependencies
    into your Mindstone.

. ................... Usage ................... .

  Example - TO DO:

  TO DO

. ............................................. .

Enjoy! */

/* HITBOXES AND SPLASH RANGES

Ranges + Hitboxes table

Link: https://discord.com/channels/423242655498240000/609453573113249924/1283482516287918153

"So here are the main hitboxes, with slashes
showing splash area to the right vs odd-width foe.

All hitbox widths are odd unless it says even,
which means splash rounds down while main hit
rounds up.

          11111111
012345678901234567
..bbbbbBbbbbb////. bardiche, bfg
...sssSsss/....... skeleton arm (has 1 aoeX)
..ccCcc////....... basic crossbow left
...ccCcc////...... basic crossbow right
....ccCcc////..... heavy crossbows, heavy hammer
..ssSss///........ sword left, staff melee, hammer left (even)
...ssSss///....... sword right, big sword left, hammer right  (even)
....ssSss///...... big sword right (even)
..wWw////......... wand left, torch left, harmonic
...rRr////........ runestone left, runestone right
....wWw////....... wand right, staff magic, torch right
G////............. grappling
tTt////........... stone throw left
.tTt////.......... stone throw right
..pPp////......... punch, kick
.hhhHhhh////...... hatchet (even) (has 5 aoeX)
.ssSss///......... shovel (even)
....ffffffffffffff fissure left (up to 63) (even)
......ffffffffffff fissure right (up to 65) (even)"

******************************************************
How splash and the table works:

Link: https://discord.com/channels/423242655498240000/609453573113249924/1378196531706073178

"The top row of the table is distance to the enemy
and the letters are where that hitbox will hit.
For example, bardiche will hit an enemy at
distance 12, but not 13.

Enemies have their own collision width extending to
the right, which is why you don't miss when
swinging at dist 1.

When a projectile hits the first enemy, it
splashes and hits the rest, using a different
calculation:

For most projectiles, it grows the projectile
hitbox by 4 units on both sides, 2 units vertically
(to the area shown with slashes), but there is a
bug that will shift the enemy hitbox left by half
their collision width with the splash collision
detection, so actually you get +1 range on top of
this if the enemy is 3-wide, +2 if its 5-wide, etc.

I don't recall how even enemy widths round, it might
depend if the projectile hitbox is even or odd, [...]."
*/

// //////////////// IMPORTS ///////////////// //

var u = import My/Lib/Utilities


// /////////////// VARIABLES //////////////// //

// ............. Weapon Ranges .............. //

var skeletonArm_range = 7

var bardiche_range = 9
var bardiche_ability_range = 7
var heavyHammer_range = 7 // CHECK
var heavyHammer_ability_range = 21 // CHECK

// These count both for dashing and bashing shields:
var dash_range_min = 11
var dash_range_max = 15

var hatchet_range = 5
var grapplingHook_range = 13

// soul stones (the mindstone can be used no matter the range)
var stone_star_range = 12
var stone_ki_range = 18
var stone_experience_range = 18
var stone_triskelion_range = 10
var stone_moondial_range = 18

var sword_range = 5
var hammer_range = 5
var quarterstaff_range = 5
var sword_big_range = 6
var wand_range = 20
var staff_range = 20
var crossbow_range = 22
var crossbow_rune_range = 23
var shield_rune_range = 40

// Special stats

// Hidden wands
var wand_stone_armor = 0      // gravity
var wand_poison_armor = 6     // plague
var wand_vigor_armor = 1      // reset
var wand_aether_armor = 14    // calamity
var wand_fire_armor = 4       // explosive
var wand_ice_armor = 3        // frost

// Hidden staves
var staff_stone_armor = 3     // acrobatic
var staff_poison_armor = 8    // berserker
var staff_vigor_armor = 4     // prevention
var staff_aether_armor = 2    // grasping
var staff_fire_armor = 6      // infernal
var staff_ice_armor = 1       // eternity

/* the added range that the
Grasping Staff's ability adds: */
var grasping_buff = 10
var grasping_cap = 22


// //////////////// FUNCTIONS //////////////// //

/* Returns each weapon's range.
Accounts for the Grasping Staff's
buff and Pallas's debuff, or -1
if there was an error.
************************************
DOESN'T ACCEPT WEAPONS, BUT SPECIFIC
KEYWORDS THAT REPRESENT THEM.
************************************ */
// TO DO: ADD THE REMAINING WEAPONS' RANGES.
func getRange(itemName)
  var result = null
  var isIncreased = false
  var canIncrease = true
  var isReduced = false

  ?!result
    ?itemName = "sword"
      result = sword_range
    :?itemName = "sword big"
      result = sword_big_range
    :?itemName = "hammer" & itemName ! "heavy"
      result = hammer_range

    :?itemName = "wand" & !result
      result = wand_range
    :?itemName = "crossbow" & !result
      ?itemName = "rune"
        result = crossbow_rune_range
      :
        result = crossbow_range

    :?itemName = "quarterstaff" | itemName = "staff"
      result = staff_range

    :?itemName = "arm"
      result = arm_range

    :?itemName = "hatchet"
      result = hatchet_range

    :?itemName = "bardiche"
      ?itemName = "ability"
        result = bardiche_ability_range
      :
        result = bardiche_range
    :?itemName = "heavy_hammer"
      ?itemName = "ability"
        result = heavyHammer_ability_range
      :
        result = heavyHammer_range

    :?itemName = "grappling_hook"
      result = grapplingHook_range

    :?itemName = "trisk" | itemName = "triskelion"
      result = stone_triskelion_range
      canIncrease = false

    :
      showStrCtr(0,30,#red,"ERROR\nFILE: Stats\nFUNCTION: getRange\nCAUSE: unknown <itemName>: " + itemName, false)

  ?buffs.string = "buff_range" &
  ^!isIncreased & canIncrease
    result = result & grasping_buff
    isIncreased = true

  ?debuffs.string = "pallas_phase2_debuff" & !isReduced
    result--
    isReduced = true

  ?result
    ?result >= grasping_cap
      ?isIncreased
      :
        result = grasping_cap
  :
    result = -1

  return result

/* Returns a stat of an effect,
or null if there was an error.

Valid <source> values: "foe", "player"
Valid <effectType> values: "buff", "debuff"
Valid <effectId> values: same as in game.
  for more info, consult the Wiki: https://stonestoryrpg.miraheze.org/wiki/Status_Effects
Valid <statType> values:
  - "1", "symbol"
  - "2", "name", "id"
  - "3", "count", "stack"
  - "4", "time", "duration" */
func getEffectStat(source, effectType, effectId, statType)
  // Entry sanitization:
  source = string.ToLower(source)
  effectType = string.ToLower(effectType)
  effectId = string.ToLower(effectId)
  statType = string.ToLower(statType)

  var stat = null // the effect stat to return
  var fxStr = null // the full effects string

  ?source = "foe" & effectType = "buff"
    fxStr = foe.buffs.string
  :?source = "foe" & effectType = "debuff"
    fxStr = foe.debuffs.string

  :?source = "player" & effectType = "buff"
    fxStr = buffs.string
  :?source = "player" & effectType = "debuff"
    fxStr = debuffs.string

  :
    showStrCtr(0,30,#red,"ERROR\nFILE: Stats\nFUNCTION: getEffectStat\nCAUSE: unknown <source> or <effectType>: <" + source + ">, <" + effectType + ">", false)


  ?fxStr // there are active effects
    // all effects are separated by a "," char
    var fxArr = string.Split(fxStr, ",")

    for i = 0 .. a.Count(fxArr) - 1
      ?fxArr[i] = effectId // target effect is active
        var effectStats = string.Split(fxArr[i], ":")

        ?statType = "1" | statType = "symbol"
          stat = effectStats[0]
        :?statType = "2" | statType = "name" | statType = "id"
          stat = effectStats[1]
        :?statType = "3" | statType = "count" | statType = "stack"
          stat = effectStats[2]
        :?statType = "4" | statType = "time" | statType = "duration"
          stat = effectStats[3]

  return stat

/* Returns a string formatted like a table with
a given target's active effects and their stats.
Has a full and a slim version.

- Full version example: "
Foe debuffs table:

Symbol | Name | Count | Time
❄ | chill | 4 | 352
o | stun | 1 | 100
* | unstable | 1 | 12
"

- Slim version example: "
Player buffs table:

<sym> x<n>, <mm:ss f>
i x12, 00:05 24f
∞ x4, 00:07 12f
"

Valid <source> values: "foe", "player"
Valid <effectType> values: "buff", "debuff" */
func getEffectsTable(source, effectType, isSlim)
  // Entry sanitization:
  source = string.ToLower(source)
  effectType = string.ToLower(effectType)

  var fxPanel = null
  var fxStr = null
  var fxTable = null

  ?source = "foe" & effectType = "buff"
    fxStr = foe.buffs.string
    fxTable = "Foe buffs"
  :?source = "foe" & effectType = "debuff"
    fxStr = foe.debuffs.string
    fxTable = "Foe debuffs"

  :?source = "player" & effectType = "buff"
    fxStr = buffs.string
    fxTable = "Player buffs"
  :?source = "player" & effectType = "debuff"
    fxStr = debuffs.string
    fxTable = "Player debuffs"

  :
    showStrCtr(0,30,#red,"ERROR\nFILE: Stats\nFUNCTION: showEffects\nCAUSE: unknown <source> or <effectType>: <" + source + ">, <" + effectType + ">", false)


  ?fxStr // there are active effects
    /* Overview:
    1. split effects
    2. for each effect, split into an array with all its stats, and
      a. add it to the matrix, or
      b. for the slim version, add all except index 2 (the name).

    - Effects are separated by a "," char
    - Stats are separated by a ":" char */
    
    var fxArr = []
    fxTable += "table:\n\n"

    ?!isSlim
      fxTable += "Symbol | Name | Count | Time\n"
    :
      fxTable += "<sym> x<n>, <mm:ss f>"

    var fxArr = string.Split(fxStr, ",")
    for i = 0 .. a.Count(fxArr) - 1
      var effectStats = string.Split(fxArr[i], ":")
      var statsFormatted = null

      ?!isSlim
        statsFormatted = string.Join(" | ", fxArr)
      :
        statsFormatted = fxArr[0] + " x" + // <sym>
        ^fxArr[2] + ", " + // <n>
        ^u.myFormatSpeedrun(fxArr[3]) // <t>

      fxArr = a.Add(statsFormatted)

    fxTable += string.Join("\n", fxArr)

  return fxTable

/* Returns the sum of a given target's current hp and
armor. */
func getTotalHP(source)
  ?source = "foe"
    return foe.hp + foe.armor
  :?source = "player"
    return hp + armor
  :
    showStrCtr(0,30,#red,"ERROR\nFILE: Stats\nFUNCTION: getTotalHP\nCAUSE: unknown <source>: " + source, false)

    return null


//  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓  //
//  ┃ ▄▀▄▀▄▀▄▀▄▀ END OF "Stats" ▄▀▄▀▄▀▄▀▄▀▄ ┃  //
//  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  //
